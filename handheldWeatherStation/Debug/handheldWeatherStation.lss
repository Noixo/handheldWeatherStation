
handheldWeatherStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000018fa  0000198e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000ae  008000ae  000019dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000228c  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfa  00000000  00000000  00003e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001225  00000000  00000000  00004b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  00005db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  000062c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f2  00000000  00000000  00006917  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00008209  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bc c1       	rjmp	.+888    	; 0x37a <__ctors_end>
       2:	d6 c1       	rjmp	.+940    	; 0x3b0 <__bad_interrupt>
       4:	d5 c1       	rjmp	.+938    	; 0x3b0 <__bad_interrupt>
       6:	d4 c1       	rjmp	.+936    	; 0x3b0 <__bad_interrupt>
       8:	d3 c1       	rjmp	.+934    	; 0x3b0 <__bad_interrupt>
       a:	d2 c1       	rjmp	.+932    	; 0x3b0 <__bad_interrupt>
       c:	d1 c1       	rjmp	.+930    	; 0x3b0 <__bad_interrupt>
       e:	d0 c1       	rjmp	.+928    	; 0x3b0 <__bad_interrupt>
      10:	cf c1       	rjmp	.+926    	; 0x3b0 <__bad_interrupt>
      12:	ce c1       	rjmp	.+924    	; 0x3b0 <__bad_interrupt>
      14:	cd c1       	rjmp	.+922    	; 0x3b0 <__bad_interrupt>
      16:	cc c1       	rjmp	.+920    	; 0x3b0 <__bad_interrupt>
      18:	72 c6       	rjmp	.+3300   	; 0xcfe <__vector_12>
      1a:	ca c1       	rjmp	.+916    	; 0x3b0 <__bad_interrupt>
      1c:	c9 c1       	rjmp	.+914    	; 0x3b0 <__bad_interrupt>

0000001e <__trampolines_end>:
      1e:	00 40       	sbci	r16, 0x00	; 0
      20:	7a 10       	cpse	r7, r10
      22:	f3 5a       	subi	r31, 0xA3	; 163
      24:	00 a0       	ldd	r0, Z+32	; 0x20
      26:	72 4e       	sbci	r23, 0xE2	; 226
      28:	18 09       	sbc	r17, r8
      2a:	00 10       	cpse	r0, r0
      2c:	a5 d4       	rcall	.+2378   	; 0x978 <bmp280GetPressure+0x33e>
      2e:	e8 00       	.word	0x00e8	; ????
      30:	00 e8       	ldi	r16, 0x80	; 128
      32:	76 48       	sbci	r23, 0x86	; 134
      34:	17 00       	.word	0x0017	; ????
      36:	00 e4       	ldi	r16, 0x40	; 64
      38:	0b 54       	subi	r16, 0x4B	; 75
      3a:	02 00       	.word	0x0002	; ????
      3c:	00 ca       	rjmp	.-3072   	; 0xfffff43e <__eeprom_end+0xff7ef43e>
      3e:	9a 3b       	cpi	r25, 0xBA	; 186
      40:	00 00       	nop
      42:	00 e1       	ldi	r16, 0x10	; 16
      44:	f5 05       	cpc	r31, r5
      46:	00 00       	nop
      48:	80 96       	adiw	r24, 0x20	; 32
      4a:	98 00       	.word	0x0098	; ????
      4c:	00 00       	nop
      4e:	40 42       	sbci	r20, 0x20	; 32
      50:	0f 00       	.word	0x000f	; ????
      52:	00 00       	nop
      54:	a0 86       	std	Z+8, r10	; 0x08
      56:	01 00       	.word	0x0001	; ????
      58:	00 00       	nop
      5a:	10 27       	eor	r17, r16
      5c:	00 00       	nop
      5e:	00 00       	nop
      60:	e8 03       	fmulsu	r22, r16
      62:	00 00       	nop
      64:	00 00       	nop
      66:	64 00       	.word	0x0064	; ????
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	0a 00       	.word	0x000a	; ????
      6e:	00 00       	nop
      70:	00 00       	nop
      72:	01 00       	.word	0x0001	; ????
      74:	00 00       	nop
      76:	00 00       	nop
      78:	2c 76       	andi	r18, 0x6C	; 108
      7a:	d8 88       	ldd	r13, Y+16	; 0x10
      7c:	dc 67       	ori	r29, 0x7C	; 124
      7e:	4f 08       	sbc	r4, r15
      80:	23 df       	rcall	.-442    	; 0xfffffec8 <__eeprom_end+0xff7efec8>
      82:	c1 df       	rcall	.-126    	; 0x6 <__FUSE_REGION_LENGTH__+0x3>
      84:	ae 59       	subi	r26, 0x9E	; 158
      86:	e1 b1       	in	r30, 0x01	; 1
      88:	b7 96       	adiw	r30, 0x27	; 39
      8a:	e5 e3       	ldi	r30, 0x35	; 53
      8c:	e4 53       	subi	r30, 0x34	; 52
      8e:	c6 3a       	cpi	r28, 0xA6	; 166
      90:	e6 51       	subi	r30, 0x16	; 22
      92:	99 76       	andi	r25, 0x69	; 105
      94:	96 e8       	ldi	r25, 0x86	; 134
      96:	e6 c2       	rjmp	.+1484   	; 0x664 <bmp280GetPressure+0x2a>
      98:	84 26       	eor	r8, r20
      9a:	eb 89       	ldd	r30, Y+19	; 0x13
      9c:	8c 9b       	sbis	0x11, 4	; 17
      9e:	62 ed       	ldi	r22, 0xD2	; 210
      a0:	40 7c       	andi	r20, 0xC0	; 192
      a2:	6f fc       	.word	0xfc6f	; ????
      a4:	ef bc       	out	0x2f, r14	; 47
      a6:	9c 9f       	mul	r25, r28
      a8:	40 f2       	brcs	.-112    	; 0x3a <__trampolines_end+0x1c>
      aa:	ba a5       	ldd	r27, Y+42	; 0x2a
      ac:	6f a5       	ldd	r22, Y+47	; 0x2f
      ae:	f4 90       	lpm	r15, Z
      b0:	05 5a       	subi	r16, 0xA5	; 165
      b2:	2a f7       	brpl	.-54     	; 0x7e <__SREG__+0x3f>
      b4:	5c 93       	st	X, r21
      b6:	6b 6c       	ori	r22, 0xCB	; 203
      b8:	f9 67       	ori	r31, 0x79	; 121
      ba:	6d c1       	rjmp	.+730    	; 0x396 <__do_copy_data+0x10>
      bc:	1b fc       	.word	0xfc1b	; ????
      be:	e0 e4       	ldi	r30, 0x40	; 64
      c0:	0d 47       	sbci	r16, 0x7D	; 125
      c2:	fe f5       	brtc	.+126    	; 0x142 <oled_customChar+0xe>
      c4:	20 e6       	ldi	r18, 0x60	; 96
      c6:	b5 00       	.word	0x00b5	; ????
      c8:	d0 ed       	ldi	r29, 0xD0	; 208
      ca:	90 2e       	mov	r9, r16
      cc:	03 00       	.word	0x0003	; ????
      ce:	94 35       	cpi	r25, 0x54	; 84
      d0:	77 05       	cpc	r23, r7
      d2:	00 80       	ld	r0, Z
      d4:	84 1e       	adc	r8, r20
      d6:	08 00       	.word	0x0008	; ????
      d8:	00 20       	and	r0, r0
      da:	4e 0a       	sbc	r4, r30
      dc:	00 00       	nop
      de:	00 c8       	rjmp	.-4096   	; 0xfffff0e0 <__eeprom_end+0xff7ef0e0>
      e0:	0c 33       	cpi	r16, 0x3C	; 60
      e2:	33 33       	cpi	r19, 0x33	; 51
      e4:	33 0f       	add	r19, r19
      e6:	98 6e       	ori	r25, 0xE8	; 232
      e8:	12 83       	std	Z+2, r17	; 0x02
      ea:	11 41       	sbci	r17, 0x11	; 17
      ec:	ef 8d       	ldd	r30, Y+31	; 0x1f
      ee:	21 14       	cp	r2, r1
      f0:	89 3b       	cpi	r24, 0xB9	; 185
      f2:	e6 55       	subi	r30, 0x56	; 86
      f4:	16 cf       	rjmp	.-468    	; 0xffffff22 <__eeprom_end+0xff7eff22>
      f6:	fe e6       	ldi	r31, 0x6E	; 110
      f8:	db 18       	sub	r13, r11
      fa:	d1 84       	ldd	r13, Z+9	; 0x09
      fc:	4b 38       	cpi	r20, 0x8B	; 139
      fe:	1b f7       	brvc	.-58     	; 0xc6 <__SREG__+0x87>
     100:	7c 1d       	adc	r23, r12
     102:	90 1d       	adc	r25, r0
     104:	a4 bb       	out	0x14, r26	; 20
     106:	e4 24       	eor	r14, r4
     108:	20 32       	cpi	r18, 0x20	; 32
     10a:	84 72       	andi	r24, 0x24	; 36
     10c:	5e 22       	and	r5, r30
     10e:	81 00       	.word	0x0081	; ????
     110:	c9 f1       	breq	.+114    	; 0x184 <oled_font6x8+0x32>
     112:	24 ec       	ldi	r18, 0xC4	; 196
     114:	a1 e5       	ldi	r26, 0x51	; 81
     116:	3d 27       	eor	r19, r29

00000118 <ssd1306_init_sequence>:
     118:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
     128:	00 d5 f0 d9 22 da 12 db 20 8d 14 af                 ...."... ...

00000134 <oled_customChar>:
     134:	0d 1b 11 11 11 1f 0d 1b 11 11 1f 1f 0d 1b 11 1f     ................
     144:	1f 1f 0d 1b 1f 1f 1f 1f 0d 1f 1f 1f 1f 1f           ..............

00000152 <oled_font6x8>:
	...
     15a:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
     16a:	00 24 2a 7f 2a 12 23 13 08 64 62 00 00 36 49 55     .$*.*.#..db..6IU
     17a:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
     18a:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
     19a:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
     1aa:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     1ba:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
     1ca:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
     1da:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     1ea:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     1fa:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     20a:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     21a:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     22a:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     23a:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     24a:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     25a:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     26a:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     27a:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     28a:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     29a:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     2aa:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     2ba:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     2ca:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     2da:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     2ea:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     2fa:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     30a:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     31a:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     32a:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     33a:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     34a:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     35a:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     36a:	a0 a0 a0 7c 00 44 64 54 4c 44 14 14 14 14 14 14     ...|.DdTLD......

0000037a <__ctors_end>:
     37a:	11 24       	eor	r1, r1
     37c:	1f be       	out	0x3f, r1	; 63
     37e:	cf e5       	ldi	r28, 0x5F	; 95
     380:	d2 e0       	ldi	r29, 0x02	; 2
     382:	de bf       	out	0x3e, r29	; 62
     384:	cd bf       	out	0x3d, r28	; 61

00000386 <__do_copy_data>:
     386:	10 e0       	ldi	r17, 0x00	; 0
     388:	a0 e6       	ldi	r26, 0x60	; 96
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	ea ef       	ldi	r30, 0xFA	; 250
     38e:	f8 e1       	ldi	r31, 0x18	; 24
     390:	02 c0       	rjmp	.+4      	; 0x396 <__do_copy_data+0x10>
     392:	05 90       	lpm	r0, Z+
     394:	0d 92       	st	X+, r0
     396:	ae 3a       	cpi	r26, 0xAE	; 174
     398:	b1 07       	cpc	r27, r17
     39a:	d9 f7       	brne	.-10     	; 0x392 <__do_copy_data+0xc>

0000039c <__do_clear_bss>:
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	ae ea       	ldi	r26, 0xAE	; 174
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <.do_clear_bss_start>

000003a4 <.do_clear_bss_loop>:
     3a4:	1d 92       	st	X+, r1

000003a6 <.do_clear_bss_start>:
     3a6:	a8 3b       	cpi	r26, 0xB8	; 184
     3a8:	b2 07       	cpc	r27, r18
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <.do_clear_bss_loop>
     3ac:	d5 d4       	rcall	.+2474   	; 0xd58 <main>
     3ae:	a3 ca       	rjmp	.-2746   	; 0xfffff8f6 <__eeprom_end+0xff7ef8f6>

000003b0 <__bad_interrupt>:
     3b0:	27 ce       	rjmp	.-946    	; 0x0 <__vectors>

000003b2 <bmpCalibration>:

//global variable to store value needed for pressure measurement
long t_fine = 0;

void bmpCalibration()
{
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	68 97       	sbiw	r28, 0x18	; 24
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
	unsigned char i;
	uint16_t* j = (uint16_t*)0;
	unsigned short arr[12];
	//short temp;	//stores 2 byte calibration data
	
	i2c_start();
     3d4:	53 d3       	rcall	.+1702   	; 0xa7c <i2c_start>
	
	i2c_device_id(bmp280, 0);
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	87 e7       	ldi	r24, 0x77	; 119
     3da:	5e d3       	rcall	.+1724   	; 0xa98 <i2c_device_id>
	
	i2c_write(0x88);	//start of calibration data
     3dc:	88 e8       	ldi	r24, 0x88	; 136
     3de:	ad d3       	rcall	.+1882   	; 0xb3a <i2c_write>
	
	//quick start
	i2c_start();
     3e0:	4d d3       	rcall	.+1690   	; 0xa7c <i2c_start>
	i2c_device_id(bmp280, 1);
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	87 e7       	ldi	r24, 0x77	; 119
     3e6:	58 d3       	rcall	.+1712   	; 0xa98 <i2c_device_id>
     3e8:	ce 01       	movw	r24, r28
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	7c 01       	movw	r14, r24
     3ee:	6e 01       	movw	r12, r28
     3f0:	99 e1       	ldi	r25, 0x19	; 25
     3f2:	c9 0e       	add	r12, r25
     3f4:	d1 1c       	adc	r13, r1
     3f6:	87 01       	movw	r16, r14
	
	for(i = 0; i < 12; i++)	//write calibration values to EEPROM or return pointer?
	{
		arr[i] = i2c_read(0);
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	82 d3       	rcall	.+1796   	; 0xb00 <i2c_read>
     3fc:	b8 2e       	mov	r11, r24
		arr[i] <<= 8;
		arr[i] |= i2c_read(0);
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	7f d3       	rcall	.+1790   	; 0xb00 <i2c_read>
		arr[i] = (arr[i] >> 8) | (arr[i] << 8);
     402:	2b 2d       	mov	r18, r11
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	32 2f       	mov	r19, r18
     408:	22 27       	eor	r18, r18
     40a:	28 2b       	or	r18, r24
     40c:	32 27       	eor	r19, r18
     40e:	23 27       	eor	r18, r19
     410:	32 27       	eor	r19, r18
     412:	f8 01       	movw	r30, r16
     414:	21 93       	st	Z+, r18
     416:	31 93       	st	Z+, r19
     418:	8f 01       	movw	r16, r30
	
	//quick start
	i2c_start();
	i2c_device_id(bmp280, 1);
	
	for(i = 0; i < 12; i++)	//write calibration values to EEPROM or return pointer?
     41a:	ce 16       	cp	r12, r30
     41c:	df 06       	cpc	r13, r31
     41e:	61 f7       	brne	.-40     	; 0x3f8 <bmpCalibration+0x46>
		arr[i] = i2c_read(0);
		arr[i] <<= 8;
		arr[i] |= i2c_read(0);
		arr[i] = (arr[i] >> 8) | (arr[i] << 8);
	}
	i2c_read(1);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	6e d3       	rcall	.+1756   	; 0xb00 <i2c_read>
	
	//arr[sizeof(arr)] = i2c_read(1);
	
	i2c_stop();
     424:	32 d3       	rcall	.+1636   	; 0xa8a <i2c_stop>
	
	for(i = 0, j = (uint16_t *)1 ; i < 12; i++)
     426:	01 e0       	ldi	r16, 0x01	; 1
     428:	10 e0       	ldi	r17, 0x00	; 0
	{
		eeprom_write_word((uint16_t *)j, arr[i]);
     42a:	f7 01       	movw	r30, r14
     42c:	61 91       	ld	r22, Z+
     42e:	71 91       	ld	r23, Z+
     430:	7f 01       	movw	r14, r30
     432:	c8 01       	movw	r24, r16
     434:	16 da       	rcall	.-3028   	; 0xfffff862 <__eeprom_end+0xff7ef862>
		j++;
     436:	0e 5f       	subi	r16, 0xFE	; 254
     438:	1f 4f       	sbci	r17, 0xFF	; 255
		while(!eeprom_is_ready());	//wait for eeprom to write data
     43a:	e1 99       	sbic	0x1c, 1	; 28
     43c:	fe cf       	rjmp	.-4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	
	//arr[sizeof(arr)] = i2c_read(1);
	
	i2c_stop();
	
	for(i = 0, j = (uint16_t *)1 ; i < 12; i++)
     43e:	09 31       	cpi	r16, 0x19	; 25
     440:	11 05       	cpc	r17, r1
     442:	99 f7       	brne	.-26     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		eeprom_write_word((uint16_t *)j, arr[i]);
		j++;
		while(!eeprom_is_ready());	//wait for eeprom to write data
	}
}
     444:	68 96       	adiw	r28, 0x18	; 24
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	bf 90       	pop	r11
     462:	08 95       	ret

00000464 <bmpReset>:

void bmpReset()
{
	i2c_start();
     464:	0b d3       	rcall	.+1558   	; 0xa7c <i2c_start>
	(void) i2c_device_id(bmp280, 0);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	87 e7       	ldi	r24, 0x77	; 119
     46a:	16 d3       	rcall	.+1580   	; 0xa98 <i2c_device_id>
	i2c_write(0xE0);
     46c:	80 ee       	ldi	r24, 0xE0	; 224
     46e:	65 d3       	rcall	.+1738   	; 0xb3a <i2c_write>
	
	i2c_start();
     470:	05 d3       	rcall	.+1546   	; 0xa7c <i2c_start>
	(void) i2c_device_id(bmp280, 0);
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	87 e7       	ldi	r24, 0x77	; 119
     476:	10 d3       	rcall	.+1568   	; 0xa98 <i2c_device_id>
	i2c_write(0xB6);
     478:	86 eb       	ldi	r24, 0xB6	; 182
     47a:	5f d3       	rcall	.+1726   	; 0xb3a <i2c_write>
	i2c_stop();
     47c:	06 d3       	rcall	.+1548   	; 0xa8a <i2c_stop>
     47e:	08 95       	ret

00000480 <bmpSet>:
}

void bmpSet(unsigned char settings, unsigned char reg)
{
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	c8 2f       	mov	r28, r24
     486:	d6 2f       	mov	r29, r22
	i2c_start();
     488:	f9 d2       	rcall	.+1522   	; 0xa7c <i2c_start>
	i2c_device_id(bmp280, 0);
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	87 e7       	ldi	r24, 0x77	; 119
     48e:	04 d3       	rcall	.+1544   	; 0xa98 <i2c_device_id>
	i2c_write(reg);
     490:	8d 2f       	mov	r24, r29
     492:	53 d3       	rcall	.+1702   	; 0xb3a <i2c_write>

	i2c_write(settings);
     494:	8c 2f       	mov	r24, r28
     496:	51 d3       	rcall	.+1698   	; 0xb3a <i2c_write>
	i2c_stop();
     498:	f8 d2       	rcall	.+1520   	; 0xa8a <i2c_stop>
}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <bmp280GetTemp>:

//must read temp before reading pressure
//temp is stored as 3 bytes, (0xFA-0xFC)
long bmp280GetTemp()
{
     4a0:	4f 92       	push	r4
     4a2:	5f 92       	push	r5
     4a4:	6f 92       	push	r6
     4a6:	7f 92       	push	r7
     4a8:	8f 92       	push	r8
     4aa:	9f 92       	push	r9
     4ac:	af 92       	push	r10
     4ae:	bf 92       	push	r11
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
	//Keil long = 4 bytes, int = 2
	long adc_T, var1, var2;
	short T;
	
	//take out of sleep, into forced mode
	bmpSet(0x25, CTRL_MEAS); //x1 pressure, x1 temperature, power mode
     4bc:	64 ef       	ldi	r22, 0xF4	; 244
     4be:	85 e2       	ldi	r24, 0x25	; 37
     4c0:	df df       	rcall	.-66     	; 0x480 <bmpSet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4c2:	83 ec       	ldi	r24, 0xC3	; 195
     4c4:	99 e0       	ldi	r25, 0x09	; 9
     4c6:	01 97       	sbiw	r24, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <bmp280GetTemp+0x26>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <bmp280GetTemp+0x2c>
     4cc:	00 00       	nop
	_delay_ms(10);
	
	
	i2c_start();
     4ce:	d6 d2       	rcall	.+1452   	; 0xa7c <i2c_start>
	i2c_device_id(bmp280, 0);
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	87 e7       	ldi	r24, 0x77	; 119
     4d4:	e1 d2       	rcall	.+1474   	; 0xa98 <i2c_device_id>

	i2c_write(0xFA);
     4d6:	8a ef       	ldi	r24, 0xFA	; 250
     4d8:	30 d3       	rcall	.+1632   	; 0xb3a <i2c_write>

	i2c_start();
     4da:	d0 d2       	rcall	.+1440   	; 0xa7c <i2c_start>
	
	i2c_device_id(bmp280, 1);
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	87 e7       	ldi	r24, 0x77	; 119
     4e0:	db d2       	rcall	.+1462   	; 0xa98 <i2c_device_id>
	
	//shove temperature data into a 4 byte variable
	adc_T = i2c_read(0);
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0d d3       	rcall	.+1562   	; 0xb00 <i2c_read>
     4e6:	c8 2e       	mov	r12, r24
     4e8:	d1 2c       	mov	r13, r1
     4ea:	e1 2c       	mov	r14, r1
     4ec:	f1 2c       	mov	r15, r1
	adc_T <<= 8;
     4ee:	fe 2c       	mov	r15, r14
     4f0:	ed 2c       	mov	r14, r13
     4f2:	dc 2c       	mov	r13, r12
     4f4:	cc 24       	eor	r12, r12
	adc_T |= i2c_read(0);
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	03 d3       	rcall	.+1542   	; 0xb00 <i2c_read>
     4fa:	c8 2a       	or	r12, r24
	adc_T <<= 8;
     4fc:	fe 2c       	mov	r15, r14
     4fe:	ed 2c       	mov	r14, r13
     500:	dc 2c       	mov	r13, r12
     502:	cc 24       	eor	r12, r12
	adc_T |= i2c_read(1);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	fc d2       	rcall	.+1528   	; 0xb00 <i2c_read>
     508:	c8 2a       	or	r12, r24
	i2c_stop();
     50a:	bf d2       	rcall	.+1406   	; 0xa8a <i2c_stop>
	//conversion formula takes 20 bits
	adc_T >>= 4;

	//32bit-fixed point formula from BMP280 documentation -pg45-46 (8.2)

	var1 = ((((adc_T>>3) - ((long)dig_T1<<1))) * ((long)dig_T2)) >> 11;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	95 d9       	rcall	.-3286   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     512:	2c 01       	movw	r4, r24
     514:	61 2c       	mov	r6, r1
     516:	71 2c       	mov	r7, r1
     518:	46 01       	movw	r8, r12
     51a:	57 01       	movw	r10, r14
     51c:	68 94       	set
     51e:	16 f8       	bld	r1, 6
     520:	b5 94       	asr	r11
     522:	a7 94       	ror	r10
     524:	97 94       	ror	r9
     526:	87 94       	ror	r8
     528:	16 94       	lsr	r1
     52a:	d1 f7       	brne	.-12     	; 0x520 <bmp280GetTemp+0x80>
     52c:	d3 01       	movw	r26, r6
     52e:	c2 01       	movw	r24, r4
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	aa 1f       	adc	r26, r26
     536:	bb 1f       	adc	r27, r27
     538:	88 1a       	sub	r8, r24
     53a:	99 0a       	sbc	r9, r25
     53c:	aa 0a       	sbc	r10, r26
     53e:	bb 0a       	sbc	r11, r27
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	7b d9       	rcall	.-3338   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     546:	ec 01       	movw	r28, r24
	var2  = (((((adc_T>>4) - ((long)dig_T1)) * ((adc_T>>4)
     548:	cd 2c       	mov	r12, r13
     54a:	de 2c       	mov	r13, r14
     54c:	ef 2c       	mov	r14, r15
     54e:	ff 24       	eor	r15, r15
     550:	e7 fc       	sbrc	r14, 7
     552:	fa 94       	dec	r15
     554:	d7 01       	movw	r26, r14
     556:	c6 01       	movw	r24, r12
     558:	84 19       	sub	r24, r4
     55a:	95 09       	sbc	r25, r5
     55c:	a6 09       	sbc	r26, r6
     55e:	b7 09       	sbc	r27, r7
     560:	2c 01       	movw	r4, r24
     562:	3d 01       	movw	r6, r26
		- ((long)dig_T1))) >> 12) * ((long)dig_T3)) >> 14;
     564:	85 e0       	ldi	r24, 0x05	; 5
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	69 d9       	rcall	.-3374   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     56a:	7c 01       	movw	r14, r24

	t_fine = var1+var2;
     56c:	a3 01       	movw	r20, r6
     56e:	92 01       	movw	r18, r4
     570:	c3 01       	movw	r24, r6
     572:	b2 01       	movw	r22, r4
     574:	c6 d6       	rcall	.+3468   	; 0x1302 <__mulsi3>
     576:	05 2e       	mov	r0, r21
     578:	5c e0       	ldi	r21, 0x0C	; 12
     57a:	95 95       	asr	r25
     57c:	87 95       	ror	r24
     57e:	77 95       	ror	r23
     580:	67 95       	ror	r22
     582:	5a 95       	dec	r21
     584:	d1 f7       	brne	.-12     	; 0x57a <bmp280GetTemp+0xda>
     586:	50 2d       	mov	r21, r0
     588:	97 01       	movw	r18, r14
     58a:	ff 0c       	add	r15, r15
     58c:	44 0b       	sbc	r20, r20
     58e:	55 0b       	sbc	r21, r21
     590:	b8 d6       	rcall	.+3440   	; 0x1302 <__mulsi3>
     592:	6b 01       	movw	r12, r22
     594:	7c 01       	movw	r14, r24
     596:	0b 2e       	mov	r0, r27
     598:	be e0       	ldi	r27, 0x0E	; 14
     59a:	f5 94       	asr	r15
     59c:	e7 94       	ror	r14
     59e:	d7 94       	ror	r13
     5a0:	c7 94       	ror	r12
     5a2:	ba 95       	dec	r27
     5a4:	d1 f7       	brne	.-12     	; 0x59a <bmp280GetTemp+0xfa>
     5a6:	b0 2d       	mov	r27, r0
     5a8:	be 01       	movw	r22, r28
     5aa:	dd 0f       	add	r29, r29
     5ac:	88 0b       	sbc	r24, r24
     5ae:	99 0b       	sbc	r25, r25
     5b0:	a5 01       	movw	r20, r10
     5b2:	94 01       	movw	r18, r8
     5b4:	a6 d6       	rcall	.+3404   	; 0x1302 <__mulsi3>
     5b6:	dc 01       	movw	r26, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	07 2e       	mov	r0, r23
     5bc:	7b e0       	ldi	r23, 0x0B	; 11
     5be:	b5 95       	asr	r27
     5c0:	a7 95       	ror	r26
     5c2:	97 95       	ror	r25
     5c4:	87 95       	ror	r24
     5c6:	7a 95       	dec	r23
     5c8:	d1 f7       	brne	.-12     	; 0x5be <bmp280GetTemp+0x11e>
     5ca:	70 2d       	mov	r23, r0
     5cc:	8c 0d       	add	r24, r12
     5ce:	9d 1d       	adc	r25, r13
     5d0:	ae 1d       	adc	r26, r14
     5d2:	bf 1d       	adc	r27, r15
     5d4:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
     5d8:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <__data_end+0x1>
     5dc:	a0 93 b0 00 	sts	0x00B0, r26	; 0x8000b0 <__data_end+0x2>
     5e0:	b0 93 b1 00 	sts	0x00B1, r27	; 0x8000b1 <__data_end+0x3>
	T = (t_fine*5+128) >> 8;

	return (T);
     5e4:	6c 01       	movw	r12, r24
     5e6:	7d 01       	movw	r14, r26
     5e8:	cc 0c       	add	r12, r12
     5ea:	dd 1c       	adc	r13, r13
     5ec:	ee 1c       	adc	r14, r14
     5ee:	ff 1c       	adc	r15, r15
     5f0:	cc 0c       	add	r12, r12
     5f2:	dd 1c       	adc	r13, r13
     5f4:	ee 1c       	adc	r14, r14
     5f6:	ff 1c       	adc	r15, r15
     5f8:	8c 0d       	add	r24, r12
     5fa:	9d 1d       	adc	r25, r13
     5fc:	ae 1d       	adc	r26, r14
     5fe:	bf 1d       	adc	r27, r15
     600:	80 58       	subi	r24, 0x80	; 128
     602:	9f 4f       	sbci	r25, 0xFF	; 255
     604:	af 4f       	sbci	r26, 0xFF	; 255
     606:	bf 4f       	sbci	r27, 0xFF	; 255
     608:	89 2f       	mov	r24, r25
     60a:	9a 2f       	mov	r25, r26
     60c:	ab 2f       	mov	r26, r27
     60e:	bb 27       	eor	r27, r27
     610:	a7 fd       	sbrc	r26, 7
     612:	ba 95       	dec	r27
     614:	bc 01       	movw	r22, r24
     616:	99 0f       	add	r25, r25
     618:	88 0b       	sbc	r24, r24
     61a:	99 0b       	sbc	r25, r25
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	df 90       	pop	r13
     626:	cf 90       	pop	r12
     628:	bf 90       	pop	r11
     62a:	af 90       	pop	r10
     62c:	9f 90       	pop	r9
     62e:	8f 90       	pop	r8
     630:	7f 90       	pop	r7
     632:	6f 90       	pop	r6
     634:	5f 90       	pop	r5
     636:	4f 90       	pop	r4
     638:	08 95       	ret

0000063a <bmp280GetPressure>:

unsigned long bmp280GetPressure()
{
     63a:	2f 92       	push	r2
     63c:	3f 92       	push	r3
     63e:	4f 92       	push	r4
     640:	5f 92       	push	r5
     642:	6f 92       	push	r6
     644:	7f 92       	push	r7
     646:	8f 92       	push	r8
     648:	9f 92       	push	r9
     64a:	af 92       	push	r10
     64c:	bf 92       	push	r11
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	2c 97       	sbiw	r28, 0x0c	; 12
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
	long var1, var2, adc_P;
	unsigned long p;
	
	//take out of sleep, into forced mode
	bmpSet(0x25, CTRL_MEAS); //x1 pressure, x1 temperature, IIR off
     66e:	64 ef       	ldi	r22, 0xF4	; 244
     670:	85 e2       	ldi	r24, 0x25	; 37
     672:	06 df       	rcall	.-500    	; 0x480 <bmpSet>
     674:	83 ec       	ldi	r24, 0xC3	; 195
     676:	99 e0       	ldi	r25, 0x09	; 9
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <bmp280GetPressure+0x3e>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <bmp280GetPressure+0x44>
     67e:	00 00       	nop
	_delay_ms(10);
	
	
	//t_fine = t_fine;
	//begin multi-byte data transfer
	i2c_start();
     680:	fd d1       	rcall	.+1018   	; 0xa7c <i2c_start>
	(void) i2c_device_id(bmp280, 0);
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	87 e7       	ldi	r24, 0x77	; 119
     686:	08 d2       	rcall	.+1040   	; 0xa98 <i2c_device_id>
	//start at 0xF7-0xF9
	//point to pressure data location
	i2c_write(0xF7);
     688:	87 ef       	ldi	r24, 0xF7	; 247
     68a:	57 d2       	rcall	.+1198   	; 0xb3a <i2c_write>

	//repeated start
	i2c_start();
     68c:	f7 d1       	rcall	.+1006   	; 0xa7c <i2c_start>
	(void) i2c_device_id(bmp280, 1);
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	87 e7       	ldi	r24, 0x77	; 119
     692:	02 d2       	rcall	.+1028   	; 0xa98 <i2c_device_id>

	adc_P = i2c_read(0);
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	34 d2       	rcall	.+1128   	; 0xb00 <i2c_read>
     698:	89 83       	std	Y+1, r24	; 0x01
	adc_P <<= 8;
	adc_P |= i2c_read(0);
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	31 d2       	rcall	.+1122   	; 0xb00 <i2c_read>
     69e:	89 87       	std	Y+9, r24	; 0x09
	adc_P <<= 8;
	adc_P |= i2c_read(1);
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	2e d2       	rcall	.+1116   	; 0xb00 <i2c_read>
     6a4:	8a 87       	std	Y+10, r24	; 0x0a

	i2c_stop();
     6a6:	f1 d1       	rcall	.+994    	; 0xa8a <i2c_stop>
	adc_P >>= 4;

	//pressure conversion formula from BMP280 documentation
	//32bit-fixed point conversion -pg 46

	var1 = (((long)t_fine) >> 1) - (long)64000;
     6a8:	c0 90 ae 00 	lds	r12, 0x00AE	; 0x8000ae <__data_end>
     6ac:	d0 90 af 00 	lds	r13, 0x00AF	; 0x8000af <__data_end+0x1>
     6b0:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__data_end+0x2>
     6b4:	f0 90 b1 00 	lds	r15, 0x00B1	; 0x8000b1 <__data_end+0x3>
     6b8:	f5 94       	asr	r15
     6ba:	e7 94       	ror	r14
     6bc:	d7 94       	ror	r13
     6be:	c7 94       	ror	r12
     6c0:	9a ef       	ldi	r25, 0xFA	; 250
     6c2:	d9 1a       	sub	r13, r25
     6c4:	e1 08       	sbc	r14, r1
     6c6:	f1 08       	sbc	r15, r1
	var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((long)dig_P6);
     6c8:	c7 01       	movw	r24, r14
     6ca:	b6 01       	movw	r22, r12
     6cc:	95 95       	asr	r25
     6ce:	87 95       	ror	r24
     6d0:	77 95       	ror	r23
     6d2:	67 95       	ror	r22
     6d4:	95 95       	asr	r25
     6d6:	87 95       	ror	r24
     6d8:	77 95       	ror	r23
     6da:	67 95       	ror	r22
     6dc:	9b 01       	movw	r18, r22
     6de:	ac 01       	movw	r20, r24
     6e0:	10 d6       	rcall	.+3104   	; 0x1302 <__mulsi3>
     6e2:	6d 83       	std	Y+5, r22	; 0x05
     6e4:	7e 83       	std	Y+6, r23	; 0x06
     6e6:	8f 83       	std	Y+7, r24	; 0x07
     6e8:	98 87       	std	Y+8, r25	; 0x08
     6ea:	81 e1       	ldi	r24, 0x11	; 17
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	a6 d8       	rcall	.-3764   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     6f0:	9c 87       	std	Y+12, r25	; 0x0c
     6f2:	8b 87       	std	Y+11, r24	; 0x0b
	
	var2 = var2 + ((var1 * ((long)dig_P5)) << 1);
     6f4:	8f e0       	ldi	r24, 0x0F	; 15
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	a1 d8       	rcall	.-3774   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     6fa:	8c 01       	movw	r16, r24
	var2 = (var2 >> 2) + (((long)dig_P4) << 16);
     6fc:	8d e0       	ldi	r24, 0x0D	; 13
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	9d d8       	rcall	.-3782   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     702:	1c 01       	movw	r2, r24

	var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3)
     704:	8b e0       	ldi	r24, 0x0B	; 11
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	99 d8       	rcall	.-3790   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     70a:	3c 01       	movw	r6, r24
	+ ((((long)dig_P2) * var1) >> 1)) >> 18;
     70c:	89 e0       	ldi	r24, 0x09	; 9
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	95 d8       	rcall	.-3798   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     712:	2c 01       	movw	r4, r24
     714:	6d 81       	ldd	r22, Y+5	; 0x05
     716:	7e 81       	ldd	r23, Y+6	; 0x06
     718:	8f 81       	ldd	r24, Y+7	; 0x07
     71a:	98 85       	ldd	r25, Y+8	; 0x08
     71c:	05 2e       	mov	r0, r21
     71e:	5d e0       	ldi	r21, 0x0D	; 13
     720:	95 95       	asr	r25
     722:	87 95       	ror	r24
     724:	77 95       	ror	r23
     726:	67 95       	ror	r22
     728:	5a 95       	dec	r21
     72a:	d1 f7       	brne	.-12     	; 0x720 <bmp280GetPressure+0xe6>
     72c:	50 2d       	mov	r21, r0
     72e:	93 01       	movw	r18, r6
     730:	77 0c       	add	r7, r7
     732:	44 0b       	sbc	r20, r20
     734:	55 0b       	sbc	r21, r21
     736:	e5 d5       	rcall	.+3018   	; 0x1302 <__mulsi3>
     738:	4b 01       	movw	r8, r22
     73a:	5c 01       	movw	r10, r24
     73c:	68 94       	set
     73e:	12 f8       	bld	r1, 2
     740:	b5 94       	asr	r11
     742:	a7 94       	ror	r10
     744:	97 94       	ror	r9
     746:	87 94       	ror	r8
     748:	16 94       	lsr	r1
     74a:	d1 f7       	brne	.-12     	; 0x740 <bmp280GetPressure+0x106>
     74c:	b2 01       	movw	r22, r4
     74e:	55 0c       	add	r5, r5
     750:	88 0b       	sbc	r24, r24
     752:	99 0b       	sbc	r25, r25
     754:	a7 01       	movw	r20, r14
     756:	96 01       	movw	r18, r12
     758:	d4 d5       	rcall	.+2984   	; 0x1302 <__mulsi3>
     75a:	2b 01       	movw	r4, r22
     75c:	3c 01       	movw	r6, r24
     75e:	75 94       	asr	r7
     760:	67 94       	ror	r6
     762:	57 94       	ror	r5
     764:	47 94       	ror	r4
     766:	48 0c       	add	r4, r8
     768:	59 1c       	adc	r5, r9
     76a:	6a 1c       	adc	r6, r10
     76c:	7b 1c       	adc	r7, r11

	var1 = ((((32768 + var1)) * ((long) dig_P1)) >> 15);
     76e:	87 e0       	ldi	r24, 0x07	; 7
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	64 d8       	rcall	.-3896   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
     774:	9c 01       	movw	r18, r24
     776:	03 2e       	mov	r0, r19
     778:	32 e1       	ldi	r19, 0x12	; 18
     77a:	75 94       	asr	r7
     77c:	67 94       	ror	r6
     77e:	57 94       	ror	r5
     780:	47 94       	ror	r4
     782:	3a 95       	dec	r19
     784:	d1 f7       	brne	.-12     	; 0x77a <bmp280GetPressure+0x140>
     786:	30 2d       	mov	r19, r0
     788:	c3 01       	movw	r24, r6
     78a:	b2 01       	movw	r22, r4
     78c:	70 58       	subi	r23, 0x80	; 128
     78e:	8f 4f       	sbci	r24, 0xFF	; 255
     790:	9f 4f       	sbci	r25, 0xFF	; 255
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	b5 d5       	rcall	.+2922   	; 0x1302 <__mulsi3>
     798:	2b 01       	movw	r4, r22
     79a:	3c 01       	movw	r6, r24
     79c:	03 2e       	mov	r0, r19
     79e:	3f e0       	ldi	r19, 0x0F	; 15
     7a0:	75 94       	asr	r7
     7a2:	67 94       	ror	r6
     7a4:	57 94       	ror	r5
     7a6:	47 94       	ror	r4
     7a8:	3a 95       	dec	r19
     7aa:	d1 f7       	brne	.-12     	; 0x7a0 <bmp280GetPressure+0x166>
     7ac:	30 2d       	mov	r19, r0

	if(var1 == 0)
     7ae:	41 14       	cp	r4, r1
     7b0:	51 04       	cpc	r5, r1
     7b2:	61 04       	cpc	r6, r1
     7b4:	71 04       	cpc	r7, r1
     7b6:	09 f4       	brne	.+2      	; 0x7ba <bmp280GetPressure+0x180>
     7b8:	3c c1       	rjmp	.+632    	; 0xa32 <bmp280GetPressure+0x3f8>
	//repeated start
	i2c_start();
	(void) i2c_device_id(bmp280, 1);

	adc_P = i2c_read(0);
	adc_P <<= 8;
     7ba:	e9 85       	ldd	r30, Y+9	; 0x09
     7bc:	8e 2f       	mov	r24, r30
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
	adc_P |= i2c_read(0);
     7c4:	f9 81       	ldd	r31, Y+1	; 0x01
     7c6:	9f 2b       	or	r25, r31
	adc_P <<= 8;
     7c8:	ba 2f       	mov	r27, r26
     7ca:	a9 2f       	mov	r26, r25
     7cc:	98 2f       	mov	r25, r24
     7ce:	88 27       	eor	r24, r24
	adc_P |= i2c_read(1);
     7d0:	9c 01       	movw	r18, r24
     7d2:	ad 01       	movw	r20, r26
     7d4:	6a 85       	ldd	r22, Y+10	; 0x0a
     7d6:	26 2b       	or	r18, r22
     7d8:	29 83       	std	Y+1, r18	; 0x01
     7da:	3a 83       	std	Y+2, r19	; 0x02
     7dc:	4b 83       	std	Y+3, r20	; 0x03
     7de:	5c 83       	std	Y+4, r21	; 0x04

	//pressure conversion formula from BMP280 documentation
	//32bit-fixed point conversion -pg 46

	var1 = (((long)t_fine) >> 1) - (long)64000;
	var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((long)dig_P6);
     7e0:	6d 81       	ldd	r22, Y+5	; 0x05
     7e2:	7e 81       	ldd	r23, Y+6	; 0x06
     7e4:	8f 81       	ldd	r24, Y+7	; 0x07
     7e6:	98 85       	ldd	r25, Y+8	; 0x08
     7e8:	05 2e       	mov	r0, r21
     7ea:	5b e0       	ldi	r21, 0x0B	; 11
     7ec:	95 95       	asr	r25
     7ee:	87 95       	ror	r24
     7f0:	77 95       	ror	r23
     7f2:	67 95       	ror	r22
     7f4:	5a 95       	dec	r21
     7f6:	d1 f7       	brne	.-12     	; 0x7ec <bmp280GetPressure+0x1b2>
     7f8:	50 2d       	mov	r21, r0
     7fa:	eb 85       	ldd	r30, Y+11	; 0x0b
     7fc:	fc 85       	ldd	r31, Y+12	; 0x0c
     7fe:	9f 01       	movw	r18, r30
     800:	ff 0f       	add	r31, r31
     802:	44 0b       	sbc	r20, r20
     804:	55 0b       	sbc	r21, r21
     806:	7d d5       	rcall	.+2810   	; 0x1302 <__mulsi3>
     808:	4b 01       	movw	r8, r22
     80a:	5c 01       	movw	r10, r24
	
	var2 = var2 + ((var1 * ((long)dig_P5)) << 1);
	var2 = (var2 >> 2) + (((long)dig_P4) << 16);
     80c:	b8 01       	movw	r22, r16
     80e:	11 0f       	add	r17, r17
     810:	88 0b       	sbc	r24, r24
     812:	99 0b       	sbc	r25, r25
     814:	a7 01       	movw	r20, r14
     816:	96 01       	movw	r18, r12
     818:	74 d5       	rcall	.+2792   	; 0x1302 <__mulsi3>
     81a:	dc 01       	movw	r26, r24
     81c:	cb 01       	movw	r24, r22
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	aa 1f       	adc	r26, r26
     824:	bb 1f       	adc	r27, r27
     826:	88 0e       	add	r8, r24
     828:	99 1e       	adc	r9, r25
     82a:	aa 1e       	adc	r10, r26
     82c:	bb 1e       	adc	r11, r27
     82e:	d5 01       	movw	r26, r10
     830:	c4 01       	movw	r24, r8
     832:	b5 95       	asr	r27
     834:	a7 95       	ror	r26
     836:	97 95       	ror	r25
     838:	87 95       	ror	r24
     83a:	b5 95       	asr	r27
     83c:	a7 95       	ror	r26
     83e:	97 95       	ror	r25
     840:	87 95       	ror	r24

	if(var1 == 0)
	{
		return 0;
	}
	p = (((unsigned long) (((long)1048576) - adc_P) - (var2 >> 12))) * 3125;
     842:	41 01       	movw	r8, r2
     844:	33 0c       	add	r3, r3
     846:	aa 08       	sbc	r10, r10
     848:	bb 08       	sbc	r11, r11
     84a:	54 01       	movw	r10, r8
     84c:	99 24       	eor	r9, r9
     84e:	88 24       	eor	r8, r8
     850:	88 0e       	add	r8, r24
     852:	99 1e       	adc	r9, r25
     854:	aa 1e       	adc	r10, r26
     856:	bb 1e       	adc	r11, r27
     858:	07 2e       	mov	r0, r23
     85a:	7c e0       	ldi	r23, 0x0C	; 12
     85c:	b5 94       	asr	r11
     85e:	a7 94       	ror	r10
     860:	97 94       	ror	r9
     862:	87 94       	ror	r8
     864:	7a 95       	dec	r23
     866:	d1 f7       	brne	.-12     	; 0x85c <bmp280GetPressure+0x222>
     868:	70 2d       	mov	r23, r0
     86a:	89 81       	ldd	r24, Y+1	; 0x01
     86c:	9a 81       	ldd	r25, Y+2	; 0x02
     86e:	ab 81       	ldd	r26, Y+3	; 0x03
     870:	bc 81       	ldd	r27, Y+4	; 0x04
     872:	68 94       	set
     874:	13 f8       	bld	r1, 3
     876:	b5 95       	asr	r27
     878:	a7 95       	ror	r26
     87a:	97 95       	ror	r25
     87c:	87 95       	ror	r24
     87e:	16 94       	lsr	r1
     880:	d1 f7       	brne	.-12     	; 0x876 <bmp280GetPressure+0x23c>
     882:	88 0e       	add	r8, r24
     884:	99 1e       	adc	r9, r25
     886:	aa 1e       	adc	r10, r26
     888:	bb 1e       	adc	r11, r27
     88a:	b0 94       	com	r11
     88c:	a0 94       	com	r10
     88e:	90 94       	com	r9
     890:	80 94       	com	r8
     892:	81 1c       	adc	r8, r1
     894:	91 1c       	adc	r9, r1
     896:	a1 1c       	adc	r10, r1
     898:	b1 1c       	adc	r11, r1
     89a:	d5 01       	movw	r26, r10
     89c:	c4 01       	movw	r24, r8
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	aa 1f       	adc	r26, r26
     8a4:	bb 1f       	adc	r27, r27
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	aa 1f       	adc	r26, r26
     8ac:	bb 1f       	adc	r27, r27
     8ae:	88 0e       	add	r8, r24
     8b0:	99 1e       	adc	r9, r25
     8b2:	aa 1e       	adc	r10, r26
     8b4:	bb 1e       	adc	r11, r27
     8b6:	d5 01       	movw	r26, r10
     8b8:	c4 01       	movw	r24, r8
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	aa 1f       	adc	r26, r26
     8c0:	bb 1f       	adc	r27, r27
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	aa 1f       	adc	r26, r26
     8c8:	bb 1f       	adc	r27, r27
     8ca:	88 0e       	add	r8, r24
     8cc:	99 1e       	adc	r9, r25
     8ce:	aa 1e       	adc	r10, r26
     8d0:	bb 1e       	adc	r11, r27
     8d2:	d5 01       	movw	r26, r10
     8d4:	c4 01       	movw	r24, r8
     8d6:	88 0f       	add	r24, r24
     8d8:	99 1f       	adc	r25, r25
     8da:	aa 1f       	adc	r26, r26
     8dc:	bb 1f       	adc	r27, r27
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	aa 1f       	adc	r26, r26
     8e4:	bb 1f       	adc	r27, r27
     8e6:	88 0e       	add	r8, r24
     8e8:	99 1e       	adc	r9, r25
     8ea:	aa 1e       	adc	r10, r26
     8ec:	bb 1e       	adc	r11, r27
     8ee:	d5 01       	movw	r26, r10
     8f0:	c4 01       	movw	r24, r8
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	aa 1f       	adc	r26, r26
     8f8:	bb 1f       	adc	r27, r27
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	aa 1f       	adc	r26, r26
     900:	bb 1f       	adc	r27, r27
     902:	88 0e       	add	r8, r24
     904:	99 1e       	adc	r9, r25
     906:	aa 1e       	adc	r10, r26
     908:	bb 1e       	adc	r11, r27
     90a:	d5 01       	movw	r26, r10
     90c:	c4 01       	movw	r24, r8
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	aa 1f       	adc	r26, r26
     914:	bb 1f       	adc	r27, r27
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	aa 1f       	adc	r26, r26
     91c:	bb 1f       	adc	r27, r27
     91e:	88 0d       	add	r24, r8
     920:	99 1d       	adc	r25, r9
     922:	aa 1d       	adc	r26, r10
     924:	bb 1d       	adc	r27, r11
     926:	bc 01       	movw	r22, r24
     928:	cd 01       	movw	r24, r26
     92a:	80 5b       	subi	r24, 0xB0	; 176
     92c:	9c 43       	sbci	r25, 0x3C	; 60

	if(p < 0x80000000)
     92e:	99 23       	and	r25, r25
     930:	54 f0       	brlt	.+20     	; 0x946 <bmp280GetPressure+0x30c>
	{
		p = (p << 1) / ((unsigned long)var1);
     932:	66 0f       	add	r22, r22
     934:	77 1f       	adc	r23, r23
     936:	88 1f       	adc	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	a3 01       	movw	r20, r6
     93c:	92 01       	movw	r18, r4
     93e:	06 d5       	rcall	.+2572   	; 0x134c <__udivmodsi4>
     940:	49 01       	movw	r8, r18
     942:	5a 01       	movw	r10, r20
     944:	09 c0       	rjmp	.+18     	; 0x958 <bmp280GetPressure+0x31e>
	}
	else
	{
		p = (p / (unsigned long)var1) * 2;
     946:	a3 01       	movw	r20, r6
     948:	92 01       	movw	r18, r4
     94a:	00 d5       	rcall	.+2560   	; 0x134c <__udivmodsi4>
     94c:	49 01       	movw	r8, r18
     94e:	5a 01       	movw	r10, r20
     950:	88 0c       	add	r8, r8
     952:	99 1c       	adc	r9, r9
     954:	aa 1c       	adc	r10, r10
     956:	bb 1c       	adc	r11, r11
	}

	var1 = (((long) dig_P9) * ((long) (((p >> 3) * (p >> 3)) >> 13))) >> 12;
     958:	87 e1       	ldi	r24, 0x17	; 23
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	6f d7       	rcall	.+3806   	; 0x183c <eeprom_read_word>
     95e:	8c 01       	movw	r16, r24
     960:	75 01       	movw	r14, r10
     962:	64 01       	movw	r12, r8
     964:	68 94       	set
     966:	12 f8       	bld	r1, 2
     968:	f6 94       	lsr	r15
     96a:	e7 94       	ror	r14
     96c:	d7 94       	ror	r13
     96e:	c7 94       	ror	r12
     970:	16 94       	lsr	r1
     972:	d1 f7       	brne	.-12     	; 0x968 <bmp280GetPressure+0x32e>
	var2 = (((long)(p >> 2)) * ((long) dig_P8)) >> 13;
     974:	85 e1       	ldi	r24, 0x15	; 21
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	61 d7       	rcall	.+3778   	; 0x183c <eeprom_read_word>
     97a:	9a 83       	std	Y+2, r25	; 0x02
     97c:	89 83       	std	Y+1, r24	; 0x01

	p = (unsigned long)((long)p + ((var1 + var2 + dig_P7) >> 4));
     97e:	a7 01       	movw	r20, r14
     980:	96 01       	movw	r18, r12
     982:	c7 01       	movw	r24, r14
     984:	b6 01       	movw	r22, r12
     986:	bd d4       	rcall	.+2426   	; 0x1302 <__mulsi3>
     988:	05 2e       	mov	r0, r21
     98a:	5d e0       	ldi	r21, 0x0D	; 13
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	77 95       	ror	r23
     992:	67 95       	ror	r22
     994:	5a 95       	dec	r21
     996:	d1 f7       	brne	.-12     	; 0x98c <bmp280GetPressure+0x352>
     998:	50 2d       	mov	r21, r0
     99a:	98 01       	movw	r18, r16
     99c:	11 0f       	add	r17, r17
     99e:	44 0b       	sbc	r20, r20
     9a0:	55 0b       	sbc	r21, r21
     9a2:	af d4       	rcall	.+2398   	; 0x1302 <__mulsi3>
     9a4:	2b 01       	movw	r4, r22
     9a6:	3c 01       	movw	r6, r24
     9a8:	03 2e       	mov	r0, r19
     9aa:	3c e0       	ldi	r19, 0x0C	; 12
     9ac:	75 94       	asr	r7
     9ae:	67 94       	ror	r6
     9b0:	57 94       	ror	r5
     9b2:	47 94       	ror	r4
     9b4:	3a 95       	dec	r19
     9b6:	d1 f7       	brne	.-12     	; 0x9ac <bmp280GetPressure+0x372>
     9b8:	30 2d       	mov	r19, r0
     9ba:	c5 01       	movw	r24, r10
     9bc:	b4 01       	movw	r22, r8
     9be:	96 95       	lsr	r25
     9c0:	87 95       	ror	r24
     9c2:	77 95       	ror	r23
     9c4:	67 95       	ror	r22
     9c6:	96 95       	lsr	r25
     9c8:	87 95       	ror	r24
     9ca:	77 95       	ror	r23
     9cc:	67 95       	ror	r22
     9ce:	e9 81       	ldd	r30, Y+1	; 0x01
     9d0:	fa 81       	ldd	r31, Y+2	; 0x02
     9d2:	9f 01       	movw	r18, r30
     9d4:	ff 0f       	add	r31, r31
     9d6:	44 0b       	sbc	r20, r20
     9d8:	55 0b       	sbc	r21, r21
     9da:	93 d4       	rcall	.+2342   	; 0x1302 <__mulsi3>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	07 2e       	mov	r0, r23
     9e2:	7d e0       	ldi	r23, 0x0D	; 13
     9e4:	b5 95       	asr	r27
     9e6:	a7 95       	ror	r26
     9e8:	97 95       	ror	r25
     9ea:	87 95       	ror	r24
     9ec:	7a 95       	dec	r23
     9ee:	d1 f7       	brne	.-12     	; 0x9e4 <bmp280GetPressure+0x3aa>
     9f0:	70 2d       	mov	r23, r0
     9f2:	73 01       	movw	r14, r6
     9f4:	62 01       	movw	r12, r4
     9f6:	c8 0e       	add	r12, r24
     9f8:	d9 1e       	adc	r13, r25
     9fa:	ea 1e       	adc	r14, r26
     9fc:	fb 1e       	adc	r15, r27
     9fe:	83 e1       	ldi	r24, 0x13	; 19
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	1c d7       	rcall	.+3640   	; 0x183c <eeprom_read_word>
     a04:	09 2e       	mov	r0, r25
     a06:	00 0c       	add	r0, r0
     a08:	aa 0b       	sbc	r26, r26
     a0a:	bb 0b       	sbc	r27, r27
     a0c:	8c 0d       	add	r24, r12
     a0e:	9d 1d       	adc	r25, r13
     a10:	ae 1d       	adc	r26, r14
     a12:	bf 1d       	adc	r27, r15
     a14:	68 94       	set
     a16:	13 f8       	bld	r1, 3
     a18:	b5 95       	asr	r27
     a1a:	a7 95       	ror	r26
     a1c:	97 95       	ror	r25
     a1e:	87 95       	ror	r24
     a20:	16 94       	lsr	r1
     a22:	d1 f7       	brne	.-12     	; 0xa18 <bmp280GetPressure+0x3de>
	
	return p;
     a24:	bc 01       	movw	r22, r24
     a26:	cd 01       	movw	r24, r26
     a28:	68 0d       	add	r22, r8
     a2a:	79 1d       	adc	r23, r9
     a2c:	8a 1d       	adc	r24, r10
     a2e:	9b 1d       	adc	r25, r11
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <bmp280GetPressure+0x3fe>

	var1 = ((((32768 + var1)) * ((long) dig_P1)) >> 15);

	if(var1 == 0)
	{
		return 0;
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	cb 01       	movw	r24, r22
	var2 = (((long)(p >> 2)) * ((long) dig_P8)) >> 13;

	p = (unsigned long)((long)p + ((var1 + var2 + dig_P7) >> 4));
	
	return p;
     a38:	2c 96       	adiw	r28, 0x0c	; 12
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	3f 90       	pop	r3
     a66:	2f 90       	pop	r2
     a68:	08 95       	ret

00000a6a <init_i2c>:

#include "i2c.h"

void init_i2c()
{
	DDRB |= (1 << PB0);	// Set SDA as output
     a6a:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << PB2);	// Set SCL as output
     a6c:	ba 9a       	sbi	0x17, 2	; 23
	
	SDA_HIGH;
     a6e:	c0 9a       	sbi	0x18, 0	; 24
	SCL_HIGH;
     a70:	c2 9a       	sbi	0x18, 2	; 24
     a72:	08 95       	ret

00000a74 <i2c_clock>:
}

void i2c_clock()
{
	SCL_HIGH;
     a74:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a76:	00 00       	nop
	_delay_us(TIME);
	SCL_LOW;
     a78:	c2 98       	cbi	0x18, 2	; 24
     a7a:	08 95       	ret

00000a7c <i2c_start>:
}

void i2c_start()
{
	//Clock stays high and SDA pulled low
	SDA_HIGH;
     a7c:	c0 9a       	sbi	0x18, 0	; 24
	SCL_HIGH;
     a7e:	c2 9a       	sbi	0x18, 2	; 24
     a80:	00 00       	nop

	_delay_us(TIME);
	SDA_LOW;
     a82:	c0 98       	cbi	0x18, 0	; 24
     a84:	00 00       	nop
	_delay_us(TIME);
	SCL_LOW;
     a86:	c2 98       	cbi	0x18, 2	; 24
     a88:	08 95       	ret

00000a8a <i2c_stop>:
}

void i2c_stop()
{
	//clock goes low before data
	SCL_LOW;
     a8a:	c2 98       	cbi	0x18, 2	; 24
	SDA_LOW;
     a8c:	c0 98       	cbi	0x18, 0	; 24
     a8e:	00 00       	nop
	_delay_us(TIME);

	SCL_HIGH;
     a90:	c2 9a       	sbi	0x18, 2	; 24
     a92:	00 00       	nop
	_delay_us(TIME);
	SDA_HIGH;
     a94:	c0 9a       	sbi	0x18, 0	; 24
     a96:	08 95       	ret

00000a98 <i2c_device_id>:
}

char i2c_device_id(volatile char id, volatile char rw)
{
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <i2c_device_id+0x8>
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	89 83       	std	Y+1, r24	; 0x01
     aa6:	6a 83       	std	Y+2, r22	; 0x02
	char i, ACK;
	//id = 0x77;//0x76;//0x3C;//78;

	//check if valid i2c address
	if(id < 8 || id > 120)
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	88 30       	cpi	r24, 0x08	; 8
     aac:	00 f1       	brcs	.+64     	; 0xaee <i2c_device_id+0x56>
     aae:	89 81       	ldd	r24, Y+1	; 0x01
     ab0:	89 37       	cpi	r24, 0x79	; 121
     ab2:	f8 f4       	brcc	.+62     	; 0xaf2 <i2c_device_id+0x5a>
     ab4:	17 e0       	ldi	r17, 0x07	; 7
		return 2;

	//Starting at 7 to avoid last bit
	for(i = 7; i > 0; i--)
	{
		id <<= 1;
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	88 0f       	add	r24, r24
     aba:	89 83       	std	Y+1, r24	; 0x01
		if((id & 0x80))
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	88 23       	and	r24, r24
     ac0:	14 f4       	brge	.+4      	; 0xac6 <i2c_device_id+0x2e>
			SDA_HIGH;
     ac2:	c0 9a       	sbi	0x18, 0	; 24
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <i2c_device_id+0x30>
		else
			SDA_LOW;
     ac6:	c0 98       	cbi	0x18, 0	; 24
		//SDA = id & 0x80;	//Sends a 1 or 0 to SDA

		//Pulses the clock
		i2c_clock();
     ac8:	d5 df       	rcall	.-86     	; 0xa74 <i2c_clock>
     aca:	11 50       	subi	r17, 0x01	; 1
	//check if valid i2c address
	if(id < 8 || id > 120)
		return 2;

	//Starting at 7 to avoid last bit
	for(i = 7; i > 0; i--)
     acc:	a1 f7       	brne	.-24     	; 0xab6 <i2c_device_id+0x1e>
		i2c_clock();
	}
	//8th bit. pulses the read/write bit
	//rw low for write and high for read

	if(rw == 1)
     ace:	8a 81       	ldd	r24, Y+2	; 0x02
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	11 f4       	brne	.+4      	; 0xad8 <i2c_device_id+0x40>
		SDA_HIGH;
     ad4:	c0 9a       	sbi	0x18, 0	; 24
     ad6:	01 c0       	rjmp	.+2      	; 0xada <i2c_device_id+0x42>
	else
		SDA_LOW;
     ad8:	c0 98       	cbi	0x18, 0	; 24
	i2c_clock();
     ada:	cc df       	rcall	.-104    	; 0xa74 <i2c_clock>
	//SDA = rw;
	
	//9th bit
	//set SDA to input
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
     adc:	b8 98       	cbi	0x17, 0	; 23
	SDA_HIGH;//PORTB |= (1 << PB0);	//enable pull up; turn on pin
     ade:	c0 9a       	sbi	0x18, 0	; 24
	ACK = (PINB & (1 << PB0));	//read pin
     ae0:	86 b3       	in	r24, 0x16	; 22
     ae2:	18 2f       	mov	r17, r24
     ae4:	11 70       	andi	r17, 0x01	; 1

	i2c_clock();
     ae6:	c6 df       	rcall	.-116    	; 0xa74 <i2c_clock>
	
	DDRB |= (1 << PB0);	//set pin0 to output
     ae8:	b8 9a       	sbi	0x17, 0	; 23

	return ACK;
     aea:	81 2f       	mov	r24, r17
     aec:	03 c0       	rjmp	.+6      	; 0xaf4 <i2c_device_id+0x5c>
	char i, ACK;
	//id = 0x77;//0x76;//0x3C;//78;

	//check if valid i2c address
	if(id < 8 || id > 120)
		return 2;
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <i2c_device_id+0x5c>
     af2:	82 e0       	ldi	r24, 0x02	; 2
	i2c_clock();
	
	DDRB |= (1 << PB0);	//set pin0 to output

	return ACK;
}
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	08 95       	ret

00000b00 <i2c_read>:

unsigned char i2c_read(char last_byte)
{
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	18 2f       	mov	r17, r24
	char i = 0, byte = 0;
	SDA_HIGH;
     b08:	c0 9a       	sbi	0x18, 0	; 24
	
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
     b0a:	b8 98       	cbi	0x17, 0	; 23
	SDA_HIGH;				//enable pull up; turn on pin
     b0c:	c0 9a       	sbi	0x18, 0	; 24
     b0e:	d8 e0       	ldi	r29, 0x08	; 8
	return ACK;
}

unsigned char i2c_read(char last_byte)
{
	char i = 0, byte = 0;
     b10:	c0 e0       	ldi	r28, 0x00	; 0
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;				//enable pull up; turn on pin
	
	for(i = 8; i > 0; i--)
	{	
		SCL_HIGH;
     b12:	c2 9a       	sbi	0x18, 2	; 24
		byte <<= 1;

		//read pin
		
		//OR byte bit with SDA
		byte |= (PINB & (1<<PB0));
     b14:	86 b3       	in	r24, 0x16	; 22
     b16:	81 70       	andi	r24, 0x01	; 1
     b18:	cc 0f       	add	r28, r28
     b1a:	c8 2b       	or	r28, r24

		i2c_clock();
     b1c:	ab df       	rcall	.-170    	; 0xa74 <i2c_clock>
     b1e:	d1 50       	subi	r29, 0x01	; 1
	SDA_HIGH;
	
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;				//enable pull up; turn on pin
	
	for(i = 8; i > 0; i--)
     b20:	c1 f7       	brne	.-16     	; 0xb12 <i2c_read+0x12>
		//OR byte bit with SDA
		byte |= (PINB & (1<<PB0));

		i2c_clock();
	}
	DDRB |= (1 << PB0);	//set pin0 to output
     b22:	b8 9a       	sbi	0x17, 0	; 23
	
	//9th bit master acknowledges data transfer or indicates last byte
	if(last_byte == 1)
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	11 f4       	brne	.+4      	; 0xb2c <i2c_read+0x2c>
		SDA_HIGH;
     b28:	c0 9a       	sbi	0x18, 0	; 24
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <i2c_read+0x2e>
	else
		SDA_LOW;
     b2c:	c0 98       	cbi	0x18, 0	; 24
	//SDA = last_byte;
	
	i2c_clock();
     b2e:	a2 df       	rcall	.-188    	; 0xa74 <i2c_clock>
	
	return byte;
}
     b30:	8c 2f       	mov	r24, r28
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	08 95       	ret

00000b3a <i2c_write>:

void i2c_write(unsigned char byte)
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	d8 2f       	mov	r29, r24
     b40:	c8 e0       	ldi	r28, 0x08	; 8
	char i;
	for(i = 8; i > 0; i--)
	{
		//bit shifts data by i and ANDs it to convert it to boolean
		if((byte & 0x80))
     b42:	dd 23       	and	r29, r29
     b44:	14 f4       	brge	.+4      	; 0xb4a <i2c_write+0x10>
			SDA_HIGH;
     b46:	c0 9a       	sbi	0x18, 0	; 24
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <i2c_write+0x12>
		else
			SDA_LOW;
     b4a:	c0 98       	cbi	0x18, 0	; 24
		//SDA = byte & 0x80;	//Sends a 1 or 0 to SDA
		
		//pulse the clock
		i2c_clock();
     b4c:	93 df       	rcall	.-218    	; 0xa74 <i2c_clock>
		
		byte <<= 1;
     b4e:	dd 0f       	add	r29, r29
     b50:	c1 50       	subi	r28, 0x01	; 1
}

void i2c_write(unsigned char byte)
{
	char i;
	for(i = 8; i > 0; i--)
     b52:	b9 f7       	brne	.-18     	; 0xb42 <i2c_write+0x8>
		
		byte <<= 1;
	}
	
	//set to high to detect ack bit
	SDA_HIGH;
     b54:	c0 9a       	sbi	0x18, 0	; 24
	
	i2c_clock();
     b56:	8e df       	rcall	.-228    	; 0xa74 <i2c_clock>

}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <print_float>:
	
	
}

void print_float(float value)
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	00 d0       	rcall	.+0      	; 0xb68 <print_float+0xa>
     b68:	00 d0       	rcall	.+0      	; 0xb6a <print_float+0xc>
     b6a:	1f 92       	push	r1
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	char arr[5];
	
	
	dtostrf(value, 4, 2, arr);
     b70:	8e 01       	movw	r16, r28
     b72:	0f 5f       	subi	r16, 0xFF	; 255
     b74:	1f 4f       	sbci	r17, 0xFF	; 255
     b76:	22 e0       	ldi	r18, 0x02	; 2
     b78:	44 e0       	ldi	r20, 0x04	; 4
     b7a:	0a d4       	rcall	.+2068   	; 0x1390 <dtostrf>
	//arr[5] = '/0';	//only 2 decimal points
	
	oled_write_string(arr);
     b7c:	c8 01       	movw	r24, r16
     b7e:	94 d1       	rcall	.+808    	; 0xea8 <oled_write_string>
}
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	08 95       	ret

00000b94 <display>:

void display()
{
     b94:	4f 92       	push	r4
     b96:	5f 92       	push	r5
     b98:	6f 92       	push	r6
     b9a:	7f 92       	push	r7
     b9c:	8f 92       	push	r8
     b9e:	9f 92       	push	r9
     ba0:	af 92       	push	r10
     ba2:	bf 92       	push	r11
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
	//short bmpTemp;
	//char INTbmpTemp;
	unsigned long bmpPressure;
	
	bmp280GetTemp();
     bac:	79 dc       	rcall	.-1806   	; 0x4a0 <bmp280GetTemp>
	
	//bmpTemp = bmp280GetTemp();
	//INTbmpTemp = bmpTemp / 100;
	bmpPressure = bmp280GetPressure();
     bae:	45 dd       	rcall	.-1398   	; 0x63a <bmp280GetPressure>
     bb0:	4b 01       	movw	r8, r22
     bb2:	5c 01       	movw	r10, r24
	
	//oled_clear_ln(1);
	oled_setpos(0,1);
     bb4:	61 e0       	ldi	r22, 0x01	; 1
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	06 d1       	rcall	.+524    	; 0xdc6 <oled_setpos>
	
	oled_write_string("Temperature: ");
     bba:	8f e7       	ldi	r24, 0x7F	; 127
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	74 d1       	rcall	.+744    	; 0xea8 <oled_write_string>
	if((char)sht_temp() < 0)
     bc0:	c3 d1       	rcall	.+902    	; 0xf48 <sht_temp>
		oled_write_char('-');
		print_float(!sht_temp());	//convert value to "negative"
	}
	else
	{
		print_float(sht_temp());
     bc2:	c2 d1       	rcall	.+900    	; 0xf48 <sht_temp>
     bc4:	cc df       	rcall	.-104    	; 0xb5e <print_float>
		//oled_write_int((char)sht_temp());
	}
	oled_write_string("*C");
     bc6:	8d e8       	ldi	r24, 0x8D	; 141
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	6e d1       	rcall	.+732    	; 0xea8 <oled_write_string>
	
	//oled_clear_ln(3);
	oled_setpos(0,3);
     bcc:	63 e0       	ldi	r22, 0x03	; 3
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	fa d0       	rcall	.+500    	; 0xdc6 <oled_setpos>
	
	oled_write_string("Humidity: ");
     bd2:	80 e9       	ldi	r24, 0x90	; 144
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	68 d1       	rcall	.+720    	; 0xea8 <oled_write_string>
	print_float(sht_humidity());
     bd8:	84 d1       	rcall	.+776    	; 0xee2 <sht_humidity>
     bda:	c1 df       	rcall	.-126    	; 0xb5e <print_float>
	//oled_write_int((char)sht_humidity());
	oled_write_string("%RH");
     bdc:	8b e9       	ldi	r24, 0x9B	; 155
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	63 d1       	rcall	.+710    	; 0xea8 <oled_write_string>
	oled_write_char('.');
	oled_write_int((bmpTemp % 100));
	*/
	
	//oled_clear_ln(5);		
	oled_setpos(0,5);
     be2:	65 e0       	ldi	r22, 0x05	; 5
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	ef d0       	rcall	.+478    	; 0xdc6 <oled_setpos>
	oled_write_string("Pressure: ");
     be8:	8f e9       	ldi	r24, 0x9F	; 159
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	5d d1       	rcall	.+698    	; 0xea8 <oled_write_string>
	oled_write_int(bmpPressure / 1000);
     bee:	c5 01       	movw	r24, r10
     bf0:	b4 01       	movw	r22, r8
     bf2:	28 ee       	ldi	r18, 0xE8	; 232
     bf4:	33 e0       	ldi	r19, 0x03	; 3
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	a8 d3       	rcall	.+1872   	; 0x134c <__udivmodsi4>
     bfc:	2b 01       	movw	r4, r22
     bfe:	3c 01       	movw	r6, r24
     c00:	82 2f       	mov	r24, r18
     c02:	60 d1       	rcall	.+704    	; 0xec4 <oled_write_int>
	oled_write_int((bmpPressure % 1000) / 100);
     c04:	0f 2e       	mov	r0, r31
     c06:	f4 e6       	ldi	r31, 0x64	; 100
     c08:	cf 2e       	mov	r12, r31
     c0a:	d1 2c       	mov	r13, r1
     c0c:	e1 2c       	mov	r14, r1
     c0e:	f1 2c       	mov	r15, r1
     c10:	f0 2d       	mov	r31, r0
     c12:	c3 01       	movw	r24, r6
     c14:	b2 01       	movw	r22, r4
     c16:	a7 01       	movw	r20, r14
     c18:	96 01       	movw	r18, r12
     c1a:	98 d3       	rcall	.+1840   	; 0x134c <__udivmodsi4>
     c1c:	82 2f       	mov	r24, r18
     c1e:	52 d1       	rcall	.+676    	; 0xec4 <oled_write_int>
	oled_write_char('.');
     c20:	8e e2       	ldi	r24, 0x2E	; 46
     c22:	09 d1       	rcall	.+530    	; 0xe36 <oled_write_char>
	if((bmpPressure % 100) < 10)
     c24:	c5 01       	movw	r24, r10
     c26:	b4 01       	movw	r22, r8
     c28:	a7 01       	movw	r20, r14
     c2a:	96 01       	movw	r18, r12
     c2c:	8f d3       	rcall	.+1822   	; 0x134c <__udivmodsi4>
     c2e:	6b 01       	movw	r12, r22
     c30:	7c 01       	movw	r14, r24
     c32:	8a e0       	ldi	r24, 0x0A	; 10
     c34:	c8 16       	cp	r12, r24
     c36:	d1 04       	cpc	r13, r1
     c38:	e1 04       	cpc	r14, r1
     c3a:	f1 04       	cpc	r15, r1
     c3c:	10 f4       	brcc	.+4      	; 0xc42 <display+0xae>
		oled_write_char('0');
     c3e:	80 e3       	ldi	r24, 0x30	; 48
     c40:	fa d0       	rcall	.+500    	; 0xe36 <oled_write_char>
	oled_write_int(bmpPressure % 100);	//add <10 check thing
     c42:	8c 2d       	mov	r24, r12
     c44:	3f d1       	rcall	.+638    	; 0xec4 <oled_write_int>
	oled_write_string("HPa");
     c46:	8a ea       	ldi	r24, 0xAA	; 170
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	2e d1       	rcall	.+604    	; 0xea8 <oled_write_string>
	
	//oled_setpos(OLEDX - 4, 7);
	//oled_write_string(VERSION);
}
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	7f 90       	pop	r7
     c5e:	6f 90       	pop	r6
     c60:	5f 90       	pop	r5
     c62:	4f 90       	pop	r4
     c64:	08 95       	ret

00000c66 <battery>:

// 0 = empty
// 4 = full
void battery()
{
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
	unsigned char convert;
	
	//get ADC
	ADCSRA |= (1 << ADSC);
     c6e:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));	//wait till done
     c70:	36 99       	sbic	0x06, 6	; 6
     c72:	fe cf       	rjmp	.-4      	; 0xc70 <battery+0xa>
	
	oled_setpos(OLEDX - 6,0);
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	89 e7       	ldi	r24, 0x79	; 121
     c78:	a6 d0       	rcall	.+332    	; 0xdc6 <oled_setpos>

	//2V-3.3V
	if(ADCH < 255 && ADCH > 213)	//full
     c7a:	85 b1       	in	r24, 0x05	; 5
     c7c:	8f 3f       	cpi	r24, 0xFF	; 255
     c7e:	09 f0       	breq	.+2      	; 0xc82 <battery+0x1c>
     c80:	85 b1       	in	r24, 0x05	; 5
		convert = 4;
		
	if(ADCH < 213 && ADCH > 192)	//75%
     c82:	85 b1       	in	r24, 0x05	; 5
     c84:	85 3d       	cpi	r24, 0xD5	; 213
     c86:	28 f4       	brcc	.+10     	; 0xc92 <battery+0x2c>
     c88:	85 b1       	in	r24, 0x05	; 5
     c8a:	81 3c       	cpi	r24, 0xC1	; 193
     c8c:	20 f0       	brcs	.+8      	; 0xc96 <battery+0x30>
		convert = 3;
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <battery+0x32>
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <battery+0x32>
     c96:	84 e0       	ldi	r24, 0x04	; 4
		
	if(ADCH < 192 && ADCH > 171)	//50%
     c98:	95 b1       	in	r25, 0x05	; 5
     c9a:	90 3c       	cpi	r25, 0xC0	; 192
     c9c:	20 f4       	brcc	.+8      	; 0xca6 <battery+0x40>
     c9e:	95 b1       	in	r25, 0x05	; 5
     ca0:	9c 3a       	cpi	r25, 0xAC	; 172
     ca2:	08 f0       	brcs	.+2      	; 0xca6 <battery+0x40>
		convert = 2;
     ca4:	82 e0       	ldi	r24, 0x02	; 2
	
	if(ADCH < 171 && ADCH > 150)	//25%
     ca6:	95 b1       	in	r25, 0x05	; 5
     ca8:	9b 3a       	cpi	r25, 0xAB	; 171
     caa:	20 f4       	brcc	.+8      	; 0xcb4 <battery+0x4e>
     cac:	95 b1       	in	r25, 0x05	; 5
     cae:	97 39       	cpi	r25, 0x97	; 151
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <battery+0x4e>
		convert = 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
	
	if(ADCH < 150)	//ded @2V
     cb4:	95 b1       	in	r25, 0x05	; 5
     cb6:	96 39       	cpi	r25, 0x96	; 150
     cb8:	08 f4       	brcc	.+2      	; 0xcbc <battery+0x56>
		convert = 0;
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	08 2f       	mov	r16, r24
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	08 0f       	add	r16, r24
     cc2:	11 1d       	adc	r17, r1
     cc4:	08 0f       	add	r16, r24
     cc6:	11 1d       	adc	r17, r1
     cc8:	00 0f       	add	r16, r16
     cca:	11 1f       	adc	r17, r17
     ccc:	e8 01       	movw	r28, r16
     cce:	cc 5c       	subi	r28, 0xCC	; 204
     cd0:	de 4f       	sbci	r29, 0xFE	; 254
     cd2:	06 5c       	subi	r16, 0xC6	; 198
     cd4:	1e 4f       	sbci	r17, 0xFE	; 254

	for(char i = 0; i < 6; i++)
	{
		oled_data(pgm_read_byte(&oled_customChar[convert * 6 + i]));
     cd6:	fe 01       	movw	r30, r28
     cd8:	84 91       	lpm	r24, Z
     cda:	8a d0       	rcall	.+276    	; 0xdf0 <oled_data>
     cdc:	21 96       	adiw	r28, 0x01	; 1
		convert = 1;
	
	if(ADCH < 150)	//ded @2V
		convert = 0;

	for(char i = 0; i < 6; i++)
     cde:	c0 17       	cp	r28, r16
     ce0:	d1 07       	cpc	r29, r17
     ce2:	c9 f7       	brne	.-14     	; 0xcd6 <battery+0x70>
	{
		oled_data(pgm_read_byte(&oled_customChar[convert * 6 + i]));
	}
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	08 95       	ret

00000cee <adc_init>:

void adc_init()
{
	//VCC ref, PB4 input, ADLAR = 1
	ADMUX = (1 << MUX1);
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << ADLAR);
     cf2:	3d 9a       	sbi	0x07, 5	; 7
			
	ADCSRA = (1 << ADEN);
     cf4:	80 e8       	ldi	r24, 0x80	; 128
     cf6:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADPS2);
     cf8:	32 9a       	sbi	0x06, 2	; 6
	ADCSRA |= (1 << ADPS1);
     cfa:	31 9a       	sbi	0x06, 1	; 6
     cfc:	08 95       	ret

00000cfe <__vector_12>:
	
}

ISR(WDT_vect)
{
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	8f 93       	push	r24
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	a8 95       	wdr
     d10:	81 b5       	in	r24, 0x21	; 33
     d12:	88 61       	ori	r24, 0x18	; 24
     d14:	81 bd       	out	0x21, r24	; 33
     d16:	11 bc       	out	0x21, r1	; 33
     d18:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
}
     d1a:	8f 91       	pop	r24
     d1c:	0f 90       	pop	r0
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	0f 90       	pop	r0
     d22:	1f 90       	pop	r1
     d24:	18 95       	reti

00000d26 <sleep>:

void sleep()
{
	ADCSRA = (0 << ADEN);	//turn off?
     d26:	16 b8       	out	0x06, r1	; 6
	
	
	MCUSR &= ~(1<<WDRF);
     d28:	84 b7       	in	r24, 0x34	; 52
     d2a:	87 7f       	andi	r24, 0xF7	; 247
     d2c:	84 bf       	out	0x34, r24	; 52
	
	WDTCR |= 0x18;	//enable watchdog
     d2e:	81 b5       	in	r24, 0x21	; 33
     d30:	88 61       	ori	r24, 0x18	; 24
     d32:	81 bd       	out	0x21, r24	; 33

	WDTCR = 0x46;	//turn on interrupt
     d34:	86 e4       	ldi	r24, 0x46	; 70
     d36:	81 bd       	out	0x21, r24	; 33
	
	sei();	//enble interrupt
     d38:	78 94       	sei
	
	wdt_reset();
     d3a:	a8 95       	wdr
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     d3c:	85 b7       	in	r24, 0x35	; 53
     d3e:	87 7e       	andi	r24, 0xE7	; 231
     d40:	80 61       	ori	r24, 0x10	; 16
     d42:	85 bf       	out	0x35, r24	; 53
	sleep_mode();
     d44:	85 b7       	in	r24, 0x35	; 53
     d46:	80 62       	ori	r24, 0x20	; 32
     d48:	85 bf       	out	0x35, r24	; 53
     d4a:	88 95       	sleep
     d4c:	85 b7       	in	r24, 0x35	; 53
     d4e:	8f 7d       	andi	r24, 0xDF	; 223
     d50:	85 bf       	out	0x35, r24	; 53
	
	ADCSRA = (1 << ADEN);	//turn on ADC
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	86 b9       	out	0x06, r24	; 6
     d56:	08 95       	ret

00000d58 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d58:	87 ea       	ldi	r24, 0xA7	; 167
     d5a:	91 e6       	ldi	r25, 0x61	; 97
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <main+0x4>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <main+0xa>
     d62:	00 00       	nop

int main(void)
{
	_delay_ms(100);	//delay to let voltage stablise
	
	DDRB |= (1 << PB4); //set led to output
     d64:	bc 9a       	sbi	0x17, 4	; 23
	PORTB = (0xFF - (1 << PB4));	//turn on all pullups except input
     d66:	8f ee       	ldi	r24, 0xEF	; 239
     d68:	88 bb       	out	0x18, r24	; 24
	
	adc_init();
     d6a:	c1 df       	rcall	.-126    	; 0xcee <adc_init>
	init_i2c();
     d6c:	7e de       	rcall	.-772    	; 0xa6a <init_i2c>
     d6e:	c8 e1       	ldi	r28, 0x18	; 24
     d70:	d1 e0       	ldi	r29, 0x01	; 1
     d72:	04 e3       	ldi	r16, 0x34	; 52
     d74:	11 e0       	ldi	r17, 0x01	; 1
	
	//start up OLED
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
		oled_control(pgm_read_byte(&ssd1306_init_sequence[i]));
     d76:	fe 01       	movw	r30, r28
     d78:	84 91       	lpm	r24, Z
     d7a:	18 d0       	rcall	.+48     	; 0xdac <oled_control>
     d7c:	21 96       	adiw	r28, 0x01	; 1
	
	adc_init();
	init_i2c();
	
	//start up OLED
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
     d7e:	c0 17       	cp	r28, r16
     d80:	d1 07       	cpc	r29, r17
     d82:	c9 f7       	brne	.-14     	; 0xd76 <main+0x1e>
		oled_control(pgm_read_byte(&ssd1306_init_sequence[i]));
	}
	
	if(eeprom_read_byte((uint8_t*)0x00) == 0xFF)	//if new ATTINY
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	51 d5       	rcall	.+2722   	; 0x182c <eeprom_read_byte>
     d8a:	8f 3f       	cpi	r24, 0xFF	; 255
     d8c:	29 f4       	brne	.+10     	; 0xd98 <main+0x40>
	{
		bmpCalibration();	//run calibration to save data in EEPROM
     d8e:	11 db       	rcall	.-2526   	; 0x3b2 <bmpCalibration>
		eeprom_write_byte(0, 0);
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	57 d5       	rcall	.+2734   	; 0x1846 <eeprom_write_byte>
	}

	bmpReset();
     d98:	65 db       	rcall	.-2358   	; 0x464 <bmpReset>
	//setting up sampling parameters
	//bmpSet(0x28, CONFIG); //standby time = 1000ms


	//change contrast to 0 (lowest)
	oled_control(0x81);
     d9a:	81 e8       	ldi	r24, 0x81	; 129
     d9c:	07 d0       	rcall	.+14     	; 0xdac <oled_control>
	oled_control(0xFF);
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	05 d0       	rcall	.+10     	; 0xdac <oled_control>
	
	//oled_control(0xAE);	//turn off display
	
	//clear oled of random data
	oled_clear();
     da2:	33 d0       	rcall	.+102    	; 0xe0a <oled_clear>
	//sht_register(0);
	
    while(1)
    {
		//check battery level
		battery();
     da4:	60 df       	rcall	.-320    	; 0xc66 <battery>

		//display data
		display();
     da6:	f6 de       	rcall	.-532    	; 0xb94 <display>
		
		//sleep for 1 sec
		sleep();
     da8:	be df       	rcall	.-132    	; 0xd26 <sleep>
     daa:	fc cf       	rjmp	.-8      	; 0xda4 <main+0x4c>

00000dac <oled_control>:
	{
		for(x = 0; x <= OLEDX; x++)
			oled_data(0xFF);	//white
	}
	oled_setpos(0, 0);
}
     dac:	cf 93       	push	r28
     dae:	c8 2f       	mov	r28, r24
     db0:	65 de       	rcall	.-822    	; 0xa7c <i2c_start>
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	8c e3       	ldi	r24, 0x3C	; 60
     db6:	70 de       	rcall	.-800    	; 0xa98 <i2c_device_id>
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	bf de       	rcall	.-642    	; 0xb3a <i2c_write>
     dbc:	8c 2f       	mov	r24, r28
     dbe:	bd de       	rcall	.-646    	; 0xb3a <i2c_write>
     dc0:	64 de       	rcall	.-824    	; 0xa8a <i2c_stop>
     dc2:	cf 91       	pop	r28
     dc4:	08 95       	ret

00000dc6 <oled_setpos>:
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	d8 2f       	mov	r29, r24
     dcc:	c6 2f       	mov	r28, r22
     dce:	81 e2       	ldi	r24, 0x21	; 33
     dd0:	ed df       	rcall	.-38     	; 0xdac <oled_control>
     dd2:	8d 2f       	mov	r24, r29
     dd4:	8f 77       	andi	r24, 0x7F	; 127
     dd6:	ea df       	rcall	.-44     	; 0xdac <oled_control>
     dd8:	8f e7       	ldi	r24, 0x7F	; 127
     dda:	e8 df       	rcall	.-48     	; 0xdac <oled_control>
     ddc:	82 e2       	ldi	r24, 0x22	; 34
     dde:	e6 df       	rcall	.-52     	; 0xdac <oled_control>
     de0:	8c 2f       	mov	r24, r28
     de2:	87 70       	andi	r24, 0x07	; 7
     de4:	e3 df       	rcall	.-58     	; 0xdac <oled_control>
     de6:	87 e0       	ldi	r24, 0x07	; 7
     de8:	e1 df       	rcall	.-62     	; 0xdac <oled_control>
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <oled_data>:
     df0:	cf 93       	push	r28
     df2:	c8 2f       	mov	r28, r24
     df4:	43 de       	rcall	.-890    	; 0xa7c <i2c_start>
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	8c e3       	ldi	r24, 0x3C	; 60
     dfa:	4e de       	rcall	.-868    	; 0xa98 <i2c_device_id>
     dfc:	80 e4       	ldi	r24, 0x40	; 64
     dfe:	9d de       	rcall	.-710    	; 0xb3a <i2c_write>
     e00:	8c 2f       	mov	r24, r28
     e02:	9b de       	rcall	.-714    	; 0xb3a <i2c_write>
     e04:	42 de       	rcall	.-892    	; 0xa8a <i2c_stop>
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <oled_clear>:

/*clears the display with blank
*/
void oled_clear()
{
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
	unsigned char page, x;
	
	oled_setpos(0, 0);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	d9 df       	rcall	.-78     	; 0xdc6 <oled_setpos>
     e14:	d8 e0       	ldi	r29, 0x08	; 8
     e16:	07 c0       	rjmp	.+14     	; 0xe26 <oled_clear+0x1c>
	
	for(page = 0; page <= OLEDY; page++)
	{
		for(x = 0; x <= OLEDX; x++)
			oled_data(0x00);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	ea df       	rcall	.-44     	; 0xdf0 <oled_data>
	
	oled_setpos(0, 0);
	
	for(page = 0; page <= OLEDY; page++)
	{
		for(x = 0; x <= OLEDX; x++)
     e1c:	cf 5f       	subi	r28, 0xFF	; 255
     e1e:	c0 38       	cpi	r28, 0x80	; 128
     e20:	d9 f7       	brne	.-10     	; 0xe18 <oled_clear+0xe>
     e22:	d1 50       	subi	r29, 0x01	; 1
{
	unsigned char page, x;
	
	oled_setpos(0, 0);
	
	for(page = 0; page <= OLEDY; page++)
     e24:	11 f0       	breq	.+4      	; 0xe2a <oled_clear+0x20>
}

/*clears the display with blank
*/
void oled_clear()
{
     e26:	c0 e0       	ldi	r28, 0x00	; 0
     e28:	f7 cf       	rjmp	.-18     	; 0xe18 <oled_clear+0xe>
	for(page = 0; page <= OLEDY; page++)
	{
		for(x = 0; x <= OLEDX; x++)
			oled_data(0x00);
	}
	oled_setpos(0, 0);
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	cb df       	rcall	.-106    	; 0xdc6 <oled_setpos>
}
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <oled_write_char>:
	i2c_write(data);
	i2c_stop();
}

void oled_write_char(char ch)
{
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	c8 2f       	mov	r28, r24
	//oled_checkposx();
	
	if(ch == '\n')	//go to newline
     e40:	8a 30       	cpi	r24, 0x0A	; 10
     e42:	89 f4       	brne	.+34     	; 0xe66 <oled_write_char+0x30>
	{
		if(pos_y < 8)
     e44:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <pos_y>
     e48:	68 30       	cpi	r22, 0x08	; 8
     e4a:	30 f4       	brcc	.+12     	; 0xe58 <oled_write_char+0x22>
			oled_setpos(0, ++pos_y);
     e4c:	6f 5f       	subi	r22, 0xFF	; 255
     e4e:	60 93 b6 00 	sts	0x00B6, r22	; 0x8000b6 <pos_y>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	b8 df       	rcall	.-144    	; 0xdc6 <oled_setpos>
     e56:	23 c0       	rjmp	.+70     	; 0xe9e <oled_write_char+0x68>
		else
		{
			pos_y = 0;
			oled_setpos(0, ++pos_y);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <pos_y>
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	b1 df       	rcall	.-158    	; 0xdc6 <oled_setpos>
     e64:	1c c0       	rjmp	.+56     	; 0xe9e <oled_write_char+0x68>
		return;
	}
	
	//convert ASCII to map address
	ch -= 32;
	i2c_start();
     e66:	0a de       	rcall	.-1004   	; 0xa7c <i2c_start>
	i2c_device_id(OLED, WRITE);
     e68:	60 e0       	ldi	r22, 0x00	; 0
     e6a:	8c e3       	ldi	r24, 0x3C	; 60
     e6c:	15 de       	rcall	.-982    	; 0xa98 <i2c_device_id>
	i2c_write(OLED_DATA);
     e6e:	80 e4       	ldi	r24, 0x40	; 64
     e70:	64 de       	rcall	.-824    	; 0xb3a <i2c_write>
     e72:	c0 52       	subi	r28, 0x20	; 32
     e74:	0c 2f       	mov	r16, r28
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	0c 0f       	add	r16, r28
     e7a:	11 1d       	adc	r17, r1
     e7c:	0c 0f       	add	r16, r28
     e7e:	11 1d       	adc	r17, r1
     e80:	00 0f       	add	r16, r16
     e82:	11 1f       	adc	r17, r17
     e84:	e8 01       	movw	r28, r16
     e86:	ce 5a       	subi	r28, 0xAE	; 174
     e88:	de 4f       	sbci	r29, 0xFE	; 254
     e8a:	08 5a       	subi	r16, 0xA8	; 168
     e8c:	1e 4f       	sbci	r17, 0xFE	; 254

	for (char i= 0; i < 6; i++)
	{
		i2c_write(pgm_read_byte(&oled_font6x8[ch * 6 + i]));	//*6 to select char, i increments through 
     e8e:	fe 01       	movw	r30, r28
     e90:	84 91       	lpm	r24, Z
     e92:	53 de       	rcall	.-858    	; 0xb3a <i2c_write>
     e94:	21 96       	adiw	r28, 0x01	; 1
	ch -= 32;
	i2c_start();
	i2c_device_id(OLED, WRITE);
	i2c_write(OLED_DATA);

	for (char i= 0; i < 6; i++)
     e96:	c0 17       	cp	r28, r16
     e98:	d1 07       	cpc	r29, r17
     e9a:	c9 f7       	brne	.-14     	; 0xe8e <oled_write_char+0x58>
	{
		i2c_write(pgm_read_byte(&oled_font6x8[ch * 6 + i]));	//*6 to select char, i increments through 
	}
	i2c_stop();
     e9c:	f6 dd       	rcall	.-1044   	; 0xa8a <i2c_stop>
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <oled_write_string>:

void oled_write_string(char *str)
{
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	ec 01       	movw	r28, r24
	while(*str)
     eae:	88 81       	ld	r24, Y
     eb0:	88 23       	and	r24, r24
     eb2:	29 f0       	breq	.+10     	; 0xebe <oled_write_string+0x16>
     eb4:	21 96       	adiw	r28, 0x01	; 1
	{
		oled_write_char(*str++);
     eb6:	bf df       	rcall	.-130    	; 0xe36 <oled_write_char>
	i2c_stop();
}

void oled_write_string(char *str)
{
	while(*str)
     eb8:	89 91       	ld	r24, Y+
     eba:	81 11       	cpse	r24, r1
     ebc:	fc cf       	rjmp	.-8      	; 0xeb6 <oled_write_string+0xe>
	{
		oled_write_char(*str++);
	}
	//oled_write_char(pos_x);
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <oled_write_int>:

void oled_write_int(unsigned char value)
{
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29

	char *arr;
	
	arr = convert(value);
     ec8:	85 d0       	rcall	.+266    	; 0xfd4 <convert>
     eca:	ec 01       	movw	r28, r24
	
	while(*arr != '\0')
     ecc:	88 81       	ld	r24, Y
     ece:	88 23       	and	r24, r24
     ed0:	29 f0       	breq	.+10     	; 0xedc <oled_write_int+0x18>
     ed2:	21 96       	adiw	r28, 0x01	; 1
		oled_write_char(*arr++);
     ed4:	b0 df       	rcall	.-160    	; 0xe36 <oled_write_char>

	char *arr;
	
	arr = convert(value);
	
	while(*arr != '\0')
     ed6:	89 91       	ld	r24, Y+
     ed8:	81 11       	cpse	r24, r1
     eda:	fc cf       	rjmp	.-8      	; 0xed4 <oled_write_int+0x10>
		oled_write_char(*arr++);
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <sht_humidity>:
	i2c_write(cmd | 0x18);
	i2c_stop();
}

float sht_humidity()
{
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
	unsigned short raw_humidity;
	float humidity;

	i2c_start();
     ee6:	ca dd       	rcall	.-1132   	; 0xa7c <i2c_start>
	i2c_device_id(SHT, WRITE);
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	80 e4       	ldi	r24, 0x40	; 64
     eec:	d5 dd       	rcall	.-1110   	; 0xa98 <i2c_device_id>

	i2c_write(0xF5);	//humidity E5
     eee:	85 ef       	ldi	r24, 0xF5	; 245
     ef0:	24 de       	rcall	.-952    	; 0xb3a <i2c_write>
     ef2:	87 ea       	ldi	r24, 0xA7	; 167
     ef4:	91 e6       	ldi	r25, 0x61	; 97
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <sht_humidity+0x14>
     efa:	00 c0       	rjmp	.+0      	; 0xefc <sht_humidity+0x1a>
     efc:	00 00       	nop
	_delay_ms(100);

	i2c_start();
     efe:	be dd       	rcall	.-1156   	; 0xa7c <i2c_start>
	i2c_device_id(SHT, READ);
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	80 e4       	ldi	r24, 0x40	; 64
     f04:	c9 dd       	rcall	.-1134   	; 0xa98 <i2c_device_id>

	raw_humidity = i2c_read(0);
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	fb dd       	rcall	.-1034   	; 0xb00 <i2c_read>
     f0a:	c8 2f       	mov	r28, r24
     f0c:	d0 e0       	ldi	r29, 0x00	; 0
	raw_humidity <<= 8;
     f0e:	dc 2f       	mov	r29, r28
     f10:	cc 27       	eor	r28, r28
	raw_humidity |= i2c_read(1);	//ignore checksum
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	f5 dd       	rcall	.-1046   	; 0xb00 <i2c_read>
     f16:	c8 2b       	or	r28, r24
	
	i2c_stop();
     f18:	b8 dd       	rcall	.-1168   	; 0xa8a <i2c_stop>
	
	raw_humidity &= 0xFFFC;

	humidity = (125.0 * ((float)raw_humidity/65536.0));
     f1a:	be 01       	movw	r22, r28
     f1c:	6c 7f       	andi	r22, 0xFC	; 252
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	f6 d0       	rcall	.+492    	; 0x1110 <__floatunsisf>
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e8       	ldi	r20, 0x80	; 128
     f2a:	57 e3       	ldi	r21, 0x37	; 55
     f2c:	7f d1       	rcall	.+766    	; 0x122c <__mulsf3>
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4a ef       	ldi	r20, 0xFA	; 250
     f34:	52 e4       	ldi	r21, 0x42	; 66
     f36:	7a d1       	rcall	.+756    	; 0x122c <__mulsf3>
	humidity -= 6.0;
	
	return humidity;
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	40 ec       	ldi	r20, 0xC0	; 192
     f3e:	50 e4       	ldi	r21, 0x40	; 64
     f40:	82 d0       	rcall	.+260    	; 0x1046 <__subsf3>
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <sht_temp>:

float sht_temp()
{
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
	unsigned short raw_temp;
	float temp;
	
	i2c_start();
     f4c:	97 dd       	rcall	.-1234   	; 0xa7c <i2c_start>
	i2c_device_id(SHT, WRITE);
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	80 e4       	ldi	r24, 0x40	; 64
     f52:	a2 dd       	rcall	.-1212   	; 0xa98 <i2c_device_id>
	i2c_write(0xF3);	//temp E3
     f54:	83 ef       	ldi	r24, 0xF3	; 243
     f56:	f1 dd       	rcall	.-1054   	; 0xb3a <i2c_write>
     f58:	87 ea       	ldi	r24, 0xA7	; 167
     f5a:	91 e6       	ldi	r25, 0x61	; 97
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <sht_temp+0x14>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <sht_temp+0x1a>
     f62:	00 00       	nop
	_delay_ms(100);
	
	i2c_start();
     f64:	8b dd       	rcall	.-1258   	; 0xa7c <i2c_start>
	i2c_device_id(SHT, READ);
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	80 e4       	ldi	r24, 0x40	; 64
     f6a:	96 dd       	rcall	.-1236   	; 0xa98 <i2c_device_id>

	//read SHT20 data
	raw_temp = i2c_read(0);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	c8 dd       	rcall	.-1136   	; 0xb00 <i2c_read>
     f70:	c8 2f       	mov	r28, r24
     f72:	d0 e0       	ldi	r29, 0x00	; 0
	raw_temp <<= 8;
     f74:	dc 2f       	mov	r29, r28
     f76:	cc 27       	eor	r28, r28
	raw_temp |= i2c_read(1);	//ignore checksum
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	c2 dd       	rcall	.-1148   	; 0xb00 <i2c_read>
     f7c:	c8 2b       	or	r28, r24
	
	i2c_stop();
     f7e:	85 dd       	rcall	.-1270   	; 0xa8a <i2c_stop>
	
	raw_temp &= 0xFFFC;
	
	temp = (175.72 * ((float)raw_temp/65536.0));
     f80:	be 01       	movw	r22, r28
     f82:	6c 7f       	andi	r22, 0xFC	; 252
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	c3 d0       	rcall	.+390    	; 0x1110 <__floatunsisf>
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	57 e3       	ldi	r21, 0x37	; 55
     f92:	4c d1       	rcall	.+664    	; 0x122c <__mulsf3>
     f94:	22 e5       	ldi	r18, 0x52	; 82
     f96:	38 eb       	ldi	r19, 0xB8	; 184
     f98:	4f e2       	ldi	r20, 0x2F	; 47
     f9a:	53 e4       	ldi	r21, 0x43	; 67
     f9c:	47 d1       	rcall	.+654    	; 0x122c <__mulsf3>
	temp -= 46.85;
	
	return temp;
     f9e:	26 e6       	ldi	r18, 0x66	; 102
     fa0:	36 e6       	ldi	r19, 0x66	; 102
     fa2:	4b e3       	ldi	r20, 0x3B	; 59
     fa4:	52 e4       	ldi	r21, 0x42	; 66
     fa6:	4f d0       	rcall	.+158    	; 0x1046 <__subsf3>
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <reverse_array>:
	
	return array;
}

void reverse_array(unsigned char *array, unsigned char end)
{
     fae:	9c 01       	movw	r18, r24
	unsigned char start = 0, temp;
	
	while(start < end)
     fb0:	66 23       	and	r22, r22
     fb2:	79 f0       	breq	.+30     	; 0xfd2 <reverse_array+0x24>
     fb4:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = array[start];
     fb6:	d9 01       	movw	r26, r18
     fb8:	a9 0f       	add	r26, r25
     fba:	b1 1d       	adc	r27, r1
     fbc:	8c 91       	ld	r24, X
		array[start] = array[end];
     fbe:	f9 01       	movw	r30, r18
     fc0:	e6 0f       	add	r30, r22
     fc2:	f1 1d       	adc	r31, r1
     fc4:	40 81       	ld	r20, Z
     fc6:	4c 93       	st	X, r20
		array[end] = temp;
     fc8:	80 83       	st	Z, r24
		start++;
     fca:	9f 5f       	subi	r25, 0xFF	; 255
		end--;
     fcc:	61 50       	subi	r22, 0x01	; 1

void reverse_array(unsigned char *array, unsigned char end)
{
	unsigned char start = 0, temp;
	
	while(start < end)
     fce:	96 17       	cp	r25, r22
     fd0:	90 f3       	brcs	.-28     	; 0xfb6 <reverse_array+0x8>
     fd2:	08 95       	ret

00000fd4 <convert>:
*/


//converts a char number value into separate ASCII
char* convert(unsigned char value)
{
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	28 2f       	mov	r18, r24
	static unsigned char array[4];	//3
	
	for(i = 0; i < 4; i++)
	{
		//puts value in array after being split by 1 character and converted to ascii.
		array[i] = value % 10 + '0';
     fda:	6a e0       	ldi	r22, 0x0A	; 10
     fdc:	ab d1       	rcall	.+854    	; 0x1334 <__udivmodqi4>
     fde:	90 5d       	subi	r25, 0xD0	; 208
     fe0:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <array.1575>
		
		//checks if it's the last digit to process && ensures that it won't go out of bounds
		if(value / 10 == 0)// && i < 3)
     fe4:	2a 30       	cpi	r18, 0x0A	; 10
     fe6:	d8 f4       	brcc	.+54     	; 0x101e <convert+0x4a>
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <convert+0x28>
	static unsigned char array[4];	//3
	
	for(i = 0; i < 4; i++)
	{
		//puts value in array after being split by 1 character and converted to ascii.
		array[i] = value % 10 + '0';
     fea:	ea 01       	movw	r28, r20
     fec:	82 2f       	mov	r24, r18
     fee:	6a 2f       	mov	r22, r26
     ff0:	a1 d1       	rcall	.+834    	; 0x1334 <__udivmodqi4>
     ff2:	90 5d       	subi	r25, 0xD0	; 208
     ff4:	91 93       	st	Z+, r25
		
		//checks if it's the last digit to process && ensures that it won't go out of bounds
		if(value / 10 == 0)// && i < 3)
     ff6:	2a 30       	cpi	r18, 0x0A	; 10
     ff8:	40 f4       	brcc	.+16     	; 0x100a <convert+0x36>
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <convert+0x2e>
	static unsigned char array[4];	//3
	
	for(i = 0; i < 4; i++)
	{
		//puts value in array after being split by 1 character and converted to ascii.
		array[i] = value % 10 + '0';
     ffc:	c0 e0       	ldi	r28, 0x00	; 0
     ffe:	d0 e0       	ldi	r29, 0x00	; 0
{
	char i;
	//support max of size char + NULL terminator
	static unsigned char array[4];	//3
	
	for(i = 0; i < 4; i++)
    1000:	30 e0       	ldi	r19, 0x00	; 0
		//checks if it's the last digit to process && ensures that it won't go out of bounds
		if(value / 10 == 0)// && i < 3)
		{
			//if the number of digits uses is less than 3 e.g. 24, 1
			//set a terminator value in the next position
			array[i+1] = '\0';
    1002:	ce 54       	subi	r28, 0x4E	; 78
    1004:	df 4f       	sbci	r29, 0xFF	; 255
    1006:	19 82       	std	Y+1, r1	; 0x01
			break;
    1008:	15 c0       	rjmp	.+42     	; 0x1034 <convert+0x60>
		}
		value /= 10;
    100a:	82 2f       	mov	r24, r18
    100c:	6a 2f       	mov	r22, r26
    100e:	92 d1       	rcall	.+804    	; 0x1334 <__udivmodqi4>
    1010:	28 2f       	mov	r18, r24
{
	char i;
	//support max of size char + NULL terminator
	static unsigned char array[4];	//3
	
	for(i = 0; i < 4; i++)
    1012:	3f 5f       	subi	r19, 0xFF	; 255
    1014:	4f 5f       	subi	r20, 0xFF	; 255
    1016:	5f 4f       	sbci	r21, 0xFF	; 255
    1018:	34 30       	cpi	r19, 0x04	; 4
    101a:	39 f7       	brne	.-50     	; 0xfea <convert+0x16>
    101c:	0b c0       	rjmp	.+22     	; 0x1034 <convert+0x60>
			//if the number of digits uses is less than 3 e.g. 24, 1
			//set a terminator value in the next position
			array[i+1] = '\0';
			break;
		}
		value /= 10;
    101e:	82 2f       	mov	r24, r18
    1020:	6a e0       	ldi	r22, 0x0A	; 10
    1022:	88 d1       	rcall	.+784    	; 0x1334 <__udivmodqi4>
    1024:	28 2f       	mov	r18, r24
    1026:	e3 eb       	ldi	r30, 0xB3	; 179
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	41 e0       	ldi	r20, 0x01	; 1
    102c:	50 e0       	ldi	r21, 0x00	; 0
{
	char i;
	//support max of size char + NULL terminator
	static unsigned char array[4];	//3
	
	for(i = 0; i < 4; i++)
    102e:	31 e0       	ldi	r19, 0x01	; 1
	{
		//puts value in array after being split by 1 character and converted to ascii.
		array[i] = value % 10 + '0';
    1030:	aa e0       	ldi	r26, 0x0A	; 10
    1032:	db cf       	rjmp	.-74     	; 0xfea <convert+0x16>
		}
		value /= 10;
	}
	
	//array is currently back to front, reverse to fix
	reverse_array(array, i);
    1034:	63 2f       	mov	r22, r19
    1036:	82 eb       	ldi	r24, 0xB2	; 178
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b9 df       	rcall	.-142    	; 0xfae <reverse_array>
	
	return array;
}
    103c:	82 eb       	ldi	r24, 0xB2	; 178
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <__subsf3>:
    1046:	50 58       	subi	r21, 0x80	; 128

00001048 <__addsf3>:
    1048:	bb 27       	eor	r27, r27
    104a:	aa 27       	eor	r26, r26
    104c:	0e d0       	rcall	.+28     	; 0x106a <__addsf3x>
    104e:	b4 c0       	rjmp	.+360    	; 0x11b8 <__fp_round>
    1050:	a5 d0       	rcall	.+330    	; 0x119c <__fp_pscA>
    1052:	30 f0       	brcs	.+12     	; 0x1060 <__addsf3+0x18>
    1054:	aa d0       	rcall	.+340    	; 0x11aa <__fp_pscB>
    1056:	20 f0       	brcs	.+8      	; 0x1060 <__addsf3+0x18>
    1058:	31 f4       	brne	.+12     	; 0x1066 <__addsf3+0x1e>
    105a:	9f 3f       	cpi	r25, 0xFF	; 255
    105c:	11 f4       	brne	.+4      	; 0x1062 <__addsf3+0x1a>
    105e:	1e f4       	brtc	.+6      	; 0x1066 <__addsf3+0x1e>
    1060:	9a c0       	rjmp	.+308    	; 0x1196 <__fp_nan>
    1062:	0e f4       	brtc	.+2      	; 0x1066 <__addsf3+0x1e>
    1064:	e0 95       	com	r30
    1066:	e7 fb       	bst	r30, 7
    1068:	90 c0       	rjmp	.+288    	; 0x118a <__fp_inf>

0000106a <__addsf3x>:
    106a:	e9 2f       	mov	r30, r25
    106c:	b6 d0       	rcall	.+364    	; 0x11da <__fp_split3>
    106e:	80 f3       	brcs	.-32     	; 0x1050 <__addsf3+0x8>
    1070:	ba 17       	cp	r27, r26
    1072:	62 07       	cpc	r22, r18
    1074:	73 07       	cpc	r23, r19
    1076:	84 07       	cpc	r24, r20
    1078:	95 07       	cpc	r25, r21
    107a:	18 f0       	brcs	.+6      	; 0x1082 <__addsf3x+0x18>
    107c:	71 f4       	brne	.+28     	; 0x109a <__addsf3x+0x30>
    107e:	9e f5       	brtc	.+102    	; 0x10e6 <__addsf3x+0x7c>
    1080:	ce c0       	rjmp	.+412    	; 0x121e <__fp_zero>
    1082:	0e f4       	brtc	.+2      	; 0x1086 <__addsf3x+0x1c>
    1084:	e0 95       	com	r30
    1086:	0b 2e       	mov	r0, r27
    1088:	ba 2f       	mov	r27, r26
    108a:	a0 2d       	mov	r26, r0
    108c:	0b 01       	movw	r0, r22
    108e:	b9 01       	movw	r22, r18
    1090:	90 01       	movw	r18, r0
    1092:	0c 01       	movw	r0, r24
    1094:	ca 01       	movw	r24, r20
    1096:	a0 01       	movw	r20, r0
    1098:	11 24       	eor	r1, r1
    109a:	ff 27       	eor	r31, r31
    109c:	59 1b       	sub	r21, r25
    109e:	99 f0       	breq	.+38     	; 0x10c6 <__addsf3x+0x5c>
    10a0:	59 3f       	cpi	r21, 0xF9	; 249
    10a2:	50 f4       	brcc	.+20     	; 0x10b8 <__addsf3x+0x4e>
    10a4:	50 3e       	cpi	r21, 0xE0	; 224
    10a6:	68 f1       	brcs	.+90     	; 0x1102 <__addsf3x+0x98>
    10a8:	1a 16       	cp	r1, r26
    10aa:	f0 40       	sbci	r31, 0x00	; 0
    10ac:	a2 2f       	mov	r26, r18
    10ae:	23 2f       	mov	r18, r19
    10b0:	34 2f       	mov	r19, r20
    10b2:	44 27       	eor	r20, r20
    10b4:	58 5f       	subi	r21, 0xF8	; 248
    10b6:	f3 cf       	rjmp	.-26     	; 0x109e <__addsf3x+0x34>
    10b8:	46 95       	lsr	r20
    10ba:	37 95       	ror	r19
    10bc:	27 95       	ror	r18
    10be:	a7 95       	ror	r26
    10c0:	f0 40       	sbci	r31, 0x00	; 0
    10c2:	53 95       	inc	r21
    10c4:	c9 f7       	brne	.-14     	; 0x10b8 <__addsf3x+0x4e>
    10c6:	7e f4       	brtc	.+30     	; 0x10e6 <__addsf3x+0x7c>
    10c8:	1f 16       	cp	r1, r31
    10ca:	ba 0b       	sbc	r27, r26
    10cc:	62 0b       	sbc	r22, r18
    10ce:	73 0b       	sbc	r23, r19
    10d0:	84 0b       	sbc	r24, r20
    10d2:	ba f0       	brmi	.+46     	; 0x1102 <__addsf3x+0x98>
    10d4:	91 50       	subi	r25, 0x01	; 1
    10d6:	a1 f0       	breq	.+40     	; 0x1100 <__addsf3x+0x96>
    10d8:	ff 0f       	add	r31, r31
    10da:	bb 1f       	adc	r27, r27
    10dc:	66 1f       	adc	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	c2 f7       	brpl	.-16     	; 0x10d4 <__addsf3x+0x6a>
    10e4:	0e c0       	rjmp	.+28     	; 0x1102 <__addsf3x+0x98>
    10e6:	ba 0f       	add	r27, r26
    10e8:	62 1f       	adc	r22, r18
    10ea:	73 1f       	adc	r23, r19
    10ec:	84 1f       	adc	r24, r20
    10ee:	48 f4       	brcc	.+18     	; 0x1102 <__addsf3x+0x98>
    10f0:	87 95       	ror	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b7 95       	ror	r27
    10f8:	f7 95       	ror	r31
    10fa:	9e 3f       	cpi	r25, 0xFE	; 254
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <__addsf3x+0x96>
    10fe:	b3 cf       	rjmp	.-154    	; 0x1066 <__addsf3+0x1e>
    1100:	93 95       	inc	r25
    1102:	88 0f       	add	r24, r24
    1104:	08 f0       	brcs	.+2      	; 0x1108 <__addsf3x+0x9e>
    1106:	99 27       	eor	r25, r25
    1108:	ee 0f       	add	r30, r30
    110a:	97 95       	ror	r25
    110c:	87 95       	ror	r24
    110e:	08 95       	ret

00001110 <__floatunsisf>:
    1110:	e8 94       	clt
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <__floatsisf+0x12>

00001114 <__floatsisf>:
    1114:	97 fb       	bst	r25, 7
    1116:	3e f4       	brtc	.+14     	; 0x1126 <__floatsisf+0x12>
    1118:	90 95       	com	r25
    111a:	80 95       	com	r24
    111c:	70 95       	com	r23
    111e:	61 95       	neg	r22
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	99 23       	and	r25, r25
    1128:	a9 f0       	breq	.+42     	; 0x1154 <__floatsisf+0x40>
    112a:	f9 2f       	mov	r31, r25
    112c:	96 e9       	ldi	r25, 0x96	; 150
    112e:	bb 27       	eor	r27, r27
    1130:	93 95       	inc	r25
    1132:	f6 95       	lsr	r31
    1134:	87 95       	ror	r24
    1136:	77 95       	ror	r23
    1138:	67 95       	ror	r22
    113a:	b7 95       	ror	r27
    113c:	f1 11       	cpse	r31, r1
    113e:	f8 cf       	rjmp	.-16     	; 0x1130 <__floatsisf+0x1c>
    1140:	fa f4       	brpl	.+62     	; 0x1180 <__floatsisf+0x6c>
    1142:	bb 0f       	add	r27, r27
    1144:	11 f4       	brne	.+4      	; 0x114a <__floatsisf+0x36>
    1146:	60 ff       	sbrs	r22, 0
    1148:	1b c0       	rjmp	.+54     	; 0x1180 <__floatsisf+0x6c>
    114a:	6f 5f       	subi	r22, 0xFF	; 255
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	8f 4f       	sbci	r24, 0xFF	; 255
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	16 c0       	rjmp	.+44     	; 0x1180 <__floatsisf+0x6c>
    1154:	88 23       	and	r24, r24
    1156:	11 f0       	breq	.+4      	; 0x115c <__floatsisf+0x48>
    1158:	96 e9       	ldi	r25, 0x96	; 150
    115a:	11 c0       	rjmp	.+34     	; 0x117e <__floatsisf+0x6a>
    115c:	77 23       	and	r23, r23
    115e:	21 f0       	breq	.+8      	; 0x1168 <__floatsisf+0x54>
    1160:	9e e8       	ldi	r25, 0x8E	; 142
    1162:	87 2f       	mov	r24, r23
    1164:	76 2f       	mov	r23, r22
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <__floatsisf+0x5e>
    1168:	66 23       	and	r22, r22
    116a:	71 f0       	breq	.+28     	; 0x1188 <__floatsisf+0x74>
    116c:	96 e8       	ldi	r25, 0x86	; 134
    116e:	86 2f       	mov	r24, r22
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	2a f0       	brmi	.+10     	; 0x1180 <__floatsisf+0x6c>
    1176:	9a 95       	dec	r25
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	88 1f       	adc	r24, r24
    117e:	da f7       	brpl	.-10     	; 0x1176 <__floatsisf+0x62>
    1180:	88 0f       	add	r24, r24
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	97 f9       	bld	r25, 7
    1188:	08 95       	ret

0000118a <__fp_inf>:
    118a:	97 f9       	bld	r25, 7
    118c:	9f 67       	ori	r25, 0x7F	; 127
    118e:	80 e8       	ldi	r24, 0x80	; 128
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	08 95       	ret

00001196 <__fp_nan>:
    1196:	9f ef       	ldi	r25, 0xFF	; 255
    1198:	80 ec       	ldi	r24, 0xC0	; 192
    119a:	08 95       	ret

0000119c <__fp_pscA>:
    119c:	00 24       	eor	r0, r0
    119e:	0a 94       	dec	r0
    11a0:	16 16       	cp	r1, r22
    11a2:	17 06       	cpc	r1, r23
    11a4:	18 06       	cpc	r1, r24
    11a6:	09 06       	cpc	r0, r25
    11a8:	08 95       	ret

000011aa <__fp_pscB>:
    11aa:	00 24       	eor	r0, r0
    11ac:	0a 94       	dec	r0
    11ae:	12 16       	cp	r1, r18
    11b0:	13 06       	cpc	r1, r19
    11b2:	14 06       	cpc	r1, r20
    11b4:	05 06       	cpc	r0, r21
    11b6:	08 95       	ret

000011b8 <__fp_round>:
    11b8:	09 2e       	mov	r0, r25
    11ba:	03 94       	inc	r0
    11bc:	00 0c       	add	r0, r0
    11be:	11 f4       	brne	.+4      	; 0x11c4 <__fp_round+0xc>
    11c0:	88 23       	and	r24, r24
    11c2:	52 f0       	brmi	.+20     	; 0x11d8 <__fp_round+0x20>
    11c4:	bb 0f       	add	r27, r27
    11c6:	40 f4       	brcc	.+16     	; 0x11d8 <__fp_round+0x20>
    11c8:	bf 2b       	or	r27, r31
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <__fp_round+0x18>
    11cc:	60 ff       	sbrs	r22, 0
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <__fp_round+0x20>
    11d0:	6f 5f       	subi	r22, 0xFF	; 255
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	8f 4f       	sbci	r24, 0xFF	; 255
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	08 95       	ret

000011da <__fp_split3>:
    11da:	57 fd       	sbrc	r21, 7
    11dc:	90 58       	subi	r25, 0x80	; 128
    11de:	44 0f       	add	r20, r20
    11e0:	55 1f       	adc	r21, r21
    11e2:	59 f0       	breq	.+22     	; 0x11fa <__fp_splitA+0x10>
    11e4:	5f 3f       	cpi	r21, 0xFF	; 255
    11e6:	71 f0       	breq	.+28     	; 0x1204 <__fp_splitA+0x1a>
    11e8:	47 95       	ror	r20

000011ea <__fp_splitA>:
    11ea:	88 0f       	add	r24, r24
    11ec:	97 fb       	bst	r25, 7
    11ee:	99 1f       	adc	r25, r25
    11f0:	61 f0       	breq	.+24     	; 0x120a <__fp_splitA+0x20>
    11f2:	9f 3f       	cpi	r25, 0xFF	; 255
    11f4:	79 f0       	breq	.+30     	; 0x1214 <__fp_splitA+0x2a>
    11f6:	87 95       	ror	r24
    11f8:	08 95       	ret
    11fa:	12 16       	cp	r1, r18
    11fc:	13 06       	cpc	r1, r19
    11fe:	14 06       	cpc	r1, r20
    1200:	55 1f       	adc	r21, r21
    1202:	f2 cf       	rjmp	.-28     	; 0x11e8 <__fp_split3+0xe>
    1204:	46 95       	lsr	r20
    1206:	f1 df       	rcall	.-30     	; 0x11ea <__fp_splitA>
    1208:	08 c0       	rjmp	.+16     	; 0x121a <__fp_splitA+0x30>
    120a:	16 16       	cp	r1, r22
    120c:	17 06       	cpc	r1, r23
    120e:	18 06       	cpc	r1, r24
    1210:	99 1f       	adc	r25, r25
    1212:	f1 cf       	rjmp	.-30     	; 0x11f6 <__fp_splitA+0xc>
    1214:	86 95       	lsr	r24
    1216:	71 05       	cpc	r23, r1
    1218:	61 05       	cpc	r22, r1
    121a:	08 94       	sec
    121c:	08 95       	ret

0000121e <__fp_zero>:
    121e:	e8 94       	clt

00001220 <__fp_szero>:
    1220:	bb 27       	eor	r27, r27
    1222:	66 27       	eor	r22, r22
    1224:	77 27       	eor	r23, r23
    1226:	cb 01       	movw	r24, r22
    1228:	97 f9       	bld	r25, 7
    122a:	08 95       	ret

0000122c <__mulsf3>:
    122c:	0a d0       	rcall	.+20     	; 0x1242 <__mulsf3x>
    122e:	c4 cf       	rjmp	.-120    	; 0x11b8 <__fp_round>
    1230:	b5 df       	rcall	.-150    	; 0x119c <__fp_pscA>
    1232:	28 f0       	brcs	.+10     	; 0x123e <__mulsf3+0x12>
    1234:	ba df       	rcall	.-140    	; 0x11aa <__fp_pscB>
    1236:	18 f0       	brcs	.+6      	; 0x123e <__mulsf3+0x12>
    1238:	95 23       	and	r25, r21
    123a:	09 f0       	breq	.+2      	; 0x123e <__mulsf3+0x12>
    123c:	a6 cf       	rjmp	.-180    	; 0x118a <__fp_inf>
    123e:	ab cf       	rjmp	.-170    	; 0x1196 <__fp_nan>
    1240:	ef cf       	rjmp	.-34     	; 0x1220 <__fp_szero>

00001242 <__mulsf3x>:
    1242:	cb df       	rcall	.-106    	; 0x11da <__fp_split3>
    1244:	a8 f3       	brcs	.-22     	; 0x1230 <__mulsf3+0x4>

00001246 <__mulsf3_pse>:
    1246:	99 23       	and	r25, r25
    1248:	d9 f3       	breq	.-10     	; 0x1240 <__mulsf3+0x14>
    124a:	55 23       	and	r21, r21
    124c:	c9 f3       	breq	.-14     	; 0x1240 <__mulsf3+0x14>
    124e:	95 0f       	add	r25, r21
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	55 1f       	adc	r21, r21
    1254:	aa 27       	eor	r26, r26
    1256:	ee 27       	eor	r30, r30
    1258:	ff 27       	eor	r31, r31
    125a:	bb 27       	eor	r27, r27
    125c:	00 24       	eor	r0, r0
    125e:	08 94       	sec
    1260:	67 95       	ror	r22
    1262:	20 f4       	brcc	.+8      	; 0x126c <__mulsf3_pse+0x26>
    1264:	e2 0f       	add	r30, r18
    1266:	f3 1f       	adc	r31, r19
    1268:	b4 1f       	adc	r27, r20
    126a:	0a 1e       	adc	r0, r26
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	44 1f       	adc	r20, r20
    1272:	aa 1f       	adc	r26, r26
    1274:	66 95       	lsr	r22
    1276:	a9 f7       	brne	.-22     	; 0x1262 <__mulsf3_pse+0x1c>
    1278:	77 95       	ror	r23
    127a:	30 f4       	brcc	.+12     	; 0x1288 <__mulsf3_pse+0x42>
    127c:	f3 0f       	add	r31, r19
    127e:	b4 1f       	adc	r27, r20
    1280:	0a 1e       	adc	r0, r26
    1282:	12 1e       	adc	r1, r18
    1284:	08 f4       	brcc	.+2      	; 0x1288 <__mulsf3_pse+0x42>
    1286:	63 95       	inc	r22
    1288:	33 0f       	add	r19, r19
    128a:	44 1f       	adc	r20, r20
    128c:	aa 1f       	adc	r26, r26
    128e:	22 1f       	adc	r18, r18
    1290:	76 95       	lsr	r23
    1292:	99 f7       	brne	.-26     	; 0x127a <__mulsf3_pse+0x34>
    1294:	87 95       	ror	r24
    1296:	20 f4       	brcc	.+8      	; 0x12a0 <__mulsf3_pse+0x5a>
    1298:	b4 0f       	add	r27, r20
    129a:	0a 1e       	adc	r0, r26
    129c:	12 1e       	adc	r1, r18
    129e:	63 1f       	adc	r22, r19
    12a0:	44 0f       	add	r20, r20
    12a2:	aa 1f       	adc	r26, r26
    12a4:	22 1f       	adc	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	86 95       	lsr	r24
    12aa:	a9 f7       	brne	.-22     	; 0x1296 <__mulsf3_pse+0x50>
    12ac:	86 2f       	mov	r24, r22
    12ae:	71 2d       	mov	r23, r1
    12b0:	60 2d       	mov	r22, r0
    12b2:	11 24       	eor	r1, r1
    12b4:	9f 57       	subi	r25, 0x7F	; 127
    12b6:	50 40       	sbci	r21, 0x00	; 0
    12b8:	8a f0       	brmi	.+34     	; 0x12dc <__mulsf3_pse+0x96>
    12ba:	e1 f0       	breq	.+56     	; 0x12f4 <__mulsf3_pse+0xae>
    12bc:	88 23       	and	r24, r24
    12be:	4a f0       	brmi	.+18     	; 0x12d2 <__mulsf3_pse+0x8c>
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	bb 1f       	adc	r27, r27
    12c6:	66 1f       	adc	r22, r22
    12c8:	77 1f       	adc	r23, r23
    12ca:	88 1f       	adc	r24, r24
    12cc:	91 50       	subi	r25, 0x01	; 1
    12ce:	50 40       	sbci	r21, 0x00	; 0
    12d0:	a9 f7       	brne	.-22     	; 0x12bc <__mulsf3_pse+0x76>
    12d2:	9e 3f       	cpi	r25, 0xFE	; 254
    12d4:	51 05       	cpc	r21, r1
    12d6:	70 f0       	brcs	.+28     	; 0x12f4 <__mulsf3_pse+0xae>
    12d8:	58 cf       	rjmp	.-336    	; 0x118a <__fp_inf>
    12da:	a2 cf       	rjmp	.-188    	; 0x1220 <__fp_szero>
    12dc:	5f 3f       	cpi	r21, 0xFF	; 255
    12de:	ec f3       	brlt	.-6      	; 0x12da <__mulsf3_pse+0x94>
    12e0:	98 3e       	cpi	r25, 0xE8	; 232
    12e2:	dc f3       	brlt	.-10     	; 0x12da <__mulsf3_pse+0x94>
    12e4:	86 95       	lsr	r24
    12e6:	77 95       	ror	r23
    12e8:	67 95       	ror	r22
    12ea:	b7 95       	ror	r27
    12ec:	f7 95       	ror	r31
    12ee:	e7 95       	ror	r30
    12f0:	9f 5f       	subi	r25, 0xFF	; 255
    12f2:	c1 f7       	brne	.-16     	; 0x12e4 <__mulsf3_pse+0x9e>
    12f4:	fe 2b       	or	r31, r30
    12f6:	88 0f       	add	r24, r24
    12f8:	91 1d       	adc	r25, r1
    12fa:	96 95       	lsr	r25
    12fc:	87 95       	ror	r24
    12fe:	97 f9       	bld	r25, 7
    1300:	08 95       	ret

00001302 <__mulsi3>:
    1302:	ee 27       	eor	r30, r30
    1304:	ff 27       	eor	r31, r31

00001306 <__mulsi3_helper>:
    1306:	aa 27       	eor	r26, r26
    1308:	bb 27       	eor	r27, r27
    130a:	08 c0       	rjmp	.+16     	; 0x131c <__mulsi3_helper+0x16>
    130c:	a2 0f       	add	r26, r18
    130e:	b3 1f       	adc	r27, r19
    1310:	e4 1f       	adc	r30, r20
    1312:	f5 1f       	adc	r31, r21
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	44 1f       	adc	r20, r20
    131a:	55 1f       	adc	r21, r21
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	77 95       	ror	r23
    1322:	67 95       	ror	r22
    1324:	98 f3       	brcs	.-26     	; 0x130c <__mulsi3_helper+0x6>
    1326:	70 40       	sbci	r23, 0x00	; 0
    1328:	a9 f7       	brne	.-22     	; 0x1314 <__mulsi3_helper+0xe>
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	99 f7       	brne	.-26     	; 0x1314 <__mulsi3_helper+0xe>
    132e:	bd 01       	movw	r22, r26
    1330:	cf 01       	movw	r24, r30
    1332:	08 95       	ret

00001334 <__udivmodqi4>:
    1334:	99 1b       	sub	r25, r25
    1336:	79 e0       	ldi	r23, 0x09	; 9
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <__udivmodqi4_ep>

0000133a <__udivmodqi4_loop>:
    133a:	99 1f       	adc	r25, r25
    133c:	96 17       	cp	r25, r22
    133e:	08 f0       	brcs	.+2      	; 0x1342 <__udivmodqi4_ep>
    1340:	96 1b       	sub	r25, r22

00001342 <__udivmodqi4_ep>:
    1342:	88 1f       	adc	r24, r24
    1344:	7a 95       	dec	r23
    1346:	c9 f7       	brne	.-14     	; 0x133a <__udivmodqi4_loop>
    1348:	80 95       	com	r24
    134a:	08 95       	ret

0000134c <__udivmodsi4>:
    134c:	a1 e2       	ldi	r26, 0x21	; 33
    134e:	1a 2e       	mov	r1, r26
    1350:	aa 1b       	sub	r26, r26
    1352:	bb 1b       	sub	r27, r27
    1354:	fd 01       	movw	r30, r26
    1356:	0d c0       	rjmp	.+26     	; 0x1372 <__udivmodsi4_ep>

00001358 <__udivmodsi4_loop>:
    1358:	aa 1f       	adc	r26, r26
    135a:	bb 1f       	adc	r27, r27
    135c:	ee 1f       	adc	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	a2 17       	cp	r26, r18
    1362:	b3 07       	cpc	r27, r19
    1364:	e4 07       	cpc	r30, r20
    1366:	f5 07       	cpc	r31, r21
    1368:	20 f0       	brcs	.+8      	; 0x1372 <__udivmodsi4_ep>
    136a:	a2 1b       	sub	r26, r18
    136c:	b3 0b       	sbc	r27, r19
    136e:	e4 0b       	sbc	r30, r20
    1370:	f5 0b       	sbc	r31, r21

00001372 <__udivmodsi4_ep>:
    1372:	66 1f       	adc	r22, r22
    1374:	77 1f       	adc	r23, r23
    1376:	88 1f       	adc	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	1a 94       	dec	r1
    137c:	69 f7       	brne	.-38     	; 0x1358 <__udivmodsi4_loop>
    137e:	60 95       	com	r22
    1380:	70 95       	com	r23
    1382:	80 95       	com	r24
    1384:	90 95       	com	r25
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	bd 01       	movw	r22, r26
    138c:	cf 01       	movw	r24, r30
    138e:	08 95       	ret

00001390 <dtostrf>:
    1390:	ef 92       	push	r14
    1392:	0f 93       	push	r16
    1394:	1f 93       	push	r17
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	e8 01       	movw	r28, r16
    139c:	47 fd       	sbrc	r20, 7
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <dtostrf+0x14>
    13a0:	34 e0       	ldi	r19, 0x04	; 4
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <dtostrf+0x16>
    13a4:	34 e1       	ldi	r19, 0x14	; 20
    13a6:	04 2e       	mov	r0, r20
    13a8:	00 0c       	add	r0, r0
    13aa:	55 0b       	sbc	r21, r21
    13ac:	57 ff       	sbrs	r21, 7
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <dtostrf+0x26>
    13b0:	51 95       	neg	r21
    13b2:	41 95       	neg	r20
    13b4:	51 09       	sbc	r21, r1
    13b6:	e3 2e       	mov	r14, r19
    13b8:	02 2f       	mov	r16, r18
    13ba:	24 2f       	mov	r18, r20
    13bc:	ae 01       	movw	r20, r28
    13be:	07 d0       	rcall	.+14     	; 0x13ce <dtoa_prf>
    13c0:	ce 01       	movw	r24, r28
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ef 90       	pop	r14
    13cc:	08 95       	ret

000013ce <dtoa_prf>:
    13ce:	a9 e0       	ldi	r26, 0x09	; 9
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	ec ee       	ldi	r30, 0xEC	; 236
    13d4:	f9 e0       	ldi	r31, 0x09	; 9
    13d6:	5e c2       	rjmp	.+1212   	; 0x1894 <__prologue_saves__+0xc>
    13d8:	6a 01       	movw	r12, r20
    13da:	12 2f       	mov	r17, r18
    13dc:	b0 2e       	mov	r11, r16
    13de:	2b e3       	ldi	r18, 0x3B	; 59
    13e0:	20 17       	cp	r18, r16
    13e2:	20 f0       	brcs	.+8      	; 0x13ec <dtoa_prf+0x1e>
    13e4:	ff 24       	eor	r15, r15
    13e6:	f3 94       	inc	r15
    13e8:	f0 0e       	add	r15, r16
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <dtoa_prf+0x22>
    13ec:	2c e3       	ldi	r18, 0x3C	; 60
    13ee:	f2 2e       	mov	r15, r18
    13f0:	0f 2d       	mov	r16, r15
    13f2:	27 e0       	ldi	r18, 0x07	; 7
    13f4:	ae 01       	movw	r20, r28
    13f6:	4f 5f       	subi	r20, 0xFF	; 255
    13f8:	5f 4f       	sbci	r21, 0xFF	; 255
    13fa:	40 d1       	rcall	.+640    	; 0x167c <__ftoa_engine>
    13fc:	bc 01       	movw	r22, r24
    13fe:	49 81       	ldd	r20, Y+1	; 0x01
    1400:	84 2f       	mov	r24, r20
    1402:	89 70       	andi	r24, 0x09	; 9
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	31 f0       	breq	.+12     	; 0x1414 <dtoa_prf+0x46>
    1408:	e1 fc       	sbrc	r14, 1
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <dtoa_prf+0x4a>
    140c:	e0 fe       	sbrs	r14, 0
    140e:	06 c0       	rjmp	.+12     	; 0x141c <dtoa_prf+0x4e>
    1410:	90 e2       	ldi	r25, 0x20	; 32
    1412:	05 c0       	rjmp	.+10     	; 0x141e <dtoa_prf+0x50>
    1414:	9d e2       	ldi	r25, 0x2D	; 45
    1416:	03 c0       	rjmp	.+6      	; 0x141e <dtoa_prf+0x50>
    1418:	9b e2       	ldi	r25, 0x2B	; 43
    141a:	01 c0       	rjmp	.+2      	; 0x141e <dtoa_prf+0x50>
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	5e 2d       	mov	r21, r14
    1420:	50 71       	andi	r21, 0x10	; 16
    1422:	43 ff       	sbrs	r20, 3
    1424:	3c c0       	rjmp	.+120    	; 0x149e <dtoa_prf+0xd0>
    1426:	91 11       	cpse	r25, r1
    1428:	02 c0       	rjmp	.+4      	; 0x142e <dtoa_prf+0x60>
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	01 c0       	rjmp	.+2      	; 0x1430 <dtoa_prf+0x62>
    142e:	84 e0       	ldi	r24, 0x04	; 4
    1430:	81 17       	cp	r24, r17
    1432:	18 f4       	brcc	.+6      	; 0x143a <dtoa_prf+0x6c>
    1434:	21 2f       	mov	r18, r17
    1436:	28 1b       	sub	r18, r24
    1438:	01 c0       	rjmp	.+2      	; 0x143c <dtoa_prf+0x6e>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	51 11       	cpse	r21, r1
    143e:	0b c0       	rjmp	.+22     	; 0x1456 <dtoa_prf+0x88>
    1440:	f6 01       	movw	r30, r12
    1442:	82 2f       	mov	r24, r18
    1444:	30 e2       	ldi	r19, 0x20	; 32
    1446:	88 23       	and	r24, r24
    1448:	19 f0       	breq	.+6      	; 0x1450 <dtoa_prf+0x82>
    144a:	31 93       	st	Z+, r19
    144c:	81 50       	subi	r24, 0x01	; 1
    144e:	fb cf       	rjmp	.-10     	; 0x1446 <dtoa_prf+0x78>
    1450:	c2 0e       	add	r12, r18
    1452:	d1 1c       	adc	r13, r1
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	99 23       	and	r25, r25
    1458:	29 f0       	breq	.+10     	; 0x1464 <dtoa_prf+0x96>
    145a:	d6 01       	movw	r26, r12
    145c:	9c 93       	st	X, r25
    145e:	f6 01       	movw	r30, r12
    1460:	31 96       	adiw	r30, 0x01	; 1
    1462:	6f 01       	movw	r12, r30
    1464:	c6 01       	movw	r24, r12
    1466:	03 96       	adiw	r24, 0x03	; 3
    1468:	e2 fe       	sbrs	r14, 2
    146a:	0a c0       	rjmp	.+20     	; 0x1480 <dtoa_prf+0xb2>
    146c:	3e e4       	ldi	r19, 0x4E	; 78
    146e:	d6 01       	movw	r26, r12
    1470:	3c 93       	st	X, r19
    1472:	41 e4       	ldi	r20, 0x41	; 65
    1474:	11 96       	adiw	r26, 0x01	; 1
    1476:	4c 93       	st	X, r20
    1478:	11 97       	sbiw	r26, 0x01	; 1
    147a:	12 96       	adiw	r26, 0x02	; 2
    147c:	3c 93       	st	X, r19
    147e:	06 c0       	rjmp	.+12     	; 0x148c <dtoa_prf+0xbe>
    1480:	3e e6       	ldi	r19, 0x6E	; 110
    1482:	f6 01       	movw	r30, r12
    1484:	30 83       	st	Z, r19
    1486:	41 e6       	ldi	r20, 0x61	; 97
    1488:	41 83       	std	Z+1, r20	; 0x01
    148a:	32 83       	std	Z+2, r19	; 0x02
    148c:	fc 01       	movw	r30, r24
    148e:	32 2f       	mov	r19, r18
    1490:	40 e2       	ldi	r20, 0x20	; 32
    1492:	33 23       	and	r19, r19
    1494:	09 f4       	brne	.+2      	; 0x1498 <dtoa_prf+0xca>
    1496:	42 c0       	rjmp	.+132    	; 0x151c <dtoa_prf+0x14e>
    1498:	41 93       	st	Z+, r20
    149a:	31 50       	subi	r19, 0x01	; 1
    149c:	fa cf       	rjmp	.-12     	; 0x1492 <dtoa_prf+0xc4>
    149e:	42 ff       	sbrs	r20, 2
    14a0:	44 c0       	rjmp	.+136    	; 0x152a <dtoa_prf+0x15c>
    14a2:	91 11       	cpse	r25, r1
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <dtoa_prf+0xdc>
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <dtoa_prf+0xde>
    14aa:	84 e0       	ldi	r24, 0x04	; 4
    14ac:	81 17       	cp	r24, r17
    14ae:	18 f4       	brcc	.+6      	; 0x14b6 <dtoa_prf+0xe8>
    14b0:	21 2f       	mov	r18, r17
    14b2:	28 1b       	sub	r18, r24
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <dtoa_prf+0xea>
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	51 11       	cpse	r21, r1
    14ba:	0b c0       	rjmp	.+22     	; 0x14d2 <dtoa_prf+0x104>
    14bc:	f6 01       	movw	r30, r12
    14be:	82 2f       	mov	r24, r18
    14c0:	30 e2       	ldi	r19, 0x20	; 32
    14c2:	88 23       	and	r24, r24
    14c4:	19 f0       	breq	.+6      	; 0x14cc <dtoa_prf+0xfe>
    14c6:	31 93       	st	Z+, r19
    14c8:	81 50       	subi	r24, 0x01	; 1
    14ca:	fb cf       	rjmp	.-10     	; 0x14c2 <dtoa_prf+0xf4>
    14cc:	c2 0e       	add	r12, r18
    14ce:	d1 1c       	adc	r13, r1
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	99 23       	and	r25, r25
    14d4:	29 f0       	breq	.+10     	; 0x14e0 <dtoa_prf+0x112>
    14d6:	d6 01       	movw	r26, r12
    14d8:	9c 93       	st	X, r25
    14da:	f6 01       	movw	r30, r12
    14dc:	31 96       	adiw	r30, 0x01	; 1
    14de:	6f 01       	movw	r12, r30
    14e0:	c6 01       	movw	r24, r12
    14e2:	03 96       	adiw	r24, 0x03	; 3
    14e4:	e2 fe       	sbrs	r14, 2
    14e6:	0b c0       	rjmp	.+22     	; 0x14fe <dtoa_prf+0x130>
    14e8:	39 e4       	ldi	r19, 0x49	; 73
    14ea:	d6 01       	movw	r26, r12
    14ec:	3c 93       	st	X, r19
    14ee:	3e e4       	ldi	r19, 0x4E	; 78
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	3c 93       	st	X, r19
    14f4:	11 97       	sbiw	r26, 0x01	; 1
    14f6:	36 e4       	ldi	r19, 0x46	; 70
    14f8:	12 96       	adiw	r26, 0x02	; 2
    14fa:	3c 93       	st	X, r19
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <dtoa_prf+0x13e>
    14fe:	39 e6       	ldi	r19, 0x69	; 105
    1500:	f6 01       	movw	r30, r12
    1502:	30 83       	st	Z, r19
    1504:	3e e6       	ldi	r19, 0x6E	; 110
    1506:	31 83       	std	Z+1, r19	; 0x01
    1508:	36 e6       	ldi	r19, 0x66	; 102
    150a:	32 83       	std	Z+2, r19	; 0x02
    150c:	fc 01       	movw	r30, r24
    150e:	32 2f       	mov	r19, r18
    1510:	40 e2       	ldi	r20, 0x20	; 32
    1512:	33 23       	and	r19, r19
    1514:	19 f0       	breq	.+6      	; 0x151c <dtoa_prf+0x14e>
    1516:	41 93       	st	Z+, r20
    1518:	31 50       	subi	r19, 0x01	; 1
    151a:	fb cf       	rjmp	.-10     	; 0x1512 <dtoa_prf+0x144>
    151c:	fc 01       	movw	r30, r24
    151e:	e2 0f       	add	r30, r18
    1520:	f1 1d       	adc	r31, r1
    1522:	10 82       	st	Z, r1
    1524:	8e ef       	ldi	r24, 0xFE	; 254
    1526:	9f ef       	ldi	r25, 0xFF	; 255
    1528:	a6 c0       	rjmp	.+332    	; 0x1676 <dtoa_prf+0x2a8>
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	91 11       	cpse	r25, r1
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <dtoa_prf+0x168>
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	16 16       	cp	r1, r22
    1538:	17 06       	cpc	r1, r23
    153a:	1c f4       	brge	.+6      	; 0x1542 <dtoa_prf+0x174>
    153c:	fb 01       	movw	r30, r22
    153e:	31 96       	adiw	r30, 0x01	; 1
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <dtoa_prf+0x178>
    1542:	e1 e0       	ldi	r30, 0x01	; 1
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	2e 0f       	add	r18, r30
    1548:	3f 1f       	adc	r19, r31
    154a:	bb 20       	and	r11, r11
    154c:	21 f0       	breq	.+8      	; 0x1556 <dtoa_prf+0x188>
    154e:	eb 2d       	mov	r30, r11
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	31 96       	adiw	r30, 0x01	; 1
    1554:	02 c0       	rjmp	.+4      	; 0x155a <dtoa_prf+0x18c>
    1556:	e0 e0       	ldi	r30, 0x00	; 0
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	2e 0f       	add	r18, r30
    155c:	3f 1f       	adc	r19, r31
    155e:	e1 2f       	mov	r30, r17
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	2e 17       	cp	r18, r30
    1564:	3f 07       	cpc	r19, r31
    1566:	1c f4       	brge	.+6      	; 0x156e <dtoa_prf+0x1a0>
    1568:	12 1b       	sub	r17, r18
    156a:	21 2f       	mov	r18, r17
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <dtoa_prf+0x1a2>
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	8e 2d       	mov	r24, r14
    1572:	88 71       	andi	r24, 0x18	; 24
    1574:	59 f4       	brne	.+22     	; 0x158c <dtoa_prf+0x1be>
    1576:	f6 01       	movw	r30, r12
    1578:	82 2f       	mov	r24, r18
    157a:	30 e2       	ldi	r19, 0x20	; 32
    157c:	88 23       	and	r24, r24
    157e:	19 f0       	breq	.+6      	; 0x1586 <dtoa_prf+0x1b8>
    1580:	31 93       	st	Z+, r19
    1582:	81 50       	subi	r24, 0x01	; 1
    1584:	fb cf       	rjmp	.-10     	; 0x157c <dtoa_prf+0x1ae>
    1586:	c2 0e       	add	r12, r18
    1588:	d1 1c       	adc	r13, r1
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	99 23       	and	r25, r25
    158e:	29 f0       	breq	.+10     	; 0x159a <dtoa_prf+0x1cc>
    1590:	d6 01       	movw	r26, r12
    1592:	9c 93       	st	X, r25
    1594:	f6 01       	movw	r30, r12
    1596:	31 96       	adiw	r30, 0x01	; 1
    1598:	6f 01       	movw	r12, r30
    159a:	51 11       	cpse	r21, r1
    159c:	0b c0       	rjmp	.+22     	; 0x15b4 <dtoa_prf+0x1e6>
    159e:	f6 01       	movw	r30, r12
    15a0:	82 2f       	mov	r24, r18
    15a2:	90 e3       	ldi	r25, 0x30	; 48
    15a4:	88 23       	and	r24, r24
    15a6:	19 f0       	breq	.+6      	; 0x15ae <dtoa_prf+0x1e0>
    15a8:	91 93       	st	Z+, r25
    15aa:	81 50       	subi	r24, 0x01	; 1
    15ac:	fb cf       	rjmp	.-10     	; 0x15a4 <dtoa_prf+0x1d6>
    15ae:	c2 0e       	add	r12, r18
    15b0:	d1 1c       	adc	r13, r1
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	0f 2d       	mov	r16, r15
    15b6:	06 0f       	add	r16, r22
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	34 2f       	mov	r19, r20
    15bc:	30 71       	andi	r19, 0x10	; 16
    15be:	44 ff       	sbrs	r20, 4
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <dtoa_prf+0x1fa>
    15c2:	91 33       	cpi	r25, 0x31	; 49
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <dtoa_prf+0x1fa>
    15c6:	01 50       	subi	r16, 0x01	; 1
    15c8:	10 16       	cp	r1, r16
    15ca:	24 f4       	brge	.+8      	; 0x15d4 <dtoa_prf+0x206>
    15cc:	09 30       	cpi	r16, 0x09	; 9
    15ce:	18 f0       	brcs	.+6      	; 0x15d6 <dtoa_prf+0x208>
    15d0:	08 e0       	ldi	r16, 0x08	; 8
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <dtoa_prf+0x208>
    15d4:	01 e0       	ldi	r16, 0x01	; 1
    15d6:	ab 01       	movw	r20, r22
    15d8:	77 ff       	sbrs	r23, 7
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <dtoa_prf+0x212>
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	fb 01       	movw	r30, r22
    15e2:	e4 1b       	sub	r30, r20
    15e4:	f5 0b       	sbc	r31, r21
    15e6:	a1 e0       	ldi	r26, 0x01	; 1
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ac 0f       	add	r26, r28
    15ec:	bd 1f       	adc	r27, r29
    15ee:	ea 0f       	add	r30, r26
    15f0:	fb 1f       	adc	r31, r27
    15f2:	8e e2       	ldi	r24, 0x2E	; 46
    15f4:	a8 2e       	mov	r10, r24
    15f6:	4b 01       	movw	r8, r22
    15f8:	80 1a       	sub	r8, r16
    15fa:	91 08       	sbc	r9, r1
    15fc:	0b 2d       	mov	r16, r11
    15fe:	10 e0       	ldi	r17, 0x00	; 0
    1600:	11 95       	neg	r17
    1602:	01 95       	neg	r16
    1604:	11 09       	sbc	r17, r1
    1606:	4f 3f       	cpi	r20, 0xFF	; 255
    1608:	bf ef       	ldi	r27, 0xFF	; 255
    160a:	5b 07       	cpc	r21, r27
    160c:	21 f4       	brne	.+8      	; 0x1616 <dtoa_prf+0x248>
    160e:	d6 01       	movw	r26, r12
    1610:	ac 92       	st	X, r10
    1612:	11 96       	adiw	r26, 0x01	; 1
    1614:	6d 01       	movw	r12, r26
    1616:	64 17       	cp	r22, r20
    1618:	75 07       	cpc	r23, r21
    161a:	2c f0       	brlt	.+10     	; 0x1626 <dtoa_prf+0x258>
    161c:	84 16       	cp	r8, r20
    161e:	95 06       	cpc	r9, r21
    1620:	14 f4       	brge	.+4      	; 0x1626 <dtoa_prf+0x258>
    1622:	81 81       	ldd	r24, Z+1	; 0x01
    1624:	01 c0       	rjmp	.+2      	; 0x1628 <dtoa_prf+0x25a>
    1626:	80 e3       	ldi	r24, 0x30	; 48
    1628:	41 50       	subi	r20, 0x01	; 1
    162a:	51 09       	sbc	r21, r1
    162c:	31 96       	adiw	r30, 0x01	; 1
    162e:	d6 01       	movw	r26, r12
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	7d 01       	movw	r14, r26
    1634:	40 17       	cp	r20, r16
    1636:	51 07       	cpc	r21, r17
    1638:	24 f0       	brlt	.+8      	; 0x1642 <dtoa_prf+0x274>
    163a:	d6 01       	movw	r26, r12
    163c:	8c 93       	st	X, r24
    163e:	67 01       	movw	r12, r14
    1640:	e2 cf       	rjmp	.-60     	; 0x1606 <dtoa_prf+0x238>
    1642:	64 17       	cp	r22, r20
    1644:	75 07       	cpc	r23, r21
    1646:	39 f4       	brne	.+14     	; 0x1656 <dtoa_prf+0x288>
    1648:	96 33       	cpi	r25, 0x36	; 54
    164a:	20 f4       	brcc	.+8      	; 0x1654 <dtoa_prf+0x286>
    164c:	95 33       	cpi	r25, 0x35	; 53
    164e:	19 f4       	brne	.+6      	; 0x1656 <dtoa_prf+0x288>
    1650:	31 11       	cpse	r19, r1
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <dtoa_prf+0x288>
    1654:	81 e3       	ldi	r24, 0x31	; 49
    1656:	f6 01       	movw	r30, r12
    1658:	80 83       	st	Z, r24
    165a:	f7 01       	movw	r30, r14
    165c:	82 2f       	mov	r24, r18
    165e:	90 e2       	ldi	r25, 0x20	; 32
    1660:	88 23       	and	r24, r24
    1662:	19 f0       	breq	.+6      	; 0x166a <dtoa_prf+0x29c>
    1664:	91 93       	st	Z+, r25
    1666:	81 50       	subi	r24, 0x01	; 1
    1668:	fb cf       	rjmp	.-10     	; 0x1660 <dtoa_prf+0x292>
    166a:	f7 01       	movw	r30, r14
    166c:	e2 0f       	add	r30, r18
    166e:	f1 1d       	adc	r31, r1
    1670:	10 82       	st	Z, r1
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	29 96       	adiw	r28, 0x09	; 9
    1678:	ec e0       	ldi	r30, 0x0C	; 12
    167a:	28 c1       	rjmp	.+592    	; 0x18cc <__epilogue_restores__+0xc>

0000167c <__ftoa_engine>:
    167c:	28 30       	cpi	r18, 0x08	; 8
    167e:	08 f0       	brcs	.+2      	; 0x1682 <__ftoa_engine+0x6>
    1680:	27 e0       	ldi	r18, 0x07	; 7
    1682:	33 27       	eor	r19, r19
    1684:	da 01       	movw	r26, r20
    1686:	99 0f       	add	r25, r25
    1688:	31 1d       	adc	r19, r1
    168a:	87 fd       	sbrc	r24, 7
    168c:	91 60       	ori	r25, 0x01	; 1
    168e:	00 96       	adiw	r24, 0x00	; 0
    1690:	61 05       	cpc	r22, r1
    1692:	71 05       	cpc	r23, r1
    1694:	39 f4       	brne	.+14     	; 0x16a4 <__ftoa_engine+0x28>
    1696:	32 60       	ori	r19, 0x02	; 2
    1698:	2e 5f       	subi	r18, 0xFE	; 254
    169a:	3d 93       	st	X+, r19
    169c:	30 e3       	ldi	r19, 0x30	; 48
    169e:	2a 95       	dec	r18
    16a0:	e1 f7       	brne	.-8      	; 0x169a <__ftoa_engine+0x1e>
    16a2:	08 95       	ret
    16a4:	9f 3f       	cpi	r25, 0xFF	; 255
    16a6:	30 f0       	brcs	.+12     	; 0x16b4 <__ftoa_engine+0x38>
    16a8:	80 38       	cpi	r24, 0x80	; 128
    16aa:	71 05       	cpc	r23, r1
    16ac:	61 05       	cpc	r22, r1
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <__ftoa_engine+0x36>
    16b0:	3c 5f       	subi	r19, 0xFC	; 252
    16b2:	3c 5f       	subi	r19, 0xFC	; 252
    16b4:	3d 93       	st	X+, r19
    16b6:	91 30       	cpi	r25, 0x01	; 1
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <__ftoa_engine+0x40>
    16ba:	80 68       	ori	r24, 0x80	; 128
    16bc:	91 1d       	adc	r25, r1
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	1f 93       	push	r17
    16c4:	0f 93       	push	r16
    16c6:	ff 92       	push	r15
    16c8:	ef 92       	push	r14
    16ca:	19 2f       	mov	r17, r25
    16cc:	98 7f       	andi	r25, 0xF8	; 248
    16ce:	96 95       	lsr	r25
    16d0:	e9 2f       	mov	r30, r25
    16d2:	96 95       	lsr	r25
    16d4:	96 95       	lsr	r25
    16d6:	e9 0f       	add	r30, r25
    16d8:	ff 27       	eor	r31, r31
    16da:	e8 58       	subi	r30, 0x88	; 136
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	99 27       	eor	r25, r25
    16e0:	33 27       	eor	r19, r19
    16e2:	ee 24       	eor	r14, r14
    16e4:	ff 24       	eor	r15, r15
    16e6:	a7 01       	movw	r20, r14
    16e8:	e7 01       	movw	r28, r14
    16ea:	05 90       	lpm	r0, Z+
    16ec:	08 94       	sec
    16ee:	07 94       	ror	r0
    16f0:	28 f4       	brcc	.+10     	; 0x16fc <__ftoa_engine+0x80>
    16f2:	36 0f       	add	r19, r22
    16f4:	e7 1e       	adc	r14, r23
    16f6:	f8 1e       	adc	r15, r24
    16f8:	49 1f       	adc	r20, r25
    16fa:	51 1d       	adc	r21, r1
    16fc:	66 0f       	add	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	06 94       	lsr	r0
    1706:	a1 f7       	brne	.-24     	; 0x16f0 <__ftoa_engine+0x74>
    1708:	05 90       	lpm	r0, Z+
    170a:	07 94       	ror	r0
    170c:	28 f4       	brcc	.+10     	; 0x1718 <__ftoa_engine+0x9c>
    170e:	e7 0e       	add	r14, r23
    1710:	f8 1e       	adc	r15, r24
    1712:	49 1f       	adc	r20, r25
    1714:	56 1f       	adc	r21, r22
    1716:	c1 1d       	adc	r28, r1
    1718:	77 0f       	add	r23, r23
    171a:	88 1f       	adc	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	66 1f       	adc	r22, r22
    1720:	06 94       	lsr	r0
    1722:	a1 f7       	brne	.-24     	; 0x170c <__ftoa_engine+0x90>
    1724:	05 90       	lpm	r0, Z+
    1726:	07 94       	ror	r0
    1728:	28 f4       	brcc	.+10     	; 0x1734 <__ftoa_engine+0xb8>
    172a:	f8 0e       	add	r15, r24
    172c:	49 1f       	adc	r20, r25
    172e:	56 1f       	adc	r21, r22
    1730:	c7 1f       	adc	r28, r23
    1732:	d1 1d       	adc	r29, r1
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	66 1f       	adc	r22, r22
    173a:	77 1f       	adc	r23, r23
    173c:	06 94       	lsr	r0
    173e:	a1 f7       	brne	.-24     	; 0x1728 <__ftoa_engine+0xac>
    1740:	05 90       	lpm	r0, Z+
    1742:	07 94       	ror	r0
    1744:	20 f4       	brcc	.+8      	; 0x174e <__ftoa_engine+0xd2>
    1746:	49 0f       	add	r20, r25
    1748:	56 1f       	adc	r21, r22
    174a:	c7 1f       	adc	r28, r23
    174c:	d8 1f       	adc	r29, r24
    174e:	99 0f       	add	r25, r25
    1750:	66 1f       	adc	r22, r22
    1752:	77 1f       	adc	r23, r23
    1754:	88 1f       	adc	r24, r24
    1756:	06 94       	lsr	r0
    1758:	a9 f7       	brne	.-22     	; 0x1744 <__ftoa_engine+0xc8>
    175a:	84 91       	lpm	r24, Z
    175c:	10 95       	com	r17
    175e:	17 70       	andi	r17, 0x07	; 7
    1760:	41 f0       	breq	.+16     	; 0x1772 <__ftoa_engine+0xf6>
    1762:	d6 95       	lsr	r29
    1764:	c7 95       	ror	r28
    1766:	57 95       	ror	r21
    1768:	47 95       	ror	r20
    176a:	f7 94       	ror	r15
    176c:	e7 94       	ror	r14
    176e:	1a 95       	dec	r17
    1770:	c1 f7       	brne	.-16     	; 0x1762 <__ftoa_engine+0xe6>
    1772:	ee e1       	ldi	r30, 0x1E	; 30
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	68 94       	set
    1778:	15 90       	lpm	r1, Z+
    177a:	15 91       	lpm	r17, Z+
    177c:	35 91       	lpm	r19, Z+
    177e:	65 91       	lpm	r22, Z+
    1780:	95 91       	lpm	r25, Z+
    1782:	05 90       	lpm	r0, Z+
    1784:	7f e2       	ldi	r23, 0x2F	; 47
    1786:	73 95       	inc	r23
    1788:	e1 18       	sub	r14, r1
    178a:	f1 0a       	sbc	r15, r17
    178c:	43 0b       	sbc	r20, r19
    178e:	56 0b       	sbc	r21, r22
    1790:	c9 0b       	sbc	r28, r25
    1792:	d0 09       	sbc	r29, r0
    1794:	c0 f7       	brcc	.-16     	; 0x1786 <__ftoa_engine+0x10a>
    1796:	e1 0c       	add	r14, r1
    1798:	f1 1e       	adc	r15, r17
    179a:	43 1f       	adc	r20, r19
    179c:	56 1f       	adc	r21, r22
    179e:	c9 1f       	adc	r28, r25
    17a0:	d0 1d       	adc	r29, r0
    17a2:	7e f4       	brtc	.+30     	; 0x17c2 <__ftoa_engine+0x146>
    17a4:	70 33       	cpi	r23, 0x30	; 48
    17a6:	11 f4       	brne	.+4      	; 0x17ac <__ftoa_engine+0x130>
    17a8:	8a 95       	dec	r24
    17aa:	e6 cf       	rjmp	.-52     	; 0x1778 <__ftoa_engine+0xfc>
    17ac:	e8 94       	clt
    17ae:	01 50       	subi	r16, 0x01	; 1
    17b0:	30 f0       	brcs	.+12     	; 0x17be <__ftoa_engine+0x142>
    17b2:	08 0f       	add	r16, r24
    17b4:	0a f4       	brpl	.+2      	; 0x17b8 <__ftoa_engine+0x13c>
    17b6:	00 27       	eor	r16, r16
    17b8:	02 17       	cp	r16, r18
    17ba:	08 f4       	brcc	.+2      	; 0x17be <__ftoa_engine+0x142>
    17bc:	20 2f       	mov	r18, r16
    17be:	23 95       	inc	r18
    17c0:	02 2f       	mov	r16, r18
    17c2:	7a 33       	cpi	r23, 0x3A	; 58
    17c4:	28 f0       	brcs	.+10     	; 0x17d0 <__ftoa_engine+0x154>
    17c6:	79 e3       	ldi	r23, 0x39	; 57
    17c8:	7d 93       	st	X+, r23
    17ca:	2a 95       	dec	r18
    17cc:	e9 f7       	brne	.-6      	; 0x17c8 <__ftoa_engine+0x14c>
    17ce:	10 c0       	rjmp	.+32     	; 0x17f0 <__ftoa_engine+0x174>
    17d0:	7d 93       	st	X+, r23
    17d2:	2a 95       	dec	r18
    17d4:	89 f6       	brne	.-94     	; 0x1778 <__ftoa_engine+0xfc>
    17d6:	06 94       	lsr	r0
    17d8:	97 95       	ror	r25
    17da:	67 95       	ror	r22
    17dc:	37 95       	ror	r19
    17de:	17 95       	ror	r17
    17e0:	17 94       	ror	r1
    17e2:	e1 18       	sub	r14, r1
    17e4:	f1 0a       	sbc	r15, r17
    17e6:	43 0b       	sbc	r20, r19
    17e8:	56 0b       	sbc	r21, r22
    17ea:	c9 0b       	sbc	r28, r25
    17ec:	d0 09       	sbc	r29, r0
    17ee:	98 f0       	brcs	.+38     	; 0x1816 <__ftoa_engine+0x19a>
    17f0:	23 95       	inc	r18
    17f2:	7e 91       	ld	r23, -X
    17f4:	73 95       	inc	r23
    17f6:	7a 33       	cpi	r23, 0x3A	; 58
    17f8:	08 f0       	brcs	.+2      	; 0x17fc <__ftoa_engine+0x180>
    17fa:	70 e3       	ldi	r23, 0x30	; 48
    17fc:	7c 93       	st	X, r23
    17fe:	20 13       	cpse	r18, r16
    1800:	b8 f7       	brcc	.-18     	; 0x17f0 <__ftoa_engine+0x174>
    1802:	7e 91       	ld	r23, -X
    1804:	70 61       	ori	r23, 0x10	; 16
    1806:	7d 93       	st	X+, r23
    1808:	30 f0       	brcs	.+12     	; 0x1816 <__ftoa_engine+0x19a>
    180a:	83 95       	inc	r24
    180c:	71 e3       	ldi	r23, 0x31	; 49
    180e:	7d 93       	st	X+, r23
    1810:	70 e3       	ldi	r23, 0x30	; 48
    1812:	2a 95       	dec	r18
    1814:	e1 f7       	brne	.-8      	; 0x180e <__ftoa_engine+0x192>
    1816:	11 24       	eor	r1, r1
    1818:	ef 90       	pop	r14
    181a:	ff 90       	pop	r15
    181c:	0f 91       	pop	r16
    181e:	1f 91       	pop	r17
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	99 27       	eor	r25, r25
    1826:	87 fd       	sbrc	r24, 7
    1828:	90 95       	com	r25
    182a:	08 95       	ret

0000182c <eeprom_read_byte>:
    182c:	e1 99       	sbic	0x1c, 1	; 28
    182e:	fe cf       	rjmp	.-4      	; 0x182c <eeprom_read_byte>
    1830:	9f bb       	out	0x1f, r25	; 31
    1832:	8e bb       	out	0x1e, r24	; 30
    1834:	e0 9a       	sbi	0x1c, 0	; 28
    1836:	99 27       	eor	r25, r25
    1838:	8d b3       	in	r24, 0x1d	; 29
    183a:	08 95       	ret

0000183c <eeprom_read_word>:
    183c:	a8 e1       	ldi	r26, 0x18	; 24
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	42 e0       	ldi	r20, 0x02	; 2
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	13 c0       	rjmp	.+38     	; 0x186c <eeprom_read_blraw>

00001846 <eeprom_write_byte>:
    1846:	26 2f       	mov	r18, r22

00001848 <eeprom_write_r18>:
    1848:	e1 99       	sbic	0x1c, 1	; 28
    184a:	fe cf       	rjmp	.-4      	; 0x1848 <eeprom_write_r18>
    184c:	1c ba       	out	0x1c, r1	; 28
    184e:	9f bb       	out	0x1f, r25	; 31
    1850:	8e bb       	out	0x1e, r24	; 30
    1852:	2d bb       	out	0x1d, r18	; 29
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	e2 9a       	sbi	0x1c, 2	; 28
    185a:	e1 9a       	sbi	0x1c, 1	; 28
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	08 95       	ret

00001862 <eeprom_write_word>:
    1862:	f1 df       	rcall	.-30     	; 0x1846 <eeprom_write_byte>
    1864:	27 2f       	mov	r18, r23
    1866:	f0 cf       	rjmp	.-32     	; 0x1848 <eeprom_write_r18>

00001868 <eeprom_read_block>:
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22

0000186c <eeprom_read_blraw>:
    186c:	fc 01       	movw	r30, r24
    186e:	e1 99       	sbic	0x1c, 1	; 28
    1870:	fe cf       	rjmp	.-4      	; 0x186e <eeprom_read_blraw+0x2>
    1872:	06 c0       	rjmp	.+12     	; 0x1880 <eeprom_read_blraw+0x14>
    1874:	ff bb       	out	0x1f, r31	; 31
    1876:	ee bb       	out	0x1e, r30	; 30
    1878:	e0 9a       	sbi	0x1c, 0	; 28
    187a:	31 96       	adiw	r30, 0x01	; 1
    187c:	0d b2       	in	r0, 0x1d	; 29
    187e:	0d 92       	st	X+, r0
    1880:	41 50       	subi	r20, 0x01	; 1
    1882:	50 40       	sbci	r21, 0x00	; 0
    1884:	b8 f7       	brcc	.-18     	; 0x1874 <eeprom_read_blraw+0x8>
    1886:	08 95       	ret

00001888 <__prologue_saves__>:
    1888:	2f 92       	push	r2
    188a:	3f 92       	push	r3
    188c:	4f 92       	push	r4
    188e:	5f 92       	push	r5
    1890:	6f 92       	push	r6
    1892:	7f 92       	push	r7
    1894:	8f 92       	push	r8
    1896:	9f 92       	push	r9
    1898:	af 92       	push	r10
    189a:	bf 92       	push	r11
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	ca 1b       	sub	r28, r26
    18b2:	db 0b       	sbc	r29, r27
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	09 94       	ijmp

000018c0 <__epilogue_restores__>:
    18c0:	2a 88       	ldd	r2, Y+18	; 0x12
    18c2:	39 88       	ldd	r3, Y+17	; 0x11
    18c4:	48 88       	ldd	r4, Y+16	; 0x10
    18c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    18c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    18ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    18cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    18ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    18d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    18d2:	b9 84       	ldd	r11, Y+9	; 0x09
    18d4:	c8 84       	ldd	r12, Y+8	; 0x08
    18d6:	df 80       	ldd	r13, Y+7	; 0x07
    18d8:	ee 80       	ldd	r14, Y+6	; 0x06
    18da:	fd 80       	ldd	r15, Y+5	; 0x05
    18dc:	0c 81       	ldd	r16, Y+4	; 0x04
    18de:	1b 81       	ldd	r17, Y+3	; 0x03
    18e0:	aa 81       	ldd	r26, Y+2	; 0x02
    18e2:	b9 81       	ldd	r27, Y+1	; 0x01
    18e4:	ce 0f       	add	r28, r30
    18e6:	d1 1d       	adc	r29, r1
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	ed 01       	movw	r28, r26
    18f4:	08 95       	ret

000018f6 <_exit>:
    18f6:	f8 94       	cli

000018f8 <__stop_program>:
    18f8:	ff cf       	rjmp	.-2      	; 0x18f8 <__stop_program>
