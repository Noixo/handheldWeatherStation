
handheldWeatherStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001006  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001006  0000109a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800090  00800090  000010ca  2**0
                  ALLOC
  3 .debug_aranges 00000188  00000000  00000000  000010ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000299  00000000  00000000  00001252  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d2e  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065a  00000000  00000000  00002219  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000104a  00000000  00000000  00002873  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  000038c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  00003b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006be  00000000  00000000  00003e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00004544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

}

//scans the bus to find all i2c devices
void i2c_read_id()
{
       0:	3f c1       	rjmp	.+638    	; 0x280 <__ctors_end>
	
	//flash LED
	PORTB |= (1 << PB4);	//on
	_delay_ms(200);
	PORTB &= ~(1 << PB4);	//off
}
       2:	59 c1       	rjmp	.+690    	; 0x2b6 <__bad_interrupt>
}

/*fills the whole screen with white/black (depends on inverse or not)
*/
void oled_fill()
{
       4:	58 c1       	rjmp	.+688    	; 0x2b6 <__bad_interrupt>
       6:	57 c1       	rjmp	.+686    	; 0x2b6 <__bad_interrupt>
       8:	56 c1       	rjmp	.+684    	; 0x2b6 <__bad_interrupt>
       a:	55 c1       	rjmp	.+682    	; 0x2b6 <__bad_interrupt>
       c:	54 c1       	rjmp	.+680    	; 0x2b6 <__bad_interrupt>
       e:	53 c1       	rjmp	.+678    	; 0x2b6 <__bad_interrupt>
      10:	52 c1       	rjmp	.+676    	; 0x2b6 <__bad_interrupt>
      12:	51 c1       	rjmp	.+674    	; 0x2b6 <__bad_interrupt>
      14:	50 c1       	rjmp	.+672    	; 0x2b6 <__bad_interrupt>
      16:	4f c1       	rjmp	.+670    	; 0x2b6 <__bad_interrupt>
      18:	4e c1       	rjmp	.+668    	; 0x2b6 <__bad_interrupt>
      1a:	4d c1       	rjmp	.+666    	; 0x2b6 <__bad_interrupt>
      1c:	4c c1       	rjmp	.+664    	; 0x2b6 <__bad_interrupt>

0000001e <oled_customChar>:
      1e:	0d 1b 11 11 11 1f 0d 1b 11 11 1f 1f 0d 1b 11 1f     ................
      2e:	1f 1f 0d 1b 1f 1f 1f 1f 0d 1f 1f 1f 1f 1f           ..............

0000003c <ssd1306_init_sequence>:
      3c:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
      4c:	00 d5 f0 d9 22 da 12 db 20 8d 14 af                 ...."... ...

00000058 <oled_font6x8>:
	...
      60:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
      70:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
      80:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
      90:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
      a0:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
      b0:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
      c0:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
      d0:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
      e0:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
      f0:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     100:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     110:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     120:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     130:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     140:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     150:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     160:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     170:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     180:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     190:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     1a0:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     1b0:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     1c0:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     1d0:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     1e0:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     1f0:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     200:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     210:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     220:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     230:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     240:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     250:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     260:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     270:	a0 a0 a0 7c 00 44 64 54 4c 44 14 14 14 14 14 14     ...|.DdTLD......

00000280 <__ctors_end>:
     280:	11 24       	eor	r1, r1
     282:	1f be       	out	0x3f, r1	; 63
     284:	cf e5       	ldi	r28, 0x5F	; 95
     286:	d2 e0       	ldi	r29, 0x02	; 2
     288:	de bf       	out	0x3e, r29	; 62
     28a:	cd bf       	out	0x3d, r28	; 61

0000028c <__do_copy_data>:
     28c:	10 e0       	ldi	r17, 0x00	; 0
     28e:	a0 e6       	ldi	r26, 0x60	; 96
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	e6 e0       	ldi	r30, 0x06	; 6
     294:	f0 e1       	ldi	r31, 0x10	; 16
     296:	02 c0       	rjmp	.+4      	; 0x29c <.do_copy_data_start>

00000298 <.do_copy_data_loop>:
     298:	05 90       	lpm	r0, Z+
     29a:	0d 92       	st	X+, r0

0000029c <.do_copy_data_start>:
     29c:	a0 39       	cpi	r26, 0x90	; 144
     29e:	b1 07       	cpc	r27, r17
     2a0:	d9 f7       	brne	.-10     	; 0x298 <.do_copy_data_loop>

000002a2 <__do_clear_bss>:
     2a2:	10 e0       	ldi	r17, 0x00	; 0
     2a4:	a0 e9       	ldi	r26, 0x90	; 144
     2a6:	b0 e0       	ldi	r27, 0x00	; 0
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <.do_clear_bss_start>

000002aa <.do_clear_bss_loop>:
     2aa:	1d 92       	st	X+, r1

000002ac <.do_clear_bss_start>:
     2ac:	aa 39       	cpi	r26, 0x9A	; 154
     2ae:	b1 07       	cpc	r27, r17
     2b0:	e1 f7       	brne	.-8      	; 0x2aa <.do_clear_bss_loop>
     2b2:	1d d5       	rcall	.+2618   	; 0xcee <main>
     2b4:	a6 c6       	rjmp	.+3404   	; 0x1002 <_exit>

000002b6 <__bad_interrupt>:
     2b6:	a4 ce       	rjmp	.-696    	; 0x0 <__vectors>

000002b8 <bmpSet>:
	i2c_write(0xB6);
	i2c_stop();
}

void bmpSet(unsigned char settings, unsigned char reg)
{
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	08 2f       	mov	r16, r24
     2be:	16 2f       	mov	r17, r22
	i2c_start();
     2c0:	76 d3       	rcall	.+1772   	; 0x9ae <i2c_start>
	i2c_device_id(bmp280, 0);
     2c2:	87 e7       	ldi	r24, 0x77	; 119
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	9d d3       	rcall	.+1850   	; 0xa02 <i2c_device_id>
	i2c_write(reg);
     2c8:	81 2f       	mov	r24, r17
     2ca:	3f d4       	rcall	.+2174   	; 0xb4a <i2c_write>

	i2c_write(settings);
     2cc:	80 2f       	mov	r24, r16
     2ce:	3d d4       	rcall	.+2170   	; 0xb4a <i2c_write>
	i2c_stop();
     2d0:	83 d3       	rcall	.+1798   	; 0x9d8 <i2c_stop>
}
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <bmpReset>:
	}
}

void bmpReset()
{
	i2c_start();
     2d8:	6a d3       	rcall	.+1748   	; 0x9ae <i2c_start>
	(void) i2c_device_id(bmp280, 0);
     2da:	87 e7       	ldi	r24, 0x77	; 119
     2dc:	60 e0       	ldi	r22, 0x00	; 0
     2de:	91 d3       	rcall	.+1826   	; 0xa02 <i2c_device_id>
	i2c_write(0xE0);
     2e0:	80 ee       	ldi	r24, 0xE0	; 224
     2e2:	33 d4       	rcall	.+2150   	; 0xb4a <i2c_write>
	
	i2c_start();
     2e4:	64 d3       	rcall	.+1736   	; 0x9ae <i2c_start>
	(void) i2c_device_id(bmp280, 0);
     2e6:	87 e7       	ldi	r24, 0x77	; 119
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	8b d3       	rcall	.+1814   	; 0xa02 <i2c_device_id>
	i2c_write(0xB6);
     2ec:	86 eb       	ldi	r24, 0xB6	; 182
     2ee:	2d d4       	rcall	.+2138   	; 0xb4a <i2c_write>
	i2c_stop();
     2f0:	73 d3       	rcall	.+1766   	; 0x9d8 <i2c_stop>
}
     2f2:	08 95       	ret

000002f4 <bmp280GetPressure>:

	return (T);
}

unsigned long bmp280GetPressure()
{
     2f4:	2f 92       	push	r2
     2f6:	3f 92       	push	r3
     2f8:	4f 92       	push	r4
     2fa:	5f 92       	push	r5
     2fc:	6f 92       	push	r6
     2fe:	7f 92       	push	r7
     300:	8f 92       	push	r8
     302:	9f 92       	push	r9
     304:	af 92       	push	r10
     306:	bf 92       	push	r11
     308:	cf 92       	push	r12
     30a:	df 92       	push	r13
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	df 93       	push	r29
     316:	cf 93       	push	r28
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	61 97       	sbiw	r28, 0x11	; 17
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
	long var1, var2, adc_P;
	unsigned long p;
	
	//t_fine = t_fine;
	//begin multi-byte data transfer
	i2c_start();
     328:	42 d3       	rcall	.+1668   	; 0x9ae <i2c_start>
	(void) i2c_device_id(bmp280, 0);
     32a:	87 e7       	ldi	r24, 0x77	; 119
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	69 d3       	rcall	.+1746   	; 0xa02 <i2c_device_id>
	//start at 0xF7-0xF9
	//point to pressure data location
	i2c_write(0xF7);
     330:	87 ef       	ldi	r24, 0xF7	; 247
     332:	0b d4       	rcall	.+2070   	; 0xb4a <i2c_write>

	//repeated start
	i2c_start();
     334:	3c d3       	rcall	.+1656   	; 0x9ae <i2c_start>
	(void) i2c_device_id(bmp280, 1);
     336:	87 e7       	ldi	r24, 0x77	; 119
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	63 d3       	rcall	.+1734   	; 0xa02 <i2c_device_id>

	adc_P = i2c_read(0);
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	bd d3       	rcall	.+1914   	; 0xaba <i2c_read>
     340:	8f 87       	std	Y+15, r24	; 0x0f
	adc_P <<= 8;
	adc_P |= i2c_read(0);
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	ba d3       	rcall	.+1908   	; 0xaba <i2c_read>
     346:	8e 87       	std	Y+14, r24	; 0x0e
	adc_P <<= 8;
	adc_P |= i2c_read(1);
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	b7 d3       	rcall	.+1902   	; 0xaba <i2c_read>
     34c:	8d 87       	std	Y+13, r24	; 0x0d

	i2c_stop();
     34e:	44 d3       	rcall	.+1672   	; 0x9d8 <i2c_stop>
	adc_P >>= 4;

	//pressure conversion formula from BMP280 documentation
	//32bit-fixed point conversion -pg 46

	var1 = (((long)t_fine) >> 1) - (long)64000;
     350:	80 91 90 00 	lds	r24, 0x0090
     354:	90 91 91 00 	lds	r25, 0x0091
     358:	a0 91 92 00 	lds	r26, 0x0092
     35c:	b0 91 93 00 	lds	r27, 0x0093
     360:	b5 95       	asr	r27
     362:	a7 95       	ror	r26
     364:	97 95       	ror	r25
     366:	87 95       	ror	r24
     368:	0f 2e       	mov	r0, r31
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	2f 2e       	mov	r2, r31
     36e:	f6 e0       	ldi	r31, 0x06	; 6
     370:	3f 2e       	mov	r3, r31
     372:	ff ef       	ldi	r31, 0xFF	; 255
     374:	4f 2e       	mov	r4, r31
     376:	ff ef       	ldi	r31, 0xFF	; 255
     378:	5f 2e       	mov	r5, r31
     37a:	f0 2d       	mov	r31, r0
     37c:	28 0e       	add	r2, r24
     37e:	39 1e       	adc	r3, r25
     380:	4a 1e       	adc	r4, r26
     382:	5b 1e       	adc	r5, r27
	var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((long)dig_P6);
     384:	a2 01       	movw	r20, r4
     386:	91 01       	movw	r18, r2
     388:	55 95       	asr	r21
     38a:	47 95       	ror	r20
     38c:	37 95       	ror	r19
     38e:	27 95       	ror	r18
     390:	55 95       	asr	r21
     392:	47 95       	ror	r20
     394:	37 95       	ror	r19
     396:	27 95       	ror	r18
     398:	ca 01       	movw	r24, r20
     39a:	b9 01       	movw	r22, r18
     39c:	bd d5       	rcall	.+2938   	; 0xf18 <__mulsi3>
     39e:	69 87       	std	Y+9, r22	; 0x09
     3a0:	7a 87       	std	Y+10, r23	; 0x0a
     3a2:	8b 87       	std	Y+11, r24	; 0x0b
     3a4:	9c 87       	std	Y+12, r25	; 0x0c
     3a6:	81 e1       	ldi	r24, 0x11	; 17
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	05 d6       	rcall	.+3082   	; 0xfb6 <__eerd_word_tn85>
     3ac:	99 8b       	std	Y+17, r25	; 0x11
     3ae:	88 8b       	std	Y+16, r24	; 0x10
	
	var2 = var2 + ((var1 * ((long)dig_P5)) << 1);
     3b0:	8f e0       	ldi	r24, 0x0F	; 15
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	00 d6       	rcall	.+3072   	; 0xfb6 <__eerd_word_tn85>
     3b6:	98 87       	std	Y+8, r25	; 0x08
     3b8:	8f 83       	std	Y+7, r24	; 0x07
	var2 = (var2 >> 2) + (((long)dig_P4) << 16);
     3ba:	8d e0       	ldi	r24, 0x0D	; 13
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	fb d5       	rcall	.+3062   	; 0xfb6 <__eerd_word_tn85>
     3c0:	9e 83       	std	Y+6, r25	; 0x06
     3c2:	8d 83       	std	Y+5, r24	; 0x05

	var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3)
     3c4:	8b e0       	ldi	r24, 0x0B	; 11
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	f6 d5       	rcall	.+3052   	; 0xfb6 <__eerd_word_tn85>
     3ca:	7c 01       	movw	r14, r24
     3cc:	89 e0       	ldi	r24, 0x09	; 9
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	f2 d5       	rcall	.+3044   	; 0xfb6 <__eerd_word_tn85>
     3d2:	5c 01       	movw	r10, r24
     3d4:	69 85       	ldd	r22, Y+9	; 0x09
     3d6:	7a 85       	ldd	r23, Y+10	; 0x0a
     3d8:	8b 85       	ldd	r24, Y+11	; 0x0b
     3da:	9c 85       	ldd	r25, Y+12	; 0x0c
     3dc:	05 2e       	mov	r0, r21
     3de:	5d e0       	ldi	r21, 0x0D	; 13
     3e0:	95 95       	asr	r25
     3e2:	87 95       	ror	r24
     3e4:	77 95       	ror	r23
     3e6:	67 95       	ror	r22
     3e8:	5a 95       	dec	r21
     3ea:	d1 f7       	brne	.-12     	; 0x3e0 <bmp280GetPressure+0xec>
     3ec:	50 2d       	mov	r21, r0
     3ee:	00 27       	eor	r16, r16
     3f0:	f7 fc       	sbrc	r15, 7
     3f2:	00 95       	com	r16
     3f4:	10 2f       	mov	r17, r16
     3f6:	a8 01       	movw	r20, r16
     3f8:	97 01       	movw	r18, r14
     3fa:	8e d5       	rcall	.+2844   	; 0xf18 <__mulsi3>
     3fc:	7b 01       	movw	r14, r22
     3fe:	8c 01       	movw	r16, r24
     400:	68 94       	set
     402:	12 f8       	bld	r1, 2
     404:	15 95       	asr	r17
     406:	07 95       	ror	r16
     408:	f7 94       	ror	r15
     40a:	e7 94       	ror	r14
     40c:	16 94       	lsr	r1
     40e:	d1 f7       	brne	.-12     	; 0x404 <bmp280GetPressure+0x110>
     410:	cc 24       	eor	r12, r12
     412:	b7 fc       	sbrc	r11, 7
     414:	c0 94       	com	r12
     416:	dc 2c       	mov	r13, r12
     418:	c6 01       	movw	r24, r12
     41a:	b5 01       	movw	r22, r10
     41c:	a2 01       	movw	r20, r4
     41e:	91 01       	movw	r18, r2
     420:	7b d5       	rcall	.+2806   	; 0xf18 <__mulsi3>
     422:	95 95       	asr	r25
     424:	87 95       	ror	r24
     426:	77 95       	ror	r23
     428:	67 95       	ror	r22
     42a:	e6 0e       	add	r14, r22
     42c:	f7 1e       	adc	r15, r23
     42e:	08 1f       	adc	r16, r24
     430:	19 1f       	adc	r17, r25
	+ ((((long)dig_P2) * var1) >> 1)) >> 18;

	var1 = ((((32768 + var1)) * ((long) dig_P1)) >> 15);
     432:	87 e0       	ldi	r24, 0x07	; 7
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	bf d5       	rcall	.+2942   	; 0xfb6 <__eerd_word_tn85>
     438:	0d 2e       	mov	r0, r29
     43a:	d2 e1       	ldi	r29, 0x12	; 18
     43c:	15 95       	asr	r17
     43e:	07 95       	ror	r16
     440:	f7 94       	ror	r15
     442:	e7 94       	ror	r14
     444:	da 95       	dec	r29
     446:	d1 f7       	brne	.-12     	; 0x43c <bmp280GetPressure+0x148>
     448:	d0 2d       	mov	r29, r0
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e8       	ldi	r19, 0x80	; 128
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	e2 0e       	add	r14, r18
     454:	f3 1e       	adc	r15, r19
     456:	04 1f       	adc	r16, r20
     458:	15 1f       	adc	r17, r21
     45a:	9c 01       	movw	r18, r24
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	c8 01       	movw	r24, r16
     462:	b7 01       	movw	r22, r14
     464:	59 d5       	rcall	.+2738   	; 0xf18 <__mulsi3>
     466:	3b 01       	movw	r6, r22
     468:	4c 01       	movw	r8, r24
     46a:	05 2e       	mov	r0, r21
     46c:	5f e0       	ldi	r21, 0x0F	; 15
     46e:	95 94       	asr	r9
     470:	87 94       	ror	r8
     472:	77 94       	ror	r7
     474:	67 94       	ror	r6
     476:	5a 95       	dec	r21
     478:	d1 f7       	brne	.-12     	; 0x46e <bmp280GetPressure+0x17a>
     47a:	50 2d       	mov	r21, r0

	if(var1 == 0)
     47c:	61 14       	cp	r6, r1
     47e:	71 04       	cpc	r7, r1
     480:	81 04       	cpc	r8, r1
     482:	91 04       	cpc	r9, r1
     484:	29 f4       	brne	.+10     	; 0x490 <bmp280GetPressure+0x19c>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	18 c1       	rjmp	.+560    	; 0x6c0 <bmp280GetPressure+0x3cc>

	//repeated start
	i2c_start();
	(void) i2c_device_id(bmp280, 1);

	adc_P = i2c_read(0);
     490:	3f 85       	ldd	r19, Y+15	; 0x0f
     492:	e3 2e       	mov	r14, r19
     494:	ff 24       	eor	r15, r15
     496:	00 e0       	ldi	r16, 0x00	; 0
     498:	10 e0       	ldi	r17, 0x00	; 0
	adc_P <<= 8;
     49a:	10 2f       	mov	r17, r16
     49c:	0f 2d       	mov	r16, r15
     49e:	fe 2c       	mov	r15, r14
     4a0:	ee 24       	eor	r14, r14
	adc_P |= i2c_read(0);
     4a2:	4e 85       	ldd	r20, Y+14	; 0x0e
     4a4:	84 2f       	mov	r24, r20
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	a0 e0       	ldi	r26, 0x00	; 0
     4aa:	b0 e0       	ldi	r27, 0x00	; 0
     4ac:	e8 2a       	or	r14, r24
     4ae:	f9 2a       	or	r15, r25
     4b0:	0a 2b       	or	r16, r26
     4b2:	1b 2b       	or	r17, r27
	adc_P <<= 8;
     4b4:	10 2f       	mov	r17, r16
     4b6:	0f 2d       	mov	r16, r15
     4b8:	fe 2c       	mov	r15, r14
     4ba:	ee 24       	eor	r14, r14
	adc_P |= i2c_read(1);
     4bc:	5d 85       	ldd	r21, Y+13	; 0x0d
     4be:	85 2f       	mov	r24, r21
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	a0 e0       	ldi	r26, 0x00	; 0
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	e8 2a       	or	r14, r24
     4c8:	f9 2a       	or	r15, r25
     4ca:	0a 2b       	or	r16, r26
     4cc:	1b 2b       	or	r17, r27

	//pressure conversion formula from BMP280 documentation
	//32bit-fixed point conversion -pg 46

	var1 = (((long)t_fine) >> 1) - (long)64000;
	var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * ((long)dig_P6);
     4ce:	69 85       	ldd	r22, Y+9	; 0x09
     4d0:	7a 85       	ldd	r23, Y+10	; 0x0a
     4d2:	8b 85       	ldd	r24, Y+11	; 0x0b
     4d4:	9c 85       	ldd	r25, Y+12	; 0x0c
     4d6:	05 2e       	mov	r0, r21
     4d8:	5b e0       	ldi	r21, 0x0B	; 11
     4da:	95 95       	asr	r25
     4dc:	87 95       	ror	r24
     4de:	77 95       	ror	r23
     4e0:	67 95       	ror	r22
     4e2:	5a 95       	dec	r21
     4e4:	d1 f7       	brne	.-12     	; 0x4da <bmp280GetPressure+0x1e6>
     4e6:	50 2d       	mov	r21, r0
     4e8:	e8 89       	ldd	r30, Y+16	; 0x10
     4ea:	f9 89       	ldd	r31, Y+17	; 0x11
     4ec:	9f 01       	movw	r18, r30
     4ee:	44 27       	eor	r20, r20
     4f0:	37 fd       	sbrc	r19, 7
     4f2:	40 95       	com	r20
     4f4:	54 2f       	mov	r21, r20
     4f6:	10 d5       	rcall	.+2592   	; 0xf18 <__mulsi3>
     4f8:	5b 01       	movw	r10, r22
     4fa:	6c 01       	movw	r12, r24
	
	var2 = var2 + ((var1 * ((long)dig_P5)) << 1);
	var2 = (var2 >> 2) + (((long)dig_P4) << 16);
     4fc:	2f 81       	ldd	r18, Y+7	; 0x07
     4fe:	38 85       	ldd	r19, Y+8	; 0x08
     500:	b9 01       	movw	r22, r18
     502:	88 27       	eor	r24, r24
     504:	77 fd       	sbrc	r23, 7
     506:	80 95       	com	r24
     508:	98 2f       	mov	r25, r24
     50a:	a2 01       	movw	r20, r4
     50c:	91 01       	movw	r18, r2
     50e:	04 d5       	rcall	.+2568   	; 0xf18 <__mulsi3>
     510:	66 0f       	add	r22, r22
     512:	77 1f       	adc	r23, r23
     514:	88 1f       	adc	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	a6 0e       	add	r10, r22
     51a:	b7 1e       	adc	r11, r23
     51c:	c8 1e       	adc	r12, r24
     51e:	d9 1e       	adc	r13, r25
     520:	d5 94       	asr	r13
     522:	c7 94       	ror	r12
     524:	b7 94       	ror	r11
     526:	a7 94       	ror	r10
     528:	d5 94       	asr	r13
     52a:	c7 94       	ror	r12
     52c:	b7 94       	ror	r11
     52e:	a7 94       	ror	r10

	if(var1 == 0)
	{
		return 0;
	}
	p = (((unsigned long) (((long)1048576) - adc_P) - (var2 >> 12))) * 3125;
     530:	68 94       	set
     532:	13 f8       	bld	r1, 3
     534:	15 95       	asr	r17
     536:	07 95       	ror	r16
     538:	f7 94       	ror	r15
     53a:	e7 94       	ror	r14
     53c:	16 94       	lsr	r1
     53e:	d1 f7       	brne	.-12     	; 0x534 <bmp280GetPressure+0x240>
     540:	10 95       	com	r17
     542:	00 95       	com	r16
     544:	f0 94       	com	r15
     546:	e0 94       	com	r14
     548:	e1 1c       	adc	r14, r1
     54a:	f1 1c       	adc	r15, r1
     54c:	01 1d       	adc	r16, r1
     54e:	11 1d       	adc	r17, r1
     550:	4d 81       	ldd	r20, Y+5	; 0x05
     552:	5e 81       	ldd	r21, Y+6	; 0x06
     554:	ca 01       	movw	r24, r20
     556:	aa 27       	eor	r26, r26
     558:	97 fd       	sbrc	r25, 7
     55a:	a0 95       	com	r26
     55c:	ba 2f       	mov	r27, r26
     55e:	dc 01       	movw	r26, r24
     560:	99 27       	eor	r25, r25
     562:	88 27       	eor	r24, r24
     564:	a8 0e       	add	r10, r24
     566:	b9 1e       	adc	r11, r25
     568:	ca 1e       	adc	r12, r26
     56a:	db 1e       	adc	r13, r27
     56c:	09 2e       	mov	r0, r25
     56e:	9c e0       	ldi	r25, 0x0C	; 12
     570:	d5 94       	asr	r13
     572:	c7 94       	ror	r12
     574:	b7 94       	ror	r11
     576:	a7 94       	ror	r10
     578:	9a 95       	dec	r25
     57a:	d1 f7       	brne	.-12     	; 0x570 <bmp280GetPressure+0x27c>
     57c:	90 2d       	mov	r25, r0
     57e:	ea 18       	sub	r14, r10
     580:	fb 08       	sbc	r15, r11
     582:	0c 09       	sbc	r16, r12
     584:	1d 09       	sbc	r17, r13
     586:	c8 01       	movw	r24, r16
     588:	b7 01       	movw	r22, r14
     58a:	25 e3       	ldi	r18, 0x35	; 53
     58c:	3c e0       	ldi	r19, 0x0C	; 12
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	c2 d4       	rcall	.+2436   	; 0xf18 <__mulsi3>
     594:	60 50       	subi	r22, 0x00	; 0
     596:	70 40       	sbci	r23, 0x00	; 0
     598:	80 4b       	sbci	r24, 0xB0	; 176
     59a:	9c 43       	sbci	r25, 0x3C	; 60

	if(p < 0x80000000)
     59c:	82 f0       	brmi	.+32     	; 0x5be <bmp280GetPressure+0x2ca>
	{
		p = (p << 1) / ((unsigned long)var1);
     59e:	66 0f       	add	r22, r22
     5a0:	77 1f       	adc	r23, r23
     5a2:	88 1f       	adc	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	a4 01       	movw	r20, r8
     5a8:	93 01       	movw	r18, r6
     5aa:	db d4       	rcall	.+2486   	; 0xf62 <__udivmodsi4>
     5ac:	82 2f       	mov	r24, r18
     5ae:	93 2f       	mov	r25, r19
     5b0:	a4 2f       	mov	r26, r20
     5b2:	b5 2f       	mov	r27, r21
     5b4:	89 83       	std	Y+1, r24	; 0x01
     5b6:	9a 83       	std	Y+2, r25	; 0x02
     5b8:	ab 83       	std	Y+3, r26	; 0x03
     5ba:	bc 83       	std	Y+4, r27	; 0x04
     5bc:	11 c0       	rjmp	.+34     	; 0x5e0 <bmp280GetPressure+0x2ec>
	}
	else
	{
		p = (p / (unsigned long)var1) * 2;
     5be:	a4 01       	movw	r20, r8
     5c0:	93 01       	movw	r18, r6
     5c2:	cf d4       	rcall	.+2462   	; 0xf62 <__udivmodsi4>
     5c4:	82 2f       	mov	r24, r18
     5c6:	93 2f       	mov	r25, r19
     5c8:	a4 2f       	mov	r26, r20
     5ca:	b5 2f       	mov	r27, r21
     5cc:	9c 01       	movw	r18, r24
     5ce:	ad 01       	movw	r20, r26
     5d0:	22 0f       	add	r18, r18
     5d2:	33 1f       	adc	r19, r19
     5d4:	44 1f       	adc	r20, r20
     5d6:	55 1f       	adc	r21, r21
     5d8:	29 83       	std	Y+1, r18	; 0x01
     5da:	3a 83       	std	Y+2, r19	; 0x02
     5dc:	4b 83       	std	Y+3, r20	; 0x03
     5de:	5c 83       	std	Y+4, r21	; 0x04
	}

	var1 = (((long) dig_P9) * ((long) (((p >> 3) * (p >> 3)) >> 13))) >> 12;
     5e0:	87 e1       	ldi	r24, 0x17	; 23
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	e8 d4       	rcall	.+2512   	; 0xfb6 <__eerd_word_tn85>
     5e6:	3c 01       	movw	r6, r24
     5e8:	29 80       	ldd	r2, Y+1	; 0x01
     5ea:	3a 80       	ldd	r3, Y+2	; 0x02
     5ec:	4b 80       	ldd	r4, Y+3	; 0x03
     5ee:	5c 80       	ldd	r5, Y+4	; 0x04
     5f0:	68 94       	set
     5f2:	12 f8       	bld	r1, 2
     5f4:	56 94       	lsr	r5
     5f6:	47 94       	ror	r4
     5f8:	37 94       	ror	r3
     5fa:	27 94       	ror	r2
     5fc:	16 94       	lsr	r1
     5fe:	d1 f7       	brne	.-12     	; 0x5f4 <bmp280GetPressure+0x300>
	var2 = (((long)(p >> 2)) * ((long) dig_P8)) >> 13;
     600:	85 e1       	ldi	r24, 0x15	; 21
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	d8 d4       	rcall	.+2480   	; 0xfb6 <__eerd_word_tn85>
     606:	7c 01       	movw	r14, r24

	p = (unsigned long)((long)p + ((var1 + var2 + dig_P7) >> 4));
     608:	83 e1       	ldi	r24, 0x13	; 19
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	d4 d4       	rcall	.+2472   	; 0xfb6 <__eerd_word_tn85>
     60e:	5c 01       	movw	r10, r24
     610:	69 81       	ldd	r22, Y+1	; 0x01
     612:	7a 81       	ldd	r23, Y+2	; 0x02
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	96 95       	lsr	r25
     61a:	87 95       	ror	r24
     61c:	77 95       	ror	r23
     61e:	67 95       	ror	r22
     620:	96 95       	lsr	r25
     622:	87 95       	ror	r24
     624:	77 95       	ror	r23
     626:	67 95       	ror	r22
     628:	00 27       	eor	r16, r16
     62a:	f7 fc       	sbrc	r15, 7
     62c:	00 95       	com	r16
     62e:	10 2f       	mov	r17, r16
     630:	a8 01       	movw	r20, r16
     632:	97 01       	movw	r18, r14
     634:	71 d4       	rcall	.+2274   	; 0xf18 <__mulsi3>
     636:	7b 01       	movw	r14, r22
     638:	8c 01       	movw	r16, r24
     63a:	0d 2e       	mov	r0, r29
     63c:	dd e0       	ldi	r29, 0x0D	; 13
     63e:	15 95       	asr	r17
     640:	07 95       	ror	r16
     642:	f7 94       	ror	r15
     644:	e7 94       	ror	r14
     646:	da 95       	dec	r29
     648:	d1 f7       	brne	.-12     	; 0x63e <bmp280GetPressure+0x34a>
     64a:	d0 2d       	mov	r29, r0
     64c:	cc 24       	eor	r12, r12
     64e:	b7 fc       	sbrc	r11, 7
     650:	c0 94       	com	r12
     652:	dc 2c       	mov	r13, r12
     654:	ea 0c       	add	r14, r10
     656:	fb 1c       	adc	r15, r11
     658:	0c 1d       	adc	r16, r12
     65a:	1d 1d       	adc	r17, r13
     65c:	c2 01       	movw	r24, r4
     65e:	b1 01       	movw	r22, r2
     660:	a2 01       	movw	r20, r4
     662:	91 01       	movw	r18, r2
     664:	59 d4       	rcall	.+2226   	; 0xf18 <__mulsi3>
     666:	05 2e       	mov	r0, r21
     668:	5d e0       	ldi	r21, 0x0D	; 13
     66a:	96 95       	lsr	r25
     66c:	87 95       	ror	r24
     66e:	77 95       	ror	r23
     670:	67 95       	ror	r22
     672:	5a 95       	dec	r21
     674:	d1 f7       	brne	.-12     	; 0x66a <bmp280GetPressure+0x376>
     676:	50 2d       	mov	r21, r0
     678:	88 24       	eor	r8, r8
     67a:	77 fc       	sbrc	r7, 7
     67c:	80 94       	com	r8
     67e:	98 2c       	mov	r9, r8
     680:	a4 01       	movw	r20, r8
     682:	93 01       	movw	r18, r6
     684:	49 d4       	rcall	.+2194   	; 0xf18 <__mulsi3>
     686:	05 2e       	mov	r0, r21
     688:	5c e0       	ldi	r21, 0x0C	; 12
     68a:	95 95       	asr	r25
     68c:	87 95       	ror	r24
     68e:	77 95       	ror	r23
     690:	67 95       	ror	r22
     692:	5a 95       	dec	r21
     694:	d1 f7       	brne	.-12     	; 0x68a <bmp280GetPressure+0x396>
     696:	50 2d       	mov	r21, r0
     698:	e6 0e       	add	r14, r22
     69a:	f7 1e       	adc	r15, r23
     69c:	08 1f       	adc	r16, r24
     69e:	19 1f       	adc	r17, r25
     6a0:	68 94       	set
     6a2:	13 f8       	bld	r1, 3
     6a4:	15 95       	asr	r17
     6a6:	07 95       	ror	r16
     6a8:	f7 94       	ror	r15
     6aa:	e7 94       	ror	r14
     6ac:	16 94       	lsr	r1
     6ae:	d1 f7       	brne	.-12     	; 0x6a4 <bmp280GetPressure+0x3b0>
     6b0:	29 81       	ldd	r18, Y+1	; 0x01
     6b2:	3a 81       	ldd	r19, Y+2	; 0x02
     6b4:	4b 81       	ldd	r20, Y+3	; 0x03
     6b6:	5c 81       	ldd	r21, Y+4	; 0x04
     6b8:	2e 0d       	add	r18, r14
     6ba:	3f 1d       	adc	r19, r15
     6bc:	40 1f       	adc	r20, r16
     6be:	51 1f       	adc	r21, r17
	
	return p;
     6c0:	62 2f       	mov	r22, r18
     6c2:	73 2f       	mov	r23, r19
     6c4:	84 2f       	mov	r24, r20
     6c6:	95 2f       	mov	r25, r21
     6c8:	61 96       	adiw	r28, 0x11	; 17
     6ca:	0f b6       	in	r0, 0x3f	; 63
     6cc:	f8 94       	cli
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	cf 90       	pop	r12
     6e4:	bf 90       	pop	r11
     6e6:	af 90       	pop	r10
     6e8:	9f 90       	pop	r9
     6ea:	8f 90       	pop	r8
     6ec:	7f 90       	pop	r7
     6ee:	6f 90       	pop	r6
     6f0:	5f 90       	pop	r5
     6f2:	4f 90       	pop	r4
     6f4:	3f 90       	pop	r3
     6f6:	2f 90       	pop	r2
     6f8:	08 95       	ret

000006fa <bmp280GetTemp>:
}

//must read temp before reading pressure
//temp is stored as 3 bytes, (0xFA-0xFC)
long bmp280GetTemp()
{
     6fa:	2f 92       	push	r2
     6fc:	3f 92       	push	r3
     6fe:	4f 92       	push	r4
     700:	5f 92       	push	r5
     702:	6f 92       	push	r6
     704:	7f 92       	push	r7
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
	//Keil long = 4 bytes, int = 2
	long adc_T, var1, var2;
	short T;
	
	i2c_start();
     71e:	47 d1       	rcall	.+654    	; 0x9ae <i2c_start>
	i2c_device_id(bmp280, 0);
     720:	87 e7       	ldi	r24, 0x77	; 119
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	6e d1       	rcall	.+732    	; 0xa02 <i2c_device_id>

	i2c_write(0xFA);
     726:	8a ef       	ldi	r24, 0xFA	; 250
     728:	10 d2       	rcall	.+1056   	; 0xb4a <i2c_write>

	i2c_start();
     72a:	41 d1       	rcall	.+642    	; 0x9ae <i2c_start>
	
	i2c_device_id(bmp280, 1);
     72c:	87 e7       	ldi	r24, 0x77	; 119
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	68 d1       	rcall	.+720    	; 0xa02 <i2c_device_id>
	
	//shove temperature data into a 4 byte variable
	adc_T = i2c_read(0);
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	c2 d1       	rcall	.+900    	; 0xaba <i2c_read>
     736:	a8 2e       	mov	r10, r24
     738:	bb 24       	eor	r11, r11
     73a:	cc 24       	eor	r12, r12
     73c:	dd 24       	eor	r13, r13
	adc_T <<= 8;
     73e:	dc 2c       	mov	r13, r12
     740:	cb 2c       	mov	r12, r11
     742:	ba 2c       	mov	r11, r10
     744:	aa 24       	eor	r10, r10
	adc_T |= i2c_read(0);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	b8 d1       	rcall	.+880    	; 0xaba <i2c_read>
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	a0 e0       	ldi	r26, 0x00	; 0
     74e:	b0 e0       	ldi	r27, 0x00	; 0
     750:	a8 2a       	or	r10, r24
     752:	b9 2a       	or	r11, r25
     754:	ca 2a       	or	r12, r26
     756:	db 2a       	or	r13, r27
	adc_T <<= 8;
     758:	dc 2c       	mov	r13, r12
     75a:	cb 2c       	mov	r12, r11
     75c:	ba 2c       	mov	r11, r10
     75e:	aa 24       	eor	r10, r10
	adc_T |= i2c_read(1);
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	ab d1       	rcall	.+854    	; 0xaba <i2c_read>
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	a0 e0       	ldi	r26, 0x00	; 0
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	a8 2a       	or	r10, r24
     76c:	b9 2a       	or	r11, r25
     76e:	ca 2a       	or	r12, r26
     770:	db 2a       	or	r13, r27
	i2c_stop();
     772:	32 d1       	rcall	.+612    	; 0x9d8 <i2c_stop>
	//conversion formula takes 20 bits
	adc_T >>= 4;

	//32bit-fixed point formula from BMP280 documentation -pg45-46 (8.2)

	var1 = ((((adc_T>>3) - ((long)dig_T1<<1))) * ((long)dig_T2)) >> 11;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	1e d4       	rcall	.+2108   	; 0xfb6 <__eerd_word_tn85>
     77a:	1c 01       	movw	r2, r24
     77c:	44 24       	eor	r4, r4
     77e:	55 24       	eor	r5, r5
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	18 d4       	rcall	.+2096   	; 0xfb6 <__eerd_word_tn85>
     786:	ec 01       	movw	r28, r24
	var2  = (((((adc_T>>4) - ((long)dig_T1)) * ((adc_T>>4)
     788:	11 27       	eor	r17, r17
     78a:	d7 fc       	sbrc	r13, 7
     78c:	1a 95       	dec	r17
     78e:	0d 2d       	mov	r16, r13
     790:	fc 2c       	mov	r15, r12
     792:	eb 2c       	mov	r14, r11
     794:	e2 18       	sub	r14, r2
     796:	f3 08       	sbc	r15, r3
     798:	04 09       	sbc	r16, r4
     79a:	15 09       	sbc	r17, r5
     79c:	85 e0       	ldi	r24, 0x05	; 5
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0a d4       	rcall	.+2068   	; 0xfb6 <__eerd_word_tn85>
     7a2:	3c 01       	movw	r6, r24
		- ((long)dig_T1))) >> 12) * ((long)dig_T3)) >> 14;

	t_fine = var1+var2;
     7a4:	c8 01       	movw	r24, r16
     7a6:	b7 01       	movw	r22, r14
     7a8:	a8 01       	movw	r20, r16
     7aa:	97 01       	movw	r18, r14
     7ac:	b5 d3       	rcall	.+1898   	; 0xf18 <__mulsi3>
     7ae:	05 2e       	mov	r0, r21
     7b0:	5c e0       	ldi	r21, 0x0C	; 12
     7b2:	95 95       	asr	r25
     7b4:	87 95       	ror	r24
     7b6:	77 95       	ror	r23
     7b8:	67 95       	ror	r22
     7ba:	5a 95       	dec	r21
     7bc:	d1 f7       	brne	.-12     	; 0x7b2 <bmp280GetTemp+0xb8>
     7be:	50 2d       	mov	r21, r0
     7c0:	88 24       	eor	r8, r8
     7c2:	77 fc       	sbrc	r7, 7
     7c4:	80 94       	com	r8
     7c6:	98 2c       	mov	r9, r8
     7c8:	a4 01       	movw	r20, r8
     7ca:	93 01       	movw	r18, r6
     7cc:	a5 d3       	rcall	.+1866   	; 0xf18 <__mulsi3>
     7ce:	7b 01       	movw	r14, r22
     7d0:	8c 01       	movw	r16, r24
     7d2:	0d 2e       	mov	r0, r29
     7d4:	de e0       	ldi	r29, 0x0E	; 14
     7d6:	15 95       	asr	r17
     7d8:	07 95       	ror	r16
     7da:	f7 94       	ror	r15
     7dc:	e7 94       	ror	r14
     7de:	da 95       	dec	r29
     7e0:	d1 f7       	brne	.-12     	; 0x7d6 <bmp280GetTemp+0xdc>
     7e2:	d0 2d       	mov	r29, r0
     7e4:	68 94       	set
     7e6:	16 f8       	bld	r1, 6
     7e8:	d5 94       	asr	r13
     7ea:	c7 94       	ror	r12
     7ec:	b7 94       	ror	r11
     7ee:	a7 94       	ror	r10
     7f0:	16 94       	lsr	r1
     7f2:	d1 f7       	brne	.-12     	; 0x7e8 <bmp280GetTemp+0xee>
     7f4:	22 0c       	add	r2, r2
     7f6:	33 1c       	adc	r3, r3
     7f8:	44 1c       	adc	r4, r4
     7fa:	55 1c       	adc	r5, r5
     7fc:	a2 18       	sub	r10, r2
     7fe:	b3 08       	sbc	r11, r3
     800:	c4 08       	sbc	r12, r4
     802:	d5 08       	sbc	r13, r5
     804:	9e 01       	movw	r18, r28
     806:	44 27       	eor	r20, r20
     808:	37 fd       	sbrc	r19, 7
     80a:	40 95       	com	r20
     80c:	54 2f       	mov	r21, r20
     80e:	c6 01       	movw	r24, r12
     810:	b5 01       	movw	r22, r10
     812:	82 d3       	rcall	.+1796   	; 0xf18 <__mulsi3>
     814:	05 2e       	mov	r0, r21
     816:	5b e0       	ldi	r21, 0x0B	; 11
     818:	95 95       	asr	r25
     81a:	87 95       	ror	r24
     81c:	77 95       	ror	r23
     81e:	67 95       	ror	r22
     820:	5a 95       	dec	r21
     822:	d1 f7       	brne	.-12     	; 0x818 <bmp280GetTemp+0x11e>
     824:	50 2d       	mov	r21, r0
     826:	e6 0e       	add	r14, r22
     828:	f7 1e       	adc	r15, r23
     82a:	08 1f       	adc	r16, r24
     82c:	19 1f       	adc	r17, r25
     82e:	e0 92 90 00 	sts	0x0090, r14
     832:	f0 92 91 00 	sts	0x0091, r15
     836:	00 93 92 00 	sts	0x0092, r16
     83a:	10 93 93 00 	sts	0x0093, r17
     83e:	a8 01       	movw	r20, r16
     840:	97 01       	movw	r18, r14
     842:	22 0f       	add	r18, r18
     844:	33 1f       	adc	r19, r19
     846:	44 1f       	adc	r20, r20
     848:	55 1f       	adc	r21, r21
     84a:	22 0f       	add	r18, r18
     84c:	33 1f       	adc	r19, r19
     84e:	44 1f       	adc	r20, r20
     850:	55 1f       	adc	r21, r21
     852:	2e 0d       	add	r18, r14
     854:	3f 1d       	adc	r19, r15
     856:	40 1f       	adc	r20, r16
     858:	51 1f       	adc	r21, r17
     85a:	20 58       	subi	r18, 0x80	; 128
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
     85e:	4f 4f       	sbci	r20, 0xFF	; 255
     860:	5f 4f       	sbci	r21, 0xFF	; 255
     862:	23 2f       	mov	r18, r19
     864:	34 2f       	mov	r19, r20
     866:	45 2f       	mov	r20, r21
     868:	55 27       	eor	r21, r21
     86a:	47 fd       	sbrc	r20, 7
     86c:	5a 95       	dec	r21
     86e:	44 27       	eor	r20, r20
     870:	37 fd       	sbrc	r19, 7
     872:	40 95       	com	r20
     874:	54 2f       	mov	r21, r20
	T = (t_fine*5+128) >> 8;

	return (T);
}
     876:	62 2f       	mov	r22, r18
     878:	73 2f       	mov	r23, r19
     87a:	84 2f       	mov	r24, r20
     87c:	95 2f       	mov	r25, r21
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	ff 90       	pop	r15
     888:	ef 90       	pop	r14
     88a:	df 90       	pop	r13
     88c:	cf 90       	pop	r12
     88e:	bf 90       	pop	r11
     890:	af 90       	pop	r10
     892:	9f 90       	pop	r9
     894:	8f 90       	pop	r8
     896:	7f 90       	pop	r7
     898:	6f 90       	pop	r6
     89a:	5f 90       	pop	r5
     89c:	4f 90       	pop	r4
     89e:	3f 90       	pop	r3
     8a0:	2f 90       	pop	r2
     8a2:	08 95       	ret

000008a4 <bmpCalibration>:

//global variable to store value needed for pressure measurement
long t_fine = 0;

void bmpCalibration()
{
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	df 93       	push	r29
     8b6:	cf 93       	push	r28
     8b8:	cd b7       	in	r28, 0x3d	; 61
     8ba:	de b7       	in	r29, 0x3e	; 62
     8bc:	68 97       	sbiw	r28, 0x18	; 24
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
	unsigned char i;
	uint16_t* j = (uint16_t*)0;
	unsigned short arr[12];
	//short temp;	//stores 2 byte calibration data
	
	i2c_start();
     8c8:	72 d0       	rcall	.+228    	; 0x9ae <i2c_start>
	
	i2c_device_id(bmp280, 0);
     8ca:	87 e7       	ldi	r24, 0x77	; 119
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	99 d0       	rcall	.+306    	; 0xa02 <i2c_device_id>
	
	i2c_write(0x88);	//start of calibration data
     8d0:	88 e8       	ldi	r24, 0x88	; 136
     8d2:	3b d1       	rcall	.+630    	; 0xb4a <i2c_write>
	
	//quick start
	i2c_start();
     8d4:	6c d0       	rcall	.+216    	; 0x9ae <i2c_start>
	i2c_device_id(bmp280, 1);
     8d6:	87 e7       	ldi	r24, 0x77	; 119
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	93 d0       	rcall	.+294    	; 0xa02 <i2c_device_id>
     8dc:	6e 01       	movw	r12, r28
     8de:	08 94       	sec
     8e0:	c1 1c       	adc	r12, r1
     8e2:	d1 1c       	adc	r13, r1
     8e4:	76 01       	movw	r14, r12
	
	for(i = 0; i < 12; i++)	//write calibration values to EEPROM or return pointer?
     8e6:	0f 2e       	mov	r0, r31
     8e8:	f9 e1       	ldi	r31, 0x19	; 25
     8ea:	af 2e       	mov	r10, r31
     8ec:	bb 24       	eor	r11, r11
     8ee:	f0 2d       	mov	r31, r0
     8f0:	ac 0e       	add	r10, r28
     8f2:	bd 1e       	adc	r11, r29
	{
		arr[i] = i2c_read(0);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	e1 d0       	rcall	.+450    	; 0xaba <i2c_read>
     8f8:	18 2f       	mov	r17, r24
		arr[i] <<= 8;
		arr[i] |= i2c_read(0);
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	de d0       	rcall	.+444    	; 0xaba <i2c_read>
		arr[i] = (arr[i] >> 8) | (arr[i] << 8);
     8fe:	00 e0       	ldi	r16, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	80 2b       	or	r24, r16
     904:	91 2b       	or	r25, r17
     906:	f7 01       	movw	r30, r14
     908:	90 83       	st	Z, r25
     90a:	81 83       	std	Z+1, r24	; 0x01
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	e8 0e       	add	r14, r24
     912:	f9 1e       	adc	r15, r25
	
	//quick start
	i2c_start();
	i2c_device_id(bmp280, 1);
	
	for(i = 0; i < 12; i++)	//write calibration values to EEPROM or return pointer?
     914:	ea 14       	cp	r14, r10
     916:	fb 04       	cpc	r15, r11
     918:	69 f7       	brne	.-38     	; 0x8f4 <bmpCalibration+0x50>
		arr[i] = i2c_read(0);
		arr[i] <<= 8;
		arr[i] |= i2c_read(0);
		arr[i] = (arr[i] >> 8) | (arr[i] << 8);
	}
	i2c_read(1);
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	ce d0       	rcall	.+412    	; 0xaba <i2c_read>
	
	//arr[sizeof(arr)] = i2c_read(1);
	
	i2c_stop();
     91e:	5c d0       	rcall	.+184    	; 0x9d8 <i2c_stop>
     920:	01 e0       	ldi	r16, 0x01	; 1
     922:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i = 0, j = (uint16_t *)1 ; i < 12; i++)
	{
		eeprom_write_word((uint16_t *)j, arr[i]);
		j++;
		while(!eeprom_is_ready());	//wait for eeprom to write data
     924:	0f 2e       	mov	r0, r31
     926:	fc e3       	ldi	r31, 0x3C	; 60
     928:	ef 2e       	mov	r14, r31
     92a:	ff 24       	eor	r15, r15
     92c:	f0 2d       	mov	r31, r0
	
	i2c_stop();
	
	for(i = 0, j = (uint16_t *)1 ; i < 12; i++)
	{
		eeprom_write_word((uint16_t *)j, arr[i]);
     92e:	f6 01       	movw	r30, r12
     930:	60 81       	ld	r22, Z
     932:	71 81       	ldd	r23, Z+1	; 0x01
     934:	c8 01       	movw	r24, r16
     936:	52 d3       	rcall	.+1700   	; 0xfdc <__eewr_word_tn85>
		j++;
     938:	0e 5f       	subi	r16, 0xFE	; 254
     93a:	1f 4f       	sbci	r17, 0xFF	; 255
		while(!eeprom_is_ready());	//wait for eeprom to write data
     93c:	f7 01       	movw	r30, r14
     93e:	80 81       	ld	r24, Z
     940:	81 fd       	sbrc	r24, 1
     942:	fc cf       	rjmp	.-8      	; 0x93c <bmpCalibration+0x98>
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	c8 0e       	add	r12, r24
     94a:	d9 1e       	adc	r13, r25
	
	//arr[sizeof(arr)] = i2c_read(1);
	
	i2c_stop();
	
	for(i = 0, j = (uint16_t *)1 ; i < 12; i++)
     94c:	09 31       	cpi	r16, 0x19	; 25
     94e:	11 05       	cpc	r17, r1
     950:	71 f7       	brne	.-36     	; 0x92e <bmpCalibration+0x8a>
	{
		eeprom_write_word((uint16_t *)j, arr[i]);
		j++;
		while(!eeprom_is_ready());	//wait for eeprom to write data
	}
}
     952:	68 96       	adiw	r28, 0x18	; 24
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	cf 91       	pop	r28
     960:	df 91       	pop	r29
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	08 95       	ret

00000974 <init_i2c>:

#include "i2c.h"

void init_i2c()
{
	DDRB |= (1 << PB0);	// Set SDA as output
     974:	e7 e3       	ldi	r30, 0x37	; 55
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	81 60       	ori	r24, 0x01	; 1
     97c:	80 83       	st	Z, r24
	DDRB |= (1 << PB2);	// Set SCL as output
     97e:	80 81       	ld	r24, Z
     980:	84 60       	ori	r24, 0x04	; 4
     982:	80 83       	st	Z, r24
	
	SDA_HIGH;
     984:	e8 e3       	ldi	r30, 0x38	; 56
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	81 60       	ori	r24, 0x01	; 1
     98c:	80 83       	st	Z, r24
	SCL_HIGH;
     98e:	80 81       	ld	r24, Z
     990:	84 60       	ori	r24, 0x04	; 4
     992:	80 83       	st	Z, r24
}
     994:	08 95       	ret

00000996 <i2c_clock>:

void i2c_clock()
{
	SCL_HIGH;
     996:	e8 e3       	ldi	r30, 0x38	; 56
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	84 60       	ori	r24, 0x04	; 4
     99e:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	8a 95       	dec	r24
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <i2c_clock+0xc>
	_delay_us(TIME);
	SCL_LOW;
     9a6:	80 81       	ld	r24, Z
     9a8:	8b 7f       	andi	r24, 0xFB	; 251
     9aa:	80 83       	st	Z, r24
}
     9ac:	08 95       	ret

000009ae <i2c_start>:

void i2c_start()
{
	//Clock stays high and SDA pulled low
	SDA_HIGH;
     9ae:	e8 e3       	ldi	r30, 0x38	; 56
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	81 60       	ori	r24, 0x01	; 1
     9b6:	80 83       	st	Z, r24
	SCL_HIGH;
     9b8:	80 81       	ld	r24, Z
     9ba:	84 60       	ori	r24, 0x04	; 4
     9bc:	80 83       	st	Z, r24
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	89 2f       	mov	r24, r25
     9c2:	8a 95       	dec	r24
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <i2c_start+0x14>

	_delay_us(TIME);
	SDA_LOW;
     9c6:	80 81       	ld	r24, Z
     9c8:	8e 7f       	andi	r24, 0xFE	; 254
     9ca:	80 83       	st	Z, r24
     9cc:	9a 95       	dec	r25
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <i2c_start+0x1e>
	_delay_us(TIME);
	SCL_LOW;
     9d0:	80 81       	ld	r24, Z
     9d2:	8b 7f       	andi	r24, 0xFB	; 251
     9d4:	80 83       	st	Z, r24
}
     9d6:	08 95       	ret

000009d8 <i2c_stop>:

void i2c_stop()
{
	//clock goes low before data
	SCL_LOW;
     9d8:	e8 e3       	ldi	r30, 0x38	; 56
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	8b 7f       	andi	r24, 0xFB	; 251
     9e0:	80 83       	st	Z, r24
	SDA_LOW;
     9e2:	80 81       	ld	r24, Z
     9e4:	8e 7f       	andi	r24, 0xFE	; 254
     9e6:	80 83       	st	Z, r24
     9e8:	93 e0       	ldi	r25, 0x03	; 3
     9ea:	89 2f       	mov	r24, r25
     9ec:	8a 95       	dec	r24
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <i2c_stop+0x14>
	_delay_us(TIME);

	SCL_HIGH;
     9f0:	80 81       	ld	r24, Z
     9f2:	84 60       	ori	r24, 0x04	; 4
     9f4:	80 83       	st	Z, r24
     9f6:	9a 95       	dec	r25
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <i2c_stop+0x1e>
	_delay_us(TIME);
	SDA_HIGH;
     9fa:	80 81       	ld	r24, Z
     9fc:	81 60       	ori	r24, 0x01	; 1
     9fe:	80 83       	st	Z, r24
}
     a00:	08 95       	ret

00000a02 <i2c_device_id>:

char i2c_device_id(volatile char id, volatile char rw)
{
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	df 93       	push	r29
     a0c:	cf 93       	push	r28
     a0e:	00 d0       	rcall	.+0      	; 0xa10 <i2c_device_id+0xe>
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	89 83       	std	Y+1, r24	; 0x01
     a16:	6a 83       	std	Y+2, r22	; 0x02
	char i, ACK;
	//id = 0x77;//0x76;//0x3C;//78;

	//check if valid i2c address
	if(id < 8 || id > 120)
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	88 30       	cpi	r24, 0x08	; 8
     a1c:	08 f4       	brcc	.+2      	; 0xa20 <i2c_device_id+0x1e>
     a1e:	42 c0       	rjmp	.+132    	; 0xaa4 <i2c_device_id+0xa2>
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	89 37       	cpi	r24, 0x79	; 121
     a24:	08 f0       	brcs	.+2      	; 0xa28 <i2c_device_id+0x26>
     a26:	3e c0       	rjmp	.+124    	; 0xaa4 <i2c_device_id+0xa2>
     a28:	07 e0       	ldi	r16, 0x07	; 7
	{
		id <<= 1;
		if((id & 0x80))
			SDA_HIGH;
		else
			SDA_LOW;
     a2a:	0f 2e       	mov	r0, r31
     a2c:	f8 e3       	ldi	r31, 0x38	; 56
     a2e:	ef 2e       	mov	r14, r31
     a30:	ff 24       	eor	r15, r15
     a32:	f0 2d       	mov	r31, r0
		return 2;

	//Starting at 7 to avoid last bit
	for(i = 7; i > 0; i--)
	{
		id <<= 1;
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	88 0f       	add	r24, r24
     a38:	89 83       	std	Y+1, r24	; 0x01
		if((id & 0x80))
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	88 23       	and	r24, r24
     a3e:	2c f4       	brge	.+10     	; 0xa4a <i2c_device_id+0x48>
			SDA_HIGH;
     a40:	f7 01       	movw	r30, r14
     a42:	80 81       	ld	r24, Z
     a44:	81 60       	ori	r24, 0x01	; 1
     a46:	80 83       	st	Z, r24
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <i2c_device_id+0x50>
		else
			SDA_LOW;
     a4a:	f7 01       	movw	r30, r14
     a4c:	80 81       	ld	r24, Z
     a4e:	8e 7f       	andi	r24, 0xFE	; 254
     a50:	80 83       	st	Z, r24
		//SDA = id & 0x80;	//Sends a 1 or 0 to SDA

		//Pulses the clock
		i2c_clock();
     a52:	a1 df       	rcall	.-190    	; 0x996 <i2c_clock>
	//check if valid i2c address
	if(id < 8 || id > 120)
		return 2;

	//Starting at 7 to avoid last bit
	for(i = 7; i > 0; i--)
     a54:	01 50       	subi	r16, 0x01	; 1
     a56:	71 f7       	brne	.-36     	; 0xa34 <i2c_device_id+0x32>
		i2c_clock();
	}
	//8th bit. pulses the read/write bit
	//rw low for write and high for read

	if(rw == 1)
     a58:	8a 81       	ldd	r24, Y+2	; 0x02
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	31 f4       	brne	.+12     	; 0xa6a <i2c_device_id+0x68>
		SDA_HIGH;
     a5e:	e8 e3       	ldi	r30, 0x38	; 56
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 81       	ld	r24, Z
     a64:	81 60       	ori	r24, 0x01	; 1
     a66:	80 83       	st	Z, r24
     a68:	05 c0       	rjmp	.+10     	; 0xa74 <i2c_device_id+0x72>
	else
		SDA_LOW;
     a6a:	e8 e3       	ldi	r30, 0x38	; 56
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	8e 7f       	andi	r24, 0xFE	; 254
     a72:	80 83       	st	Z, r24
	i2c_clock();
     a74:	90 df       	rcall	.-224    	; 0x996 <i2c_clock>
	//SDA = rw;
	
	//9th bit
	//set SDA to input
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
     a76:	0f 2e       	mov	r0, r31
     a78:	f7 e3       	ldi	r31, 0x37	; 55
     a7a:	ef 2e       	mov	r14, r31
     a7c:	ff 24       	eor	r15, r15
     a7e:	f0 2d       	mov	r31, r0
     a80:	f7 01       	movw	r30, r14
     a82:	80 81       	ld	r24, Z
     a84:	8e 7f       	andi	r24, 0xFE	; 254
     a86:	80 83       	st	Z, r24
	SDA_HIGH;//PORTB |= (1 << PB0);	//enable pull up; turn on pin
     a88:	e8 e3       	ldi	r30, 0x38	; 56
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	80 81       	ld	r24, Z
     a8e:	81 60       	ori	r24, 0x01	; 1
     a90:	80 83       	st	Z, r24
	ACK = (PINB & (1 << PB0));	//read pin
     a92:	86 b3       	in	r24, 0x16	; 22
     a94:	18 2f       	mov	r17, r24
     a96:	11 70       	andi	r17, 0x01	; 1

	i2c_clock();
     a98:	7e df       	rcall	.-260    	; 0x996 <i2c_clock>
	
	DDRB |= (1 << PB0);	//set pin0 to output
     a9a:	f7 01       	movw	r30, r14
     a9c:	80 81       	ld	r24, Z
     a9e:	81 60       	ori	r24, 0x01	; 1
     aa0:	80 83       	st	Z, r24
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <i2c_device_id+0xa4>

	return ACK;
     aa4:	12 e0       	ldi	r17, 0x02	; 2
}
     aa6:	81 2f       	mov	r24, r17
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	cf 91       	pop	r28
     aae:	df 91       	pop	r29
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	08 95       	ret

00000aba <i2c_read>:

unsigned char i2c_read(char last_byte)
{
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	d8 2e       	mov	r13, r24
	char i = 0, byte = 0;
	SDA_HIGH;
     aca:	e8 e3       	ldi	r30, 0x38	; 56
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	81 60       	ori	r24, 0x01	; 1
     ad2:	80 83       	st	Z, r24
	
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
     ad4:	a7 e3       	ldi	r26, 0x37	; 55
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	8c 91       	ld	r24, X
     ada:	8e 7f       	andi	r24, 0xFE	; 254
     adc:	8c 93       	st	X, r24
	SDA_HIGH;				//enable pull up; turn on pin
     ade:	80 81       	ld	r24, Z
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	80 83       	st	Z, r24
     ae4:	18 e0       	ldi	r17, 0x08	; 8
     ae6:	00 e0       	ldi	r16, 0x00	; 0
	
	for(i = 8; i > 0; i--)
	{	
		SCL_HIGH;
     ae8:	c8 e3       	ldi	r28, 0x38	; 56
     aea:	d0 e0       	ldi	r29, 0x00	; 0
		byte <<= 1;

		//read pin
		
		//OR byte bit with SDA
		byte |= (PINB & (1<<PB0));
     aec:	0f 2e       	mov	r0, r31
     aee:	f6 e3       	ldi	r31, 0x36	; 54
     af0:	ef 2e       	mov	r14, r31
     af2:	ff 24       	eor	r15, r15
     af4:	f0 2d       	mov	r31, r0
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;				//enable pull up; turn on pin
	
	for(i = 8; i > 0; i--)
	{	
		SCL_HIGH;
     af6:	88 81       	ld	r24, Y
     af8:	84 60       	ori	r24, 0x04	; 4
     afa:	88 83       	st	Y, r24
		byte <<= 1;

		//read pin
		
		//OR byte bit with SDA
		byte |= (PINB & (1<<PB0));
     afc:	f7 01       	movw	r30, r14
     afe:	80 81       	ld	r24, Z
     b00:	90 2f       	mov	r25, r16
     b02:	99 0f       	add	r25, r25
     b04:	81 70       	andi	r24, 0x01	; 1
     b06:	09 2f       	mov	r16, r25
     b08:	08 2b       	or	r16, r24

		i2c_clock();
     b0a:	45 df       	rcall	.-374    	; 0x996 <i2c_clock>
	SDA_HIGH;
	
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;				//enable pull up; turn on pin
	
	for(i = 8; i > 0; i--)
     b0c:	11 50       	subi	r17, 0x01	; 1
     b0e:	99 f7       	brne	.-26     	; 0xaf6 <i2c_read+0x3c>
		//OR byte bit with SDA
		byte |= (PINB & (1<<PB0));

		i2c_clock();
	}
	DDRB |= (1 << PB0);	//set pin0 to output
     b10:	e7 e3       	ldi	r30, 0x37	; 55
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	81 60       	ori	r24, 0x01	; 1
     b18:	80 83       	st	Z, r24
	
	//9th bit master acknowledges data transfer or indicates last byte
	if(last_byte == 1)
     b1a:	f1 e0       	ldi	r31, 0x01	; 1
     b1c:	df 16       	cp	r13, r31
     b1e:	31 f4       	brne	.+12     	; 0xb2c <i2c_read+0x72>
		SDA_HIGH;
     b20:	e8 e3       	ldi	r30, 0x38	; 56
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	80 83       	st	Z, r24
     b2a:	05 c0       	rjmp	.+10     	; 0xb36 <i2c_read+0x7c>
	else
		SDA_LOW;
     b2c:	e8 e3       	ldi	r30, 0x38	; 56
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	8e 7f       	andi	r24, 0xFE	; 254
     b34:	80 83       	st	Z, r24
	//SDA = last_byte;
	
	i2c_clock();
     b36:	2f df       	rcall	.-418    	; 0x996 <i2c_clock>
	
	return byte;
}
     b38:	80 2f       	mov	r24, r16
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	08 95       	ret

00000b4a <i2c_write>:

void i2c_write(unsigned char byte)
{
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	08 2f       	mov	r16, r24
     b54:	18 e0       	ldi	r17, 0x08	; 8
	{
		//bit shifts data by i and ANDs it to convert it to boolean
		if((byte & 0x80))
			SDA_HIGH;
		else
			SDA_LOW;
     b56:	c8 e3       	ldi	r28, 0x38	; 56
     b58:	d0 e0       	ldi	r29, 0x00	; 0
{
	char i;
	for(i = 8; i > 0; i--)
	{
		//bit shifts data by i and ANDs it to convert it to boolean
		if((byte & 0x80))
     b5a:	00 23       	and	r16, r16
     b5c:	24 f4       	brge	.+8      	; 0xb66 <i2c_write+0x1c>
			SDA_HIGH;
     b5e:	88 81       	ld	r24, Y
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	88 83       	st	Y, r24
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <i2c_write+0x22>
		else
			SDA_LOW;
     b66:	88 81       	ld	r24, Y
     b68:	8e 7f       	andi	r24, 0xFE	; 254
     b6a:	88 83       	st	Y, r24
		//SDA = byte & 0x80;	//Sends a 1 or 0 to SDA
		
		//pulse the clock
		i2c_clock();
     b6c:	14 df       	rcall	.-472    	; 0x996 <i2c_clock>
}

void i2c_write(unsigned char byte)
{
	char i;
	for(i = 8; i > 0; i--)
     b6e:	11 50       	subi	r17, 0x01	; 1
     b70:	11 f0       	breq	.+4      	; 0xb76 <i2c_write+0x2c>
		//SDA = byte & 0x80;	//Sends a 1 or 0 to SDA
		
		//pulse the clock
		i2c_clock();
		
		byte <<= 1;
     b72:	00 0f       	add	r16, r16
     b74:	f2 cf       	rjmp	.-28     	; 0xb5a <i2c_write+0x10>
	}
	
	//set to high to detect ack bit
	SDA_HIGH;
     b76:	e8 e3       	ldi	r30, 0x38	; 56
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	81 60       	ori	r24, 0x01	; 1
     b7e:	80 83       	st	Z, r24
	
	i2c_clock();
     b80:	0a df       	rcall	.-492    	; 0x996 <i2c_clock>

}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <adcInit>:
}

void adcInit()
{
	//VCC ref, PB4 input, ADLAR = 1
	ADMUX = (1 << MUX1);
     b8c:	e7 e2       	ldi	r30, 0x27	; 39
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);
     b94:	80 81       	ld	r24, Z
     b96:	80 62       	ori	r24, 0x20	; 32
     b98:	80 83       	st	Z, r24
			
	ADCSRA = (1 << ADEN);
     b9a:	e6 e2       	ldi	r30, 0x26	; 38
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 e8       	ldi	r24, 0x80	; 128
     ba0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2);
     ba2:	80 81       	ld	r24, Z
     ba4:	84 60       	ori	r24, 0x04	; 4
     ba6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
     ba8:	80 81       	ld	r24, Z
     baa:	82 60       	ori	r24, 0x02	; 2
     bac:	80 83       	st	Z, r24
	
}
     bae:	08 95       	ret

00000bb0 <battery>:
}

// 0 = empty
//4 = full
void battery()
{
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
	unsigned char convert;
	
	//get ADC
	ADCSRA |= (1 << ADSC);
     bb6:	e6 e2       	ldi	r30, 0x26	; 38
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 64       	ori	r24, 0x40	; 64
     bbe:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));	//wait till done
     bc0:	80 81       	ld	r24, Z
     bc2:	86 fd       	sbrc	r24, 6
     bc4:	fd cf       	rjmp	.-6      	; 0xbc0 <battery+0x10>
	
	oled_setpos(OLEDX - 6,0);
     bc6:	89 e7       	ldi	r24, 0x79	; 121
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	e1 d0       	rcall	.+450    	; 0xd8e <oled_setpos>

	//2V-3.3V
	if(ADCH < 255 && ADCH > 213)	//full
     bcc:	85 b1       	in	r24, 0x05	; 5
     bce:	8f 3f       	cpi	r24, 0xFF	; 255
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <battery+0x24>
     bd2:	85 b1       	in	r24, 0x05	; 5
		convert = 4;
		
	if(ADCH < 213 && ADCH > 192)	//75%
     bd4:	85 b1       	in	r24, 0x05	; 5
     bd6:	85 3d       	cpi	r24, 0xD5	; 213
     bd8:	28 f4       	brcc	.+10     	; 0xbe4 <battery+0x34>
     bda:	85 b1       	in	r24, 0x05	; 5
     bdc:	81 3c       	cpi	r24, 0xC1	; 193
     bde:	10 f0       	brcs	.+4      	; 0xbe4 <battery+0x34>
     be0:	23 e0       	ldi	r18, 0x03	; 3
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <battery+0x36>
     be4:	24 e0       	ldi	r18, 0x04	; 4
		convert = 3;
		
	if(ADCH < 192 && ADCH > 171)	//50%
     be6:	85 b1       	in	r24, 0x05	; 5
     be8:	80 3c       	cpi	r24, 0xC0	; 192
     bea:	20 f4       	brcc	.+8      	; 0xbf4 <battery+0x44>
     bec:	85 b1       	in	r24, 0x05	; 5
     bee:	8c 3a       	cpi	r24, 0xAC	; 172
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <battery+0x44>
     bf2:	22 e0       	ldi	r18, 0x02	; 2
		convert = 2;
	
	if(ADCH < 171 && ADCH > 150)	//25%
     bf4:	85 b1       	in	r24, 0x05	; 5
     bf6:	8b 3a       	cpi	r24, 0xAB	; 171
     bf8:	20 f4       	brcc	.+8      	; 0xc02 <battery+0x52>
     bfa:	85 b1       	in	r24, 0x05	; 5
     bfc:	87 39       	cpi	r24, 0x97	; 151
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <battery+0x52>
     c00:	21 e0       	ldi	r18, 0x01	; 1
		convert = 1;
	
	if(ADCH < 150)	//ded @2V
     c02:	85 b1       	in	r24, 0x05	; 5
     c04:	86 39       	cpi	r24, 0x96	; 150
     c06:	08 f4       	brcc	.+2      	; 0xc0a <battery+0x5a>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	c9 01       	movw	r24, r18
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	82 0f       	add	r24, r18
     c14:	93 1f       	adc	r25, r19
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	ec 01       	movw	r28, r24
     c1c:	c2 5e       	subi	r28, 0xE2	; 226
     c1e:	df 4f       	sbci	r29, 0xFF	; 255
     c20:	10 e0       	ldi	r17, 0x00	; 0
		convert = 0;

	for(char i = 0; i < 6; i++)
	{
		oled_data(pgm_read_byte(&oled_customChar[convert * 6 + i]));
     c22:	fe 01       	movw	r30, r28
     c24:	84 91       	lpm	r24, Z+
     c26:	99 d0       	rcall	.+306    	; 0xd5a <oled_data>
		convert = 1;
	
	if(ADCH < 150)	//ded @2V
		convert = 0;

	for(char i = 0; i < 6; i++)
     c28:	1f 5f       	subi	r17, 0xFF	; 255
     c2a:	21 96       	adiw	r28, 0x01	; 1
     c2c:	16 30       	cpi	r17, 0x06	; 6
     c2e:	c9 f7       	brne	.-14     	; 0xc22 <battery+0x72>
	{
		oled_data(pgm_read_byte(&oled_customChar[convert * 6 + i]));
	}
}
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	08 95       	ret

00000c38 <display>:
	0x8D, 0x14,		// Set DC-DC enable
	0xAF			// Display ON in normal mode
};

void display()
{
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
	//short bmpTemp;
	//char INTbmpTemp;
	unsigned long bmpPressure;
	
	bmp280GetTemp();
     c40:	5c dd       	rcall	.-1352   	; 0x6fa <bmp280GetTemp>
	//bmpTemp = bmp280GetTemp();
	//INTbmpTemp = bmpTemp / 100;
	bmpPressure = bmp280GetPressure();
     c42:	58 db       	rcall	.-2384   	; 0x2f4 <bmp280GetPressure>
     c44:	7b 01       	movw	r14, r22
     c46:	8c 01       	movw	r16, r24
	
	oled_setpos(0,1);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	a0 d0       	rcall	.+320    	; 0xd8e <oled_setpos>
	
	oled_write_string("Temperature: ");
     c4e:	80 e6       	ldi	r24, 0x60	; 96
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	11 d1       	rcall	.+546    	; 0xe76 <oled_write_string>
	//temp
	oled_write_string("*C");
     c54:	8e e6       	ldi	r24, 0x6E	; 110
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e d1       	rcall	.+540    	; 0xe76 <oled_write_string>
	
	oled_setpos(0,3);
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	63 e0       	ldi	r22, 0x03	; 3
     c5e:	97 d0       	rcall	.+302    	; 0xd8e <oled_setpos>
	
	oled_write_string("Humidity: ");
     c60:	81 e7       	ldi	r24, 0x71	; 113
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	08 d1       	rcall	.+528    	; 0xe76 <oled_write_string>
	//humdity
	oled_write_string("%RH");
     c66:	8c e7       	ldi	r24, 0x7C	; 124
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	05 d1       	rcall	.+522    	; 0xe76 <oled_write_string>
	oled_write_int((INTbmpTemp));
	oled_write_char('.');
	oled_write_int((bmpTemp % 100));
	*/
			
	oled_setpos(0,5);
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	65 e0       	ldi	r22, 0x05	; 5
     c70:	8e d0       	rcall	.+284    	; 0xd8e <oled_setpos>
	oled_write_string("Pressure: ");
     c72:	80 e8       	ldi	r24, 0x80	; 128
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	ff d0       	rcall	.+510    	; 0xe76 <oled_write_string>
	oled_write_int(bmpPressure / 1000);
     c78:	c8 01       	movw	r24, r16
     c7a:	b7 01       	movw	r22, r14
     c7c:	28 ee       	ldi	r18, 0xE8	; 232
     c7e:	33 e0       	ldi	r19, 0x03	; 3
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	6e d1       	rcall	.+732    	; 0xf62 <__udivmodsi4>
     c86:	82 2f       	mov	r24, r18
     c88:	e7 d0       	rcall	.+462    	; 0xe58 <oled_write_int>
	oled_write_int((bmpPressure % 1000) / 100);
     c8a:	c8 01       	movw	r24, r16
     c8c:	b7 01       	movw	r22, r14
     c8e:	28 ee       	ldi	r18, 0xE8	; 232
     c90:	33 e0       	ldi	r19, 0x03	; 3
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	65 d1       	rcall	.+714    	; 0xf62 <__udivmodsi4>
     c98:	24 e6       	ldi	r18, 0x64	; 100
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	60 d1       	rcall	.+704    	; 0xf62 <__udivmodsi4>
     ca2:	82 2f       	mov	r24, r18
     ca4:	d9 d0       	rcall	.+434    	; 0xe58 <oled_write_int>
	oled_write_char('.');
     ca6:	8e e2       	ldi	r24, 0x2E	; 46
     ca8:	a0 d0       	rcall	.+320    	; 0xdea <oled_write_char>
	if((bmpPressure % 100) < 10)
     caa:	c8 01       	movw	r24, r16
     cac:	b7 01       	movw	r22, r14
     cae:	24 e6       	ldi	r18, 0x64	; 100
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	55 d1       	rcall	.+682    	; 0xf62 <__udivmodsi4>
     cb8:	37 2f       	mov	r19, r23
     cba:	48 2f       	mov	r20, r24
     cbc:	59 2f       	mov	r21, r25
     cbe:	86 2f       	mov	r24, r22
     cc0:	93 2f       	mov	r25, r19
     cc2:	a4 2f       	mov	r26, r20
     cc4:	b5 2f       	mov	r27, r21
     cc6:	7c 01       	movw	r14, r24
     cc8:	8d 01       	movw	r16, r26
     cca:	8a e0       	ldi	r24, 0x0A	; 10
     ccc:	e8 16       	cp	r14, r24
     cce:	f1 04       	cpc	r15, r1
     cd0:	01 05       	cpc	r16, r1
     cd2:	11 05       	cpc	r17, r1
     cd4:	10 f4       	brcc	.+4      	; 0xcda <display+0xa2>
		oled_write_char('0');
     cd6:	80 e3       	ldi	r24, 0x30	; 48
     cd8:	88 d0       	rcall	.+272    	; 0xdea <oled_write_char>
	oled_write_int(bmpPressure % 100);	//add <10 check thing
     cda:	8e 2d       	mov	r24, r14
     cdc:	bd d0       	rcall	.+378    	; 0xe58 <oled_write_int>
	oled_write_string("HPa");
     cde:	8b e8       	ldi	r24, 0x8B	; 139
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	c9 d0       	rcall	.+402    	; 0xe76 <oled_write_string>
			
}
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	08 95       	ret

00000cee <main>:
	ADCSRA |= (1 << ADPS1);
	
}

int main(void)
{
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
	DDRB |= (1 << PB4); //set led to output
     cf6:	e7 e3       	ldi	r30, 0x37	; 55
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 61       	ori	r24, 0x10	; 16
     cfe:	80 83       	st	Z, r24
	
	adcInit();
     d00:	45 df       	rcall	.-374    	; 0xb8c <adcInit>
	init_i2c();
     d02:	38 de       	rcall	.-912    	; 0x974 <init_i2c>
     d04:	cc e3       	ldi	r28, 0x3C	; 60
     d06:	d0 e0       	ldi	r29, 0x00	; 0
	
	//blink();
	
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
     d08:	08 e5       	ldi	r16, 0x58	; 88
     d0a:	10 e0       	ldi	r17, 0x00	; 0
		oled_control(pgm_read_byte(&ssd1306_init_sequence[i]));
     d0c:	fe 01       	movw	r30, r28
     d0e:	84 91       	lpm	r24, Z+
     d10:	31 d0       	rcall	.+98     	; 0xd74 <oled_control>
     d12:	21 96       	adiw	r28, 0x01	; 1
	adcInit();
	init_i2c();
	
	//blink();
	
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
     d14:	c0 17       	cp	r28, r16
     d16:	d1 07       	cpc	r29, r17
     d18:	c9 f7       	brne	.-14     	; 0xd0c <main+0x1e>
		i2c_write(OLED_COMMAND);
		i2c_write(pgm_read_byte(&ssd1306_init_sequence[i]));
		*/
	}

	if(eeprom_read_byte((uint8_t*)0x00) == 0xFF)	//if new ATTINY
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	43 d1       	rcall	.+646    	; 0xfa6 <__eerd_byte_tn85>
     d20:	8f 3f       	cpi	r24, 0xFF	; 255
     d22:	29 f4       	brne	.+10     	; 0xd2e <main+0x40>
	{
		bmpCalibration();	//run calibration to save data in EEPROM
     d24:	bf dd       	rcall	.-1154   	; 0x8a4 <bmpCalibration>
		eeprom_write_byte(0, 0);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	49 d1       	rcall	.+658    	; 0xfc0 <__eewr_byte_tn85>
	}

	bmpReset();
     d2e:	d4 da       	rcall	.-2648   	; 0x2d8 <bmpReset>
	
	//setting up sampling parameters
	bmpSet(0x64, CONFIG); //standby time = 250ms, IIR filter =
     d30:	84 e6       	ldi	r24, 0x64	; 100
     d32:	65 ef       	ldi	r22, 0xF5	; 245
     d34:	c1 da       	rcall	.-2686   	; 0x2b8 <bmpSet>
	bmpSet(0xFF, CTRL_MEAS); //x16 temperature oversampling, x16 pressure measurement, normal mode
     d36:	8f ef       	ldi	r24, 0xFF	; 255
     d38:	64 ef       	ldi	r22, 0xF4	; 244
     d3a:	be da       	rcall	.-2692   	; 0x2b8 <bmpSet>

	oled_clear();
     d3c:	3b d0       	rcall	.+118    	; 0xdb4 <oled_clear>
    while(1)
    {
		battery();
		
		//while(1);
		display();
     d3e:	00 e1       	ldi	r16, 0x10	; 16
     d40:	17 e2       	ldi	r17, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d42:	c9 e1       	ldi	r28, 0x19	; 25
     d44:	d0 e0       	ldi	r29, 0x00	; 0

	oled_clear();

    while(1)
    {
		battery();
     d46:	34 df       	rcall	.-408    	; 0xbb0 <battery>
		
		//while(1);
		display();
     d48:	77 df       	rcall	.-274    	; 0xc38 <display>
     d4a:	98 01       	movw	r18, r16
     d4c:	ce 01       	movw	r24, r28
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <main+0x60>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d52:	21 50       	subi	r18, 0x01	; 1
     d54:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d56:	d1 f7       	brne	.-12     	; 0xd4c <main+0x5e>
     d58:	f6 cf       	rjmp	.-20     	; 0xd46 <main+0x58>

00000d5a <oled_data>:
}

/*send data to oled
*/
void oled_data(char data)
{
     d5a:	1f 93       	push	r17
     d5c:	18 2f       	mov	r17, r24
	//oled_checkposx();	//check if data in range
	
	i2c_start();
     d5e:	27 de       	rcall	.-946    	; 0x9ae <i2c_start>
	i2c_device_id(OLED, WRITE);
     d60:	8c e3       	ldi	r24, 0x3C	; 60
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	4e de       	rcall	.-868    	; 0xa02 <i2c_device_id>
	i2c_write(OLED_DATA);		//DATA byte
     d66:	80 e4       	ldi	r24, 0x40	; 64
     d68:	f0 de       	rcall	.-544    	; 0xb4a <i2c_write>
	i2c_write(data);
     d6a:	81 2f       	mov	r24, r17
     d6c:	ee de       	rcall	.-548    	; 0xb4a <i2c_write>
	i2c_stop();
     d6e:	34 de       	rcall	.-920    	; 0x9d8 <i2c_stop>
}
     d70:	1f 91       	pop	r17
     d72:	08 95       	ret

00000d74 <oled_control>:
}

/*send commands to oled
*/
void oled_control(char command)
{
     d74:	1f 93       	push	r17
     d76:	18 2f       	mov	r17, r24
	i2c_start();
     d78:	1a de       	rcall	.-972    	; 0x9ae <i2c_start>
	i2c_device_id(OLED, WRITE);
     d7a:	8c e3       	ldi	r24, 0x3C	; 60
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	41 de       	rcall	.-894    	; 0xa02 <i2c_device_id>
	i2c_write(OLED_COMMAND);		//control byte
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	e3 de       	rcall	.-570    	; 0xb4a <i2c_write>
	i2c_write(command);	
     d84:	81 2f       	mov	r24, r17
     d86:	e1 de       	rcall	.-574    	; 0xb4a <i2c_write>
	i2c_stop();
     d88:	27 de       	rcall	.-946    	; 0x9d8 <i2c_stop>
}
     d8a:	1f 91       	pop	r17
     d8c:	08 95       	ret

00000d8e <oled_setpos>:
*/
/*sets cursor position.
 ARGS: x = 0-127, y = 0-7
*/
void oled_setpos(char x, char y)
{
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	18 2f       	mov	r17, r24
     d94:	06 2f       	mov	r16, r22
	//add data verification
	oled_control(OLED_COLUMNADDR);
     d96:	81 e2       	ldi	r24, 0x21	; 33
     d98:	ed df       	rcall	.-38     	; 0xd74 <oled_control>
	oled_control(x);
     d9a:	81 2f       	mov	r24, r17
     d9c:	eb df       	rcall	.-42     	; 0xd74 <oled_control>
	oled_control(127);
     d9e:	8f e7       	ldi	r24, 0x7F	; 127
     da0:	e9 df       	rcall	.-46     	; 0xd74 <oled_control>
	
	oled_control(OLED_PAGEADDR);
     da2:	82 e2       	ldi	r24, 0x22	; 34
     da4:	e7 df       	rcall	.-50     	; 0xd74 <oled_control>
	oled_control(y);
     da6:	80 2f       	mov	r24, r16
     da8:	e5 df       	rcall	.-54     	; 0xd74 <oled_control>
	oled_control(7);
     daa:	87 e0       	ldi	r24, 0x07	; 7
     dac:	e3 df       	rcall	.-58     	; 0xd74 <oled_control>
}
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <oled_clear>:
}

/*clears the display with blank
*/
void oled_clear()
{
     db4:	ff 92       	push	r15
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
	unsigned char page, x;
	
	oled_setpos(0, 0);
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	e7 df       	rcall	.-50     	; 0xd8e <oled_setpos>
     dc0:	ff 24       	eor	r15, r15
	{
		for(x = 0; x <= OLEDX; x++)
			oled_data(0x00);
	}
	oled_setpos(0, 0);
}
     dc2:	00 e0       	ldi	r16, 0x00	; 0
     dc4:	10 c0       	rjmp	.+32     	; 0xde6 <oled_clear+0x32>
	oled_setpos(0, 0);
	
	for(page = 0; page <= OLEDY; page++)
	{
		for(x = 0; x <= OLEDX; x++)
			oled_data(0x00);
     dc6:	80 2f       	mov	r24, r16
     dc8:	c8 df       	rcall	.-112    	; 0xd5a <oled_data>
	
	oled_setpos(0, 0);
	
	for(page = 0; page <= OLEDY; page++)
	{
		for(x = 0; x <= OLEDX; x++)
     dca:	1f 5f       	subi	r17, 0xFF	; 255
     dcc:	10 38       	cpi	r17, 0x80	; 128
     dce:	d9 f7       	brne	.-10     	; 0xdc6 <oled_clear+0x12>
{
	unsigned char page, x;
	
	oled_setpos(0, 0);
	
	for(page = 0; page <= OLEDY; page++)
     dd0:	f3 94       	inc	r15
     dd2:	88 e0       	ldi	r24, 0x08	; 8
     dd4:	f8 16       	cp	r15, r24
     dd6:	39 f4       	brne	.+14     	; 0xde6 <oled_clear+0x32>
	{
		for(x = 0; x <= OLEDX; x++)
			oled_data(0x00);
	}
	oled_setpos(0, 0);
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	d8 df       	rcall	.-80     	; 0xd8e <oled_setpos>
}
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	08 95       	ret
     de6:	10 2f       	mov	r17, r16
     de8:	ee cf       	rjmp	.-36     	; 0xdc6 <oled_clear+0x12>

00000dea <oled_write_char>:
	i2c_write(data);
	i2c_stop();
}

void oled_write_char(char ch)
{
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	18 2f       	mov	r17, r24
	//oled_checkposx();
	
	if(ch == '\n')	//go to newline
     df2:	8a 30       	cpi	r24, 0x0A	; 10
     df4:	89 f4       	brne	.+34     	; 0xe18 <oled_write_char+0x2e>
	{
		if(pos_y < 8)
     df6:	60 91 98 00 	lds	r22, 0x0098
     dfa:	68 30       	cpi	r22, 0x08	; 8
     dfc:	30 f4       	brcc	.+12     	; 0xe0a <oled_write_char+0x20>
			oled_setpos(0, ++pos_y);
     dfe:	6f 5f       	subi	r22, 0xFF	; 255
     e00:	60 93 98 00 	sts	0x0098, r22
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	c3 df       	rcall	.-122    	; 0xd8e <oled_setpos>
     e08:	23 c0       	rjmp	.+70     	; 0xe50 <oled_write_char+0x66>
		else
		{
			pos_y = 0;
			oled_setpos(0, ++pos_y);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 93 98 00 	sts	0x0098, r24
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	bc df       	rcall	.-136    	; 0xd8e <oled_setpos>
     e16:	1c c0       	rjmp	.+56     	; 0xe50 <oled_write_char+0x66>
		return;
	}
	
	//convert ASCII to map address
	ch -= 32;
	i2c_start();
     e18:	ca dd       	rcall	.-1132   	; 0x9ae <i2c_start>
	i2c_device_id(OLED, WRITE);
     e1a:	8c e3       	ldi	r24, 0x3C	; 60
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	f1 dd       	rcall	.-1054   	; 0xa02 <i2c_device_id>
	i2c_write(OLED_DATA);
     e20:	80 e4       	ldi	r24, 0x40	; 64
     e22:	93 de       	rcall	.-730    	; 0xb4a <i2c_write>
     e24:	21 2f       	mov	r18, r17
     e26:	20 52       	subi	r18, 0x20	; 32
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	c9 01       	movw	r24, r18
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	ec 01       	movw	r28, r24
     e3a:	c8 5a       	subi	r28, 0xA8	; 168
     e3c:	df 4f       	sbci	r29, 0xFF	; 255
     e3e:	10 e0       	ldi	r17, 0x00	; 0

	for (char i= 0; i < 6; i++)
	{
		i2c_write(pgm_read_byte(&oled_font6x8[ch * 6 + i]));	//*6 to select char, i increments through 
     e40:	fe 01       	movw	r30, r28
     e42:	84 91       	lpm	r24, Z+
     e44:	82 de       	rcall	.-764    	; 0xb4a <i2c_write>
	ch -= 32;
	i2c_start();
	i2c_device_id(OLED, WRITE);
	i2c_write(OLED_DATA);

	for (char i= 0; i < 6; i++)
     e46:	1f 5f       	subi	r17, 0xFF	; 255
     e48:	21 96       	adiw	r28, 0x01	; 1
     e4a:	16 30       	cpi	r17, 0x06	; 6
     e4c:	c9 f7       	brne	.-14     	; 0xe40 <oled_write_char+0x56>
	{
		i2c_write(pgm_read_byte(&oled_font6x8[ch * 6 + i]));	//*6 to select char, i increments through 
	}
	i2c_stop();
     e4e:	c4 dd       	rcall	.-1144   	; 0x9d8 <i2c_stop>
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <oled_write_int>:
	}
	//oled_write_char(pos_x);
}

void oled_write_int(unsigned char value)
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29

	char *arr;
	
	arr = convert(value);
     e5c:	2d d0       	rcall	.+90     	; 0xeb8 <convert>
     e5e:	ec 01       	movw	r28, r24
	
	while(*arr != '\0')
     e60:	88 81       	ld	r24, Y
     e62:	88 23       	and	r24, r24
     e64:	29 f0       	breq	.+10     	; 0xe70 <oled_write_int+0x18>
		oled_write_char(*arr++);
     e66:	21 96       	adiw	r28, 0x01	; 1
     e68:	c0 df       	rcall	.-128    	; 0xdea <oled_write_char>

	char *arr;
	
	arr = convert(value);
	
	while(*arr != '\0')
     e6a:	88 81       	ld	r24, Y
     e6c:	88 23       	and	r24, r24
     e6e:	d9 f7       	brne	.-10     	; 0xe66 <oled_write_int+0xe>
		oled_write_char(*arr++);
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <oled_write_string>:
	}
	i2c_stop();
}

void oled_write_string(char *str)
{
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	ec 01       	movw	r28, r24
	while(*str)
     e7c:	88 81       	ld	r24, Y
     e7e:	88 23       	and	r24, r24
     e80:	29 f0       	breq	.+10     	; 0xe8c <oled_write_string+0x16>
	{
		oled_write_char(*str++);
     e82:	21 96       	adiw	r28, 0x01	; 1
     e84:	b2 df       	rcall	.-156    	; 0xdea <oled_write_char>
	i2c_stop();
}

void oled_write_string(char *str)
{
	while(*str)
     e86:	88 81       	ld	r24, Y
     e88:	88 23       	and	r24, r24
     e8a:	d9 f7       	brne	.-10     	; 0xe82 <oled_write_string+0xc>
	{
		oled_write_char(*str++);
	}
	//oled_write_char(pos_x);
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <reverse_array>:
	
	return array;
}

void reverse_array(unsigned char *array, unsigned char end)
{
     e92:	ac 01       	movw	r20, r24
	unsigned char start = 0, temp;
	
	while(start < end)
     e94:	66 23       	and	r22, r22
     e96:	79 f0       	breq	.+30     	; 0xeb6 <reverse_array+0x24>
     e98:	20 e0       	ldi	r18, 0x00	; 0
	{
		temp = array[start];
     e9a:	da 01       	movw	r26, r20
     e9c:	a2 0f       	add	r26, r18
     e9e:	b1 1d       	adc	r27, r1
     ea0:	9c 91       	ld	r25, X
		array[start] = array[end];
     ea2:	fa 01       	movw	r30, r20
     ea4:	e6 0f       	add	r30, r22
     ea6:	f1 1d       	adc	r31, r1
     ea8:	80 81       	ld	r24, Z
     eaa:	8c 93       	st	X, r24
		array[end] = temp;
     eac:	90 83       	st	Z, r25
		start++;
     eae:	2f 5f       	subi	r18, 0xFF	; 255
		end--;
     eb0:	61 50       	subi	r22, 0x01	; 1

void reverse_array(unsigned char *array, unsigned char end)
{
	unsigned char start = 0, temp;
	
	while(start < end)
     eb2:	26 17       	cp	r18, r22
     eb4:	90 f3       	brcs	.-28     	; 0xe9a <reverse_array+0x8>
     eb6:	08 95       	ret

00000eb8 <convert>:
*/


//converts a char number value into separate ASCII
char* convert(unsigned char value)
{
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	48 2f       	mov	r20, r24
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
	static unsigned char array[4];	//3
	
	for(i = 0; i < 4; i++)
	{
		//puts value in array after being split by 1 character and converted to ascii.
		array[i] = value % 10 + '0';
     ec6:	c4 e9       	ldi	r28, 0x94	; 148
     ec8:	d0 e0       	ldi	r29, 0x00	; 0
*/


//converts a char number value into separate ASCII
char* convert(unsigned char value)
{
     eca:	52 2f       	mov	r21, r18
     ecc:	d9 01       	movw	r26, r18
	static unsigned char array[4];	//3
	
	for(i = 0; i < 4; i++)
	{
		//puts value in array after being split by 1 character and converted to ascii.
		array[i] = value % 10 + '0';
     ece:	fe 01       	movw	r30, r28
     ed0:	e2 0f       	add	r30, r18
     ed2:	f3 1f       	adc	r31, r19
     ed4:	84 2f       	mov	r24, r20
     ed6:	6a e0       	ldi	r22, 0x0A	; 10
     ed8:	38 d0       	rcall	.+112    	; 0xf4a <__udivmodqi4>
     eda:	90 5d       	subi	r25, 0xD0	; 208
     edc:	90 83       	st	Z, r25
		
		//checks if it's the last digit to process && ensures that it won't go out of bounds
		if(value / 10 == 0)// && i < 3)
     ede:	4a 30       	cpi	r20, 0x0A	; 10
     ee0:	28 f4       	brcc	.+10     	; 0xeec <convert+0x34>
		{
			//if the number of digits uses is less than 3 e.g. 24, 1
			//set a terminator value in the next position
			array[i+1] = '\0';
     ee2:	fd 01       	movw	r30, r26
     ee4:	eb 56       	subi	r30, 0x6B	; 107
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	10 82       	st	Z, r1
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <convert+0x4a>
			break;
     eec:	5f 5f       	subi	r21, 0xFF	; 255
     eee:	2f 5f       	subi	r18, 0xFF	; 255
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
{
	char i;
	//support max of size char + NULL terminator
	static unsigned char array[4];	//3
	
	for(i = 0; i < 4; i++)
     ef2:	24 30       	cpi	r18, 0x04	; 4
     ef4:	31 05       	cpc	r19, r1
     ef6:	29 f0       	breq	.+10     	; 0xf02 <convert+0x4a>
			//if the number of digits uses is less than 3 e.g. 24, 1
			//set a terminator value in the next position
			array[i+1] = '\0';
			break;
		}
		value /= 10;
     ef8:	84 2f       	mov	r24, r20
     efa:	6a e0       	ldi	r22, 0x0A	; 10
     efc:	26 d0       	rcall	.+76     	; 0xf4a <__udivmodqi4>
     efe:	48 2f       	mov	r20, r24
     f00:	e4 cf       	rjmp	.-56     	; 0xeca <convert+0x12>
	}
	
	//array is currently back to front, reverse to fix
	reverse_array(array, i);
     f02:	04 e9       	ldi	r16, 0x94	; 148
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	c8 01       	movw	r24, r16
     f08:	65 2f       	mov	r22, r21
     f0a:	c3 df       	rcall	.-122    	; 0xe92 <reverse_array>
	
	return array;
}
     f0c:	c8 01       	movw	r24, r16
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	08 95       	ret

00000f18 <__mulsi3>:
     f18:	ff 27       	eor	r31, r31
     f1a:	ee 27       	eor	r30, r30
     f1c:	bb 27       	eor	r27, r27
     f1e:	aa 27       	eor	r26, r26

00000f20 <__mulsi3_loop>:
     f20:	60 ff       	sbrs	r22, 0
     f22:	04 c0       	rjmp	.+8      	; 0xf2c <__mulsi3_skip1>
     f24:	a2 0f       	add	r26, r18
     f26:	b3 1f       	adc	r27, r19
     f28:	e4 1f       	adc	r30, r20
     f2a:	f5 1f       	adc	r31, r21

00000f2c <__mulsi3_skip1>:
     f2c:	22 0f       	add	r18, r18
     f2e:	33 1f       	adc	r19, r19
     f30:	44 1f       	adc	r20, r20
     f32:	55 1f       	adc	r21, r21
     f34:	96 95       	lsr	r25
     f36:	87 95       	ror	r24
     f38:	77 95       	ror	r23
     f3a:	67 95       	ror	r22
     f3c:	89 f7       	brne	.-30     	; 0xf20 <__mulsi3_loop>
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	76 07       	cpc	r23, r22
     f42:	71 f7       	brne	.-36     	; 0xf20 <__mulsi3_loop>

00000f44 <__mulsi3_exit>:
     f44:	cf 01       	movw	r24, r30
     f46:	bd 01       	movw	r22, r26
     f48:	08 95       	ret

00000f4a <__udivmodqi4>:
     f4a:	99 1b       	sub	r25, r25
     f4c:	79 e0       	ldi	r23, 0x09	; 9
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <__udivmodqi4_ep>

00000f50 <__udivmodqi4_loop>:
     f50:	99 1f       	adc	r25, r25
     f52:	96 17       	cp	r25, r22
     f54:	08 f0       	brcs	.+2      	; 0xf58 <__udivmodqi4_ep>
     f56:	96 1b       	sub	r25, r22

00000f58 <__udivmodqi4_ep>:
     f58:	88 1f       	adc	r24, r24
     f5a:	7a 95       	dec	r23
     f5c:	c9 f7       	brne	.-14     	; 0xf50 <__udivmodqi4_loop>
     f5e:	80 95       	com	r24
     f60:	08 95       	ret

00000f62 <__udivmodsi4>:
     f62:	a1 e2       	ldi	r26, 0x21	; 33
     f64:	1a 2e       	mov	r1, r26
     f66:	aa 1b       	sub	r26, r26
     f68:	bb 1b       	sub	r27, r27
     f6a:	fd 01       	movw	r30, r26
     f6c:	0d c0       	rjmp	.+26     	; 0xf88 <__udivmodsi4_ep>

00000f6e <__udivmodsi4_loop>:
     f6e:	aa 1f       	adc	r26, r26
     f70:	bb 1f       	adc	r27, r27
     f72:	ee 1f       	adc	r30, r30
     f74:	ff 1f       	adc	r31, r31
     f76:	a2 17       	cp	r26, r18
     f78:	b3 07       	cpc	r27, r19
     f7a:	e4 07       	cpc	r30, r20
     f7c:	f5 07       	cpc	r31, r21
     f7e:	20 f0       	brcs	.+8      	; 0xf88 <__udivmodsi4_ep>
     f80:	a2 1b       	sub	r26, r18
     f82:	b3 0b       	sbc	r27, r19
     f84:	e4 0b       	sbc	r30, r20
     f86:	f5 0b       	sbc	r31, r21

00000f88 <__udivmodsi4_ep>:
     f88:	66 1f       	adc	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	88 1f       	adc	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	1a 94       	dec	r1
     f92:	69 f7       	brne	.-38     	; 0xf6e <__udivmodsi4_loop>
     f94:	60 95       	com	r22
     f96:	70 95       	com	r23
     f98:	80 95       	com	r24
     f9a:	90 95       	com	r25
     f9c:	9b 01       	movw	r18, r22
     f9e:	ac 01       	movw	r20, r24
     fa0:	bd 01       	movw	r22, r26
     fa2:	cf 01       	movw	r24, r30
     fa4:	08 95       	ret

00000fa6 <__eerd_byte_tn85>:
     fa6:	e1 99       	sbic	0x1c, 1	; 28
     fa8:	fe cf       	rjmp	.-4      	; 0xfa6 <__eerd_byte_tn85>
     faa:	9f bb       	out	0x1f, r25	; 31
     fac:	8e bb       	out	0x1e, r24	; 30
     fae:	e0 9a       	sbi	0x1c, 0	; 28
     fb0:	99 27       	eor	r25, r25
     fb2:	8d b3       	in	r24, 0x1d	; 29
     fb4:	08 95       	ret

00000fb6 <__eerd_word_tn85>:
     fb6:	a8 e1       	ldi	r26, 0x18	; 24
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	42 e0       	ldi	r20, 0x02	; 2
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	13 c0       	rjmp	.+38     	; 0xfe6 <__eerd_blraw_tn85>

00000fc0 <__eewr_byte_tn85>:
     fc0:	26 2f       	mov	r18, r22

00000fc2 <__eewr_r18_tn85>:
     fc2:	e1 99       	sbic	0x1c, 1	; 28
     fc4:	fe cf       	rjmp	.-4      	; 0xfc2 <__eewr_r18_tn85>
     fc6:	1c ba       	out	0x1c, r1	; 28
     fc8:	9f bb       	out	0x1f, r25	; 31
     fca:	8e bb       	out	0x1e, r24	; 30
     fcc:	2d bb       	out	0x1d, r18	; 29
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	e2 9a       	sbi	0x1c, 2	; 28
     fd4:	e1 9a       	sbi	0x1c, 1	; 28
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	08 95       	ret

00000fdc <__eewr_word_tn85>:
     fdc:	f1 df       	rcall	.-30     	; 0xfc0 <__eewr_byte_tn85>
     fde:	27 2f       	mov	r18, r23
     fe0:	f0 cf       	rjmp	.-32     	; 0xfc2 <__eewr_r18_tn85>

00000fe2 <__eerd_block_tn85>:
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22

00000fe6 <__eerd_blraw_tn85>:
     fe6:	fc 01       	movw	r30, r24
     fe8:	e1 99       	sbic	0x1c, 1	; 28
     fea:	fe cf       	rjmp	.-4      	; 0xfe8 <__eerd_blraw_tn85+0x2>
     fec:	06 c0       	rjmp	.+12     	; 0xffa <__eerd_blraw_tn85+0x14>
     fee:	ff bb       	out	0x1f, r31	; 31
     ff0:	ee bb       	out	0x1e, r30	; 30
     ff2:	e0 9a       	sbi	0x1c, 0	; 28
     ff4:	31 96       	adiw	r30, 0x01	; 1
     ff6:	0d b2       	in	r0, 0x1d	; 29
     ff8:	0d 92       	st	X+, r0
     ffa:	41 50       	subi	r20, 0x01	; 1
     ffc:	50 40       	sbci	r21, 0x00	; 0
     ffe:	b8 f7       	brcc	.-18     	; 0xfee <__eerd_blraw_tn85+0x8>
    1000:	08 95       	ret

00001002 <_exit>:
    1002:	f8 94       	cli

00001004 <__stop_program>:
    1004:	ff cf       	rjmp	.-2      	; 0x1004 <__stop_program>
