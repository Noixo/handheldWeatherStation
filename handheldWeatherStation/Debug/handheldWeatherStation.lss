
handheldWeatherStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000077e  00000812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000814  2**0
                  ALLOC
  3 .debug_aranges 00000168  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000258  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c27  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d9  00000000  00000000  000017fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000de0  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  00002dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000598  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000180  00000000  00000000  000036b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

  return (T);
}

unsigned long bmp280GetPressure()
{
   0:	30 c1       	rjmp	.+608    	; 0x262 <__ctors_end>

}

//scans the bus to find all i2c devices
void i2c_read_id()
{
   2:	4a c1       	rjmp	.+660    	; 0x298 <__bad_interrupt>
}

/*fills the whole screen with white/black (depends on inverse or not)
*/
void oled_fill()
{
   4:	49 c1       	rjmp	.+658    	; 0x298 <__bad_interrupt>
   6:	48 c1       	rjmp	.+656    	; 0x298 <__bad_interrupt>
   8:	47 c1       	rjmp	.+654    	; 0x298 <__bad_interrupt>
   a:	46 c1       	rjmp	.+652    	; 0x298 <__bad_interrupt>
   c:	45 c1       	rjmp	.+650    	; 0x298 <__bad_interrupt>
   e:	44 c1       	rjmp	.+648    	; 0x298 <__bad_interrupt>
  10:	43 c1       	rjmp	.+646    	; 0x298 <__bad_interrupt>
  12:	42 c1       	rjmp	.+644    	; 0x298 <__bad_interrupt>
  14:	41 c1       	rjmp	.+642    	; 0x298 <__bad_interrupt>
  16:	40 c1       	rjmp	.+640    	; 0x298 <__bad_interrupt>
  18:	3f c1       	rjmp	.+638    	; 0x298 <__bad_interrupt>
  1a:	3e c1       	rjmp	.+636    	; 0x298 <__bad_interrupt>
  1c:	3d c1       	rjmp	.+634    	; 0x298 <__bad_interrupt>

0000001e <ssd1306_init_sequence>:
  1e:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
  2e:	00 d5 f0 d9 22 da 12 db 20 8d 14 af                 ...."... ...

0000003a <oled_font6x8>:
	...
  42:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
  52:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
  62:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
  72:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
  82:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
  92:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
  a2:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
  b2:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
  c2:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
  d2:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
  e2:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
  f2:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
 102:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
 112:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
 122:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
 132:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
 142:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
 152:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
 162:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
 172:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
 182:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
 192:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
 1a2:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
 1b2:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
 1c2:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
 1d2:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
 1e2:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
 1f2:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
 202:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
 212:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
 222:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
 232:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
 242:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
 252:	a0 a0 a0 7c 00 44 64 54 4c 44 14 14 14 14 14 14     ...|.DdTLD......

00000262 <__ctors_end>:
 262:	11 24       	eor	r1, r1
 264:	1f be       	out	0x3f, r1	; 63
 266:	cf e5       	ldi	r28, 0x5F	; 95
 268:	d2 e0       	ldi	r29, 0x02	; 2
 26a:	de bf       	out	0x3e, r29	; 62
 26c:	cd bf       	out	0x3d, r28	; 61

0000026e <__do_copy_data>:
 26e:	10 e0       	ldi	r17, 0x00	; 0
 270:	a0 e6       	ldi	r26, 0x60	; 96
 272:	b0 e0       	ldi	r27, 0x00	; 0
 274:	ee e7       	ldi	r30, 0x7E	; 126
 276:	f7 e0       	ldi	r31, 0x07	; 7
 278:	02 c0       	rjmp	.+4      	; 0x27e <.do_copy_data_start>

0000027a <.do_copy_data_loop>:
 27a:	05 90       	lpm	r0, Z+
 27c:	0d 92       	st	X+, r0

0000027e <.do_copy_data_start>:
 27e:	a2 36       	cpi	r26, 0x62	; 98
 280:	b1 07       	cpc	r27, r17
 282:	d9 f7       	brne	.-10     	; 0x27a <.do_copy_data_loop>

00000284 <__do_clear_bss>:
 284:	10 e0       	ldi	r17, 0x00	; 0
 286:	a2 e6       	ldi	r26, 0x62	; 98
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
 28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
 28e:	a4 36       	cpi	r26, 0x64	; 100
 290:	b1 07       	cpc	r27, r17
 292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
 294:	9f d1       	rcall	.+830    	; 0x5d4 <main>
 296:	71 c2       	rjmp	.+1250   	; 0x77a <_exit>

00000298 <__bad_interrupt>:
 298:	b3 ce       	rjmp	.-666    	; 0x0 <__vectors>

0000029a <bmpSet>:
	i2c_write(0xB6);
	i2c_stop();
}

void bmpSet(unsigned char settings, unsigned char reg)
{
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	08 2f       	mov	r16, r24
 2a0:	16 2f       	mov	r17, r22
	i2c_start();
 2a2:	8f d0       	rcall	.+286    	; 0x3c2 <i2c_start>
	i2c_device_id(bmp280, 0);
 2a4:	87 e7       	ldi	r24, 0x77	; 119
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	b6 d0       	rcall	.+364    	; 0x416 <i2c_device_id>
	i2c_write(reg);
 2aa:	81 2f       	mov	r24, r17
 2ac:	58 d1       	rcall	.+688    	; 0x55e <i2c_write>

	i2c_write(settings);
 2ae:	80 2f       	mov	r24, r16
 2b0:	56 d1       	rcall	.+684    	; 0x55e <i2c_write>
	i2c_stop();
 2b2:	9c d0       	rcall	.+312    	; 0x3ec <i2c_stop>
}
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	08 95       	ret

000002ba <bmpReset>:
	}
}

void bmpReset()
{
	i2c_start();
 2ba:	83 d0       	rcall	.+262    	; 0x3c2 <i2c_start>
	(void) i2c_device_id(bmp280, 0);
 2bc:	87 e7       	ldi	r24, 0x77	; 119
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	aa d0       	rcall	.+340    	; 0x416 <i2c_device_id>
	i2c_write(0xE0);
 2c2:	80 ee       	ldi	r24, 0xE0	; 224
 2c4:	4c d1       	rcall	.+664    	; 0x55e <i2c_write>
	
	i2c_start();
 2c6:	7d d0       	rcall	.+250    	; 0x3c2 <i2c_start>
	(void) i2c_device_id(bmp280, 0);
 2c8:	87 e7       	ldi	r24, 0x77	; 119
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	a4 d0       	rcall	.+328    	; 0x416 <i2c_device_id>
	i2c_write(0xB6);
 2ce:	86 eb       	ldi	r24, 0xB6	; 182
 2d0:	46 d1       	rcall	.+652    	; 0x55e <i2c_write>
	i2c_stop();
 2d2:	8c d0       	rcall	.+280    	; 0x3ec <i2c_stop>
}
 2d4:	08 95       	ret

000002d6 <bmpCalibration>:

//global variable to store value needed for pressure measurement
long t_fine = 0;

void bmpCalibration()
{
 2d6:	cf 92       	push	r12
 2d8:	df 92       	push	r13
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
 2de:	0f 93       	push	r16
 2e0:	1f 93       	push	r17
 2e2:	df 93       	push	r29
 2e4:	cf 93       	push	r28
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	68 97       	sbiw	r28, 0x18	; 24
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
	unsigned char i;
	unsigned char arr[24];
	
	i2c_start();
 2f6:	65 d0       	rcall	.+202    	; 0x3c2 <i2c_start>
	
	i2c_device_id(bmp280, 0);
 2f8:	87 e7       	ldi	r24, 0x77	; 119
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	8c d0       	rcall	.+280    	; 0x416 <i2c_device_id>
	
	i2c_write(0x88);	//start of calibration data
 2fe:	88 e8       	ldi	r24, 0x88	; 136
 300:	2e d1       	rcall	.+604    	; 0x55e <i2c_write>
	
	//quick start
	i2c_start();
 302:	5f d0       	rcall	.+190    	; 0x3c2 <i2c_start>
	i2c_device_id(bmp280, 1);
 304:	87 e7       	ldi	r24, 0x77	; 119
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	86 d0       	rcall	.+268    	; 0x416 <i2c_device_id>
 30a:	8e 01       	movw	r16, r28
 30c:	0f 5f       	subi	r16, 0xFF	; 255
 30e:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(i = 0; i < sizeof(arr) -1; i++)	//write calibration values to EEPROM or return pointer?
 310:	0f 2e       	mov	r0, r31
 312:	f8 e1       	ldi	r31, 0x18	; 24
 314:	ef 2e       	mov	r14, r31
 316:	ff 24       	eor	r15, r15
 318:	f0 2d       	mov	r31, r0
 31a:	ec 0e       	add	r14, r28
 31c:	fd 1e       	adc	r15, r29
	{
		arr[i] = i2c_read(0);
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	d6 d0       	rcall	.+428    	; 0x4ce <i2c_read>
 322:	f8 01       	movw	r30, r16
 324:	81 93       	st	Z+, r24
 326:	8f 01       	movw	r16, r30
	
	//quick start
	i2c_start();
	i2c_device_id(bmp280, 1);
	
	for(i = 0; i < sizeof(arr) -1; i++)	//write calibration values to EEPROM or return pointer?
 328:	ee 15       	cp	r30, r14
 32a:	ff 05       	cpc	r31, r15
 32c:	c1 f7       	brne	.-16     	; 0x31e <bmpCalibration+0x48>
	{
		arr[i] = i2c_read(0);
	}
	arr[24] = i2c_read(1);
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	ce d0       	rcall	.+412    	; 0x4ce <i2c_read>
 332:	89 8f       	std	Y+25, r24	; 0x19
	
	i2c_stop();
 334:	5b d0       	rcall	.+182    	; 0x3ec <i2c_stop>
 336:	01 e0       	ldi	r16, 0x01	; 1
 338:	10 e0       	ldi	r17, 0x00	; 0
	
	for(i = 1; i < sizeof(arr) + 1; i++)
	{
		eeprom_write_byte((uint8_t*)i, arr[i]);
 33a:	6e 01       	movw	r12, r28
 33c:	08 94       	sec
 33e:	c1 1c       	adc	r12, r1
 340:	d1 1c       	adc	r13, r1
		while(!eeprom_is_ready());	//wait for eeprom to write data
 342:	0f 2e       	mov	r0, r31
 344:	fc e3       	ldi	r31, 0x3C	; 60
 346:	ef 2e       	mov	r14, r31
 348:	ff 24       	eor	r15, r15
 34a:	f0 2d       	mov	r31, r0
	
	i2c_stop();
	
	for(i = 1; i < sizeof(arr) + 1; i++)
	{
		eeprom_write_byte((uint8_t*)i, arr[i]);
 34c:	f6 01       	movw	r30, r12
 34e:	e0 0f       	add	r30, r16
 350:	f1 1f       	adc	r31, r17
 352:	c8 01       	movw	r24, r16
 354:	60 81       	ld	r22, Z
 356:	03 d2       	rcall	.+1030   	; 0x75e <__eewr_byte_tn85>
		while(!eeprom_is_ready());	//wait for eeprom to write data
 358:	f7 01       	movw	r30, r14
 35a:	80 81       	ld	r24, Z
 35c:	81 fd       	sbrc	r24, 1
 35e:	fc cf       	rjmp	.-8      	; 0x358 <bmpCalibration+0x82>
 360:	0f 5f       	subi	r16, 0xFF	; 255
 362:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	arr[24] = i2c_read(1);
	
	i2c_stop();
	
	for(i = 1; i < sizeof(arr) + 1; i++)
 364:	09 31       	cpi	r16, 0x19	; 25
 366:	11 05       	cpc	r17, r1
 368:	89 f7       	brne	.-30     	; 0x34c <bmpCalibration+0x76>
	{
		eeprom_write_byte((uint8_t*)i, arr[i]);
		while(!eeprom_is_ready());	//wait for eeprom to write data
	}
}
 36a:	68 96       	adiw	r28, 0x18	; 24
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	cf 91       	pop	r28
 378:	df 91       	pop	r29
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	08 95       	ret

00000388 <init_i2c>:

#include "i2c.h"

void init_i2c()
{
	DDRB |= (1 << PB0);	// Set SDA as output
 388:	e7 e3       	ldi	r30, 0x37	; 55
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	81 60       	ori	r24, 0x01	; 1
 390:	80 83       	st	Z, r24
	DDRB |= (1 << PB2);	// Set SCL as output
 392:	80 81       	ld	r24, Z
 394:	84 60       	ori	r24, 0x04	; 4
 396:	80 83       	st	Z, r24
	
	SDA_HIGH;
 398:	e8 e3       	ldi	r30, 0x38	; 56
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	80 83       	st	Z, r24
	SCL_HIGH;
 3a2:	80 81       	ld	r24, Z
 3a4:	84 60       	ori	r24, 0x04	; 4
 3a6:	80 83       	st	Z, r24
}
 3a8:	08 95       	ret

000003aa <i2c_clock>:

void i2c_clock()
{
	SCL_HIGH;
 3aa:	e8 e3       	ldi	r30, 0x38	; 56
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	84 60       	ori	r24, 0x04	; 4
 3b2:	80 83       	st	Z, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	8a 95       	dec	r24
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <i2c_clock+0xc>
	_delay_us(TIME);
	SCL_LOW;
 3ba:	80 81       	ld	r24, Z
 3bc:	8b 7f       	andi	r24, 0xFB	; 251
 3be:	80 83       	st	Z, r24
}
 3c0:	08 95       	ret

000003c2 <i2c_start>:

void i2c_start()
{
	//Clock stays high and SDA pulled low
	SDA_HIGH;
 3c2:	e8 e3       	ldi	r30, 0x38	; 56
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	81 60       	ori	r24, 0x01	; 1
 3ca:	80 83       	st	Z, r24
	SCL_HIGH;
 3cc:	80 81       	ld	r24, Z
 3ce:	84 60       	ori	r24, 0x04	; 4
 3d0:	80 83       	st	Z, r24
 3d2:	93 e0       	ldi	r25, 0x03	; 3
 3d4:	89 2f       	mov	r24, r25
 3d6:	8a 95       	dec	r24
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <i2c_start+0x14>

	_delay_us(TIME);
	SDA_LOW;
 3da:	80 81       	ld	r24, Z
 3dc:	8e 7f       	andi	r24, 0xFE	; 254
 3de:	80 83       	st	Z, r24
 3e0:	9a 95       	dec	r25
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <i2c_start+0x1e>
	_delay_us(TIME);
	SCL_LOW;
 3e4:	80 81       	ld	r24, Z
 3e6:	8b 7f       	andi	r24, 0xFB	; 251
 3e8:	80 83       	st	Z, r24
}
 3ea:	08 95       	ret

000003ec <i2c_stop>:

void i2c_stop()
{
	//clock goes low before data
	SCL_LOW;
 3ec:	e8 e3       	ldi	r30, 0x38	; 56
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	8b 7f       	andi	r24, 0xFB	; 251
 3f4:	80 83       	st	Z, r24
	SDA_LOW;
 3f6:	80 81       	ld	r24, Z
 3f8:	8e 7f       	andi	r24, 0xFE	; 254
 3fa:	80 83       	st	Z, r24
 3fc:	93 e0       	ldi	r25, 0x03	; 3
 3fe:	89 2f       	mov	r24, r25
 400:	8a 95       	dec	r24
 402:	f1 f7       	brne	.-4      	; 0x400 <i2c_stop+0x14>
	_delay_us(TIME);

	SCL_HIGH;
 404:	80 81       	ld	r24, Z
 406:	84 60       	ori	r24, 0x04	; 4
 408:	80 83       	st	Z, r24
 40a:	9a 95       	dec	r25
 40c:	f1 f7       	brne	.-4      	; 0x40a <i2c_stop+0x1e>
	_delay_us(TIME);
	SDA_HIGH;
 40e:	80 81       	ld	r24, Z
 410:	81 60       	ori	r24, 0x01	; 1
 412:	80 83       	st	Z, r24
}
 414:	08 95       	ret

00000416 <i2c_device_id>:

char i2c_device_id(volatile char id, volatile char rw)
{
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	df 93       	push	r29
 420:	cf 93       	push	r28
 422:	00 d0       	rcall	.+0      	; 0x424 <i2c_device_id+0xe>
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	89 83       	std	Y+1, r24	; 0x01
 42a:	6a 83       	std	Y+2, r22	; 0x02
	char i, ACK;
	//id = 0x77;//0x76;//0x3C;//78;

	//check if valid i2c address
	if(id < 8 || id > 120)
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	88 30       	cpi	r24, 0x08	; 8
 430:	08 f4       	brcc	.+2      	; 0x434 <i2c_device_id+0x1e>
 432:	42 c0       	rjmp	.+132    	; 0x4b8 <i2c_device_id+0xa2>
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	89 37       	cpi	r24, 0x79	; 121
 438:	08 f0       	brcs	.+2      	; 0x43c <i2c_device_id+0x26>
 43a:	3e c0       	rjmp	.+124    	; 0x4b8 <i2c_device_id+0xa2>
 43c:	07 e0       	ldi	r16, 0x07	; 7
	{
		id <<= 1;
		if((id & 0x80))
			SDA_HIGH;
		else
			SDA_LOW;
 43e:	0f 2e       	mov	r0, r31
 440:	f8 e3       	ldi	r31, 0x38	; 56
 442:	ef 2e       	mov	r14, r31
 444:	ff 24       	eor	r15, r15
 446:	f0 2d       	mov	r31, r0
		return 2;

	//Starting at 7 to avoid last bit
	for(i = 7; i > 0; i--)
	{
		id <<= 1;
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	88 0f       	add	r24, r24
 44c:	89 83       	std	Y+1, r24	; 0x01
		if((id & 0x80))
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	88 23       	and	r24, r24
 452:	2c f4       	brge	.+10     	; 0x45e <i2c_device_id+0x48>
			SDA_HIGH;
 454:	f7 01       	movw	r30, r14
 456:	80 81       	ld	r24, Z
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	80 83       	st	Z, r24
 45c:	04 c0       	rjmp	.+8      	; 0x466 <i2c_device_id+0x50>
		else
			SDA_LOW;
 45e:	f7 01       	movw	r30, r14
 460:	80 81       	ld	r24, Z
 462:	8e 7f       	andi	r24, 0xFE	; 254
 464:	80 83       	st	Z, r24
		//SDA = id & 0x80;	//Sends a 1 or 0 to SDA

		//Pulses the clock
		i2c_clock();
 466:	a1 df       	rcall	.-190    	; 0x3aa <i2c_clock>
	//check if valid i2c address
	if(id < 8 || id > 120)
		return 2;

	//Starting at 7 to avoid last bit
	for(i = 7; i > 0; i--)
 468:	01 50       	subi	r16, 0x01	; 1
 46a:	71 f7       	brne	.-36     	; 0x448 <i2c_device_id+0x32>
		i2c_clock();
	}
	//8th bit. pulses the read/write bit
	//rw low for write and high for read

	if(rw == 1)
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	31 f4       	brne	.+12     	; 0x47e <i2c_device_id+0x68>
		SDA_HIGH;
 472:	e8 e3       	ldi	r30, 0x38	; 56
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	80 83       	st	Z, r24
 47c:	05 c0       	rjmp	.+10     	; 0x488 <i2c_device_id+0x72>
	else
		SDA_LOW;
 47e:	e8 e3       	ldi	r30, 0x38	; 56
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	8e 7f       	andi	r24, 0xFE	; 254
 486:	80 83       	st	Z, r24
	i2c_clock();
 488:	90 df       	rcall	.-224    	; 0x3aa <i2c_clock>
	//SDA = rw;
	
	//9th bit
	//set SDA to input
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
 48a:	0f 2e       	mov	r0, r31
 48c:	f7 e3       	ldi	r31, 0x37	; 55
 48e:	ef 2e       	mov	r14, r31
 490:	ff 24       	eor	r15, r15
 492:	f0 2d       	mov	r31, r0
 494:	f7 01       	movw	r30, r14
 496:	80 81       	ld	r24, Z
 498:	8e 7f       	andi	r24, 0xFE	; 254
 49a:	80 83       	st	Z, r24
	SDA_HIGH;//PORTB |= (1 << PB0);	//enable pull up; turn on pin
 49c:	e8 e3       	ldi	r30, 0x38	; 56
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	81 60       	ori	r24, 0x01	; 1
 4a4:	80 83       	st	Z, r24
	ACK = (PINB & (1 << PB0));	//read pin
 4a6:	86 b3       	in	r24, 0x16	; 22
 4a8:	18 2f       	mov	r17, r24
 4aa:	11 70       	andi	r17, 0x01	; 1

	i2c_clock();
 4ac:	7e df       	rcall	.-260    	; 0x3aa <i2c_clock>
	
	DDRB |= (1 << PB0);	//set pin0 to output
 4ae:	f7 01       	movw	r30, r14
 4b0:	80 81       	ld	r24, Z
 4b2:	81 60       	ori	r24, 0x01	; 1
 4b4:	80 83       	st	Z, r24
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <i2c_device_id+0xa4>

	return ACK;
 4b8:	12 e0       	ldi	r17, 0x02	; 2
}
 4ba:	81 2f       	mov	r24, r17
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	cf 91       	pop	r28
 4c2:	df 91       	pop	r29
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	08 95       	ret

000004ce <i2c_read>:

unsigned char i2c_read(char last_byte)
{
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	d8 2e       	mov	r13, r24
	char i = 0, byte = 0;
	SDA_HIGH;
 4de:	e8 e3       	ldi	r30, 0x38	; 56
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	80 83       	st	Z, r24
	
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
 4e8:	a7 e3       	ldi	r26, 0x37	; 55
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	8c 91       	ld	r24, X
 4ee:	8e 7f       	andi	r24, 0xFE	; 254
 4f0:	8c 93       	st	X, r24
	SDA_HIGH;				//enable pull up; turn on pin
 4f2:	80 81       	ld	r24, Z
 4f4:	81 60       	ori	r24, 0x01	; 1
 4f6:	80 83       	st	Z, r24
 4f8:	18 e0       	ldi	r17, 0x08	; 8
 4fa:	00 e0       	ldi	r16, 0x00	; 0
	
	for(i = 8; i > 0; i--)
	{	
		SCL_HIGH;
 4fc:	c8 e3       	ldi	r28, 0x38	; 56
 4fe:	d0 e0       	ldi	r29, 0x00	; 0
		byte <<= 1;

		//read pin
		
		//OR byte bit with SDA
		byte |= (PINB & (1<<PB0));
 500:	0f 2e       	mov	r0, r31
 502:	f6 e3       	ldi	r31, 0x36	; 54
 504:	ef 2e       	mov	r14, r31
 506:	ff 24       	eor	r15, r15
 508:	f0 2d       	mov	r31, r0
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;				//enable pull up; turn on pin
	
	for(i = 8; i > 0; i--)
	{	
		SCL_HIGH;
 50a:	88 81       	ld	r24, Y
 50c:	84 60       	ori	r24, 0x04	; 4
 50e:	88 83       	st	Y, r24
		byte <<= 1;

		//read pin
		
		//OR byte bit with SDA
		byte |= (PINB & (1<<PB0));
 510:	f7 01       	movw	r30, r14
 512:	80 81       	ld	r24, Z
 514:	90 2f       	mov	r25, r16
 516:	99 0f       	add	r25, r25
 518:	81 70       	andi	r24, 0x01	; 1
 51a:	09 2f       	mov	r16, r25
 51c:	08 2b       	or	r16, r24

		i2c_clock();
 51e:	45 df       	rcall	.-374    	; 0x3aa <i2c_clock>
	SDA_HIGH;
	
	DDRB &= ~(1 << PB0);	//set pin0 to input; turn off pin
	SDA_HIGH;				//enable pull up; turn on pin
	
	for(i = 8; i > 0; i--)
 520:	11 50       	subi	r17, 0x01	; 1
 522:	99 f7       	brne	.-26     	; 0x50a <i2c_read+0x3c>
		//OR byte bit with SDA
		byte |= (PINB & (1<<PB0));

		i2c_clock();
	}
	DDRB |= (1 << PB0);	//set pin0 to output
 524:	e7 e3       	ldi	r30, 0x37	; 55
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	81 60       	ori	r24, 0x01	; 1
 52c:	80 83       	st	Z, r24
	
	//9th bit master acknowledges data transfer or indicates last byte
	if(last_byte == 1)
 52e:	f1 e0       	ldi	r31, 0x01	; 1
 530:	df 16       	cp	r13, r31
 532:	31 f4       	brne	.+12     	; 0x540 <i2c_read+0x72>
		SDA_HIGH;
 534:	e8 e3       	ldi	r30, 0x38	; 56
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	80 83       	st	Z, r24
 53e:	05 c0       	rjmp	.+10     	; 0x54a <i2c_read+0x7c>
	else
		SDA_LOW;
 540:	e8 e3       	ldi	r30, 0x38	; 56
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	8e 7f       	andi	r24, 0xFE	; 254
 548:	80 83       	st	Z, r24
	//SDA = last_byte;
	
	i2c_clock();
 54a:	2f df       	rcall	.-418    	; 0x3aa <i2c_clock>
	
	return byte;
}
 54c:	80 2f       	mov	r24, r16
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	ff 90       	pop	r15
 558:	ef 90       	pop	r14
 55a:	df 90       	pop	r13
 55c:	08 95       	ret

0000055e <i2c_write>:

void i2c_write(unsigned char byte)
{
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	08 2f       	mov	r16, r24
 568:	18 e0       	ldi	r17, 0x08	; 8
	{
		//bit shifts data by i and ANDs it to convert it to boolean
		if((byte & 0x80))
			SDA_HIGH;
		else
			SDA_LOW;
 56a:	c8 e3       	ldi	r28, 0x38	; 56
 56c:	d0 e0       	ldi	r29, 0x00	; 0
{
	char i;
	for(i = 8; i > 0; i--)
	{
		//bit shifts data by i and ANDs it to convert it to boolean
		if((byte & 0x80))
 56e:	00 23       	and	r16, r16
 570:	24 f4       	brge	.+8      	; 0x57a <i2c_write+0x1c>
			SDA_HIGH;
 572:	88 81       	ld	r24, Y
 574:	81 60       	ori	r24, 0x01	; 1
 576:	88 83       	st	Y, r24
 578:	03 c0       	rjmp	.+6      	; 0x580 <i2c_write+0x22>
		else
			SDA_LOW;
 57a:	88 81       	ld	r24, Y
 57c:	8e 7f       	andi	r24, 0xFE	; 254
 57e:	88 83       	st	Y, r24
		//SDA = byte & 0x80;	//Sends a 1 or 0 to SDA
		
		//pulse the clock
		i2c_clock();
 580:	14 df       	rcall	.-472    	; 0x3aa <i2c_clock>
}

void i2c_write(unsigned char byte)
{
	char i;
	for(i = 8; i > 0; i--)
 582:	11 50       	subi	r17, 0x01	; 1
 584:	11 f0       	breq	.+4      	; 0x58a <i2c_write+0x2c>
		//SDA = byte & 0x80;	//Sends a 1 or 0 to SDA
		
		//pulse the clock
		i2c_clock();
		
		byte <<= 1;
 586:	00 0f       	add	r16, r16
 588:	f2 cf       	rjmp	.-28     	; 0x56e <i2c_write+0x10>
	}
	
	//set to high to detect ack bit
	SDA_HIGH;
 58a:	e8 e3       	ldi	r30, 0x38	; 56
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	81 60       	ori	r24, 0x01	; 1
 592:	80 83       	st	Z, r24
	
	i2c_clock();
 594:	0a df       	rcall	.-492    	; 0x3aa <i2c_clock>

}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <blink>:
//#include "font6x8.h"

void blink()
{
	//flash LED
	PORTB |= (1 << PB4);	//on
 5a0:	e8 e3       	ldi	r30, 0x38	; 56
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	80 61       	ori	r24, 0x10	; 16
 5a8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5aa:	20 e5       	ldi	r18, 0x50	; 80
 5ac:	33 ec       	ldi	r19, 0xC3	; 195
 5ae:	c9 01       	movw	r24, r18
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <blink+0x10>
	_delay_ms(200);
	PORTB &= ~(1 << PB4);	//off
 5b4:	80 81       	ld	r24, Z
 5b6:	8f 7e       	andi	r24, 0xEF	; 239
 5b8:	80 83       	st	Z, r24
 5ba:	c9 01       	movw	r24, r18
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <blink+0x1c>
	_delay_ms(200);
	
	//flash LED
	PORTB |= (1 << PB4);	//on
 5c0:	80 81       	ld	r24, Z
 5c2:	80 61       	ori	r24, 0x10	; 16
 5c4:	80 83       	st	Z, r24
 5c6:	c9 01       	movw	r24, r18
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <blink+0x28>
	_delay_ms(200);
	PORTB &= ~(1 << PB4);	//off
 5cc:	80 81       	ld	r24, Z
 5ce:	8f 7e       	andi	r24, 0xEF	; 239
 5d0:	80 83       	st	Z, r24
}
 5d2:	08 95       	ret

000005d4 <main>:
	0xAF			// Display ON in normal mode
	
};

int main(void)
{
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
	DDRB |= (1 << PB4); //set led to output
 5dc:	e7 e3       	ldi	r30, 0x37	; 55
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	80 61       	ori	r24, 0x10	; 16
 5e4:	80 83       	st	Z, r24
	
	init_i2c();
 5e6:	d0 de       	rcall	.-608    	; 0x388 <init_i2c>
	
	blink();
 5e8:	db df       	rcall	.-74     	; 0x5a0 <blink>
	
	oled_write_string("\n");
 5ea:	80 e6       	ldi	r24, 0x60	; 96
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	a1 d0       	rcall	.+322    	; 0x732 <oled_write_string>
 5f0:	ce e1       	ldi	r28, 0x1E	; 30
 5f2:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
 5f4:	0a e3       	ldi	r16, 0x3A	; 58
 5f6:	10 e0       	ldi	r17, 0x00	; 0
		oled_control(pgm_read_byte(&ssd1306_init_sequence[i]));
 5f8:	fe 01       	movw	r30, r28
 5fa:	84 91       	lpm	r24, Z+
 5fc:	28 d0       	rcall	.+80     	; 0x64e <oled_control>
 5fe:	21 96       	adiw	r28, 0x01	; 1
	
	blink();
	
	oled_write_string("\n");
	
	for (uint8_t i = 0; i < sizeof (ssd1306_init_sequence); i++) {
 600:	c0 17       	cp	r28, r16
 602:	d1 07       	cpc	r29, r17
 604:	c9 f7       	brne	.-14     	; 0x5f8 <main+0x24>
		i2c_write(pgm_read_byte(&ssd1306_init_sequence[i]));
		*/
	}
	//i2c_stop();
	
	if(eeprom_read_byte(0) == 0xFF)	//if new ATTINY
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	a1 d0       	rcall	.+322    	; 0x74e <__eerd_byte_tn85>
 60c:	8f 3f       	cpi	r24, 0xFF	; 255
 60e:	29 f4       	brne	.+10     	; 0x61a <main+0x46>
	{
		bmpCalibration();	//run calibration to save data in EEPROM
 610:	62 de       	rcall	.-828    	; 0x2d6 <bmpCalibration>
		eeprom_write_byte(0, 0);
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	a2 d0       	rcall	.+324    	; 0x75e <__eewr_byte_tn85>
	
	_delay_ms(1000);
	oled_clear();
	//oled_control(0xFF, OLED_DATA);
	*/
	oled_clear();
 61a:	39 d0       	rcall	.+114    	; 0x68e <oled_clear>
	//oled_write_int((bmp280GetTemp()/100));
	short bmpTemp;
	char INTbmpTemp;
	unsigned long bmpPressure;
	
	oled_setpos(0,0);
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	23 d0       	rcall	.+70     	; 0x668 <oled_setpos>
	//oled_write_int(eeprom_read_byte(2));
	//oled_setpos(0,1);
	//oled_write_int(dig_T2);
	//oled_setpos(0,2);
	//oled_write_int(dig_T3);
	bmpReset();
 622:	4b de       	rcall	.-874    	; 0x2ba <bmpReset>
	
	//setting up sampling parameters
	bmpSet(0x64, CONFIG); //standby time = 250ms, IIR filter =
 624:	84 e6       	ldi	r24, 0x64	; 100
 626:	65 ef       	ldi	r22, 0xF5	; 245
 628:	38 de       	rcall	.-912    	; 0x29a <bmpSet>
	bmpSet(0xFF, CTRL_MEAS); //x16 temperature oversampling, x16 pressure measurement, normal mode
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	64 ef       	ldi	r22, 0xF4	; 244
 62e:	35 de       	rcall	.-918    	; 0x29a <bmpSet>
		/*
		oled_fill();
		_delay_ms(1000);
		oled_clear();
		*/
		blink();
 630:	b7 df       	rcall	.-146    	; 0x5a0 <blink>
 632:	fe cf       	rjmp	.-4      	; 0x630 <main+0x5c>

00000634 <oled_data>:
}

/*send data to oled
*/
void oled_data(char data)
{
 634:	1f 93       	push	r17
 636:	18 2f       	mov	r17, r24
	//oled_checkposx();	//check if data in range
	
	i2c_start();
 638:	c4 de       	rcall	.-632    	; 0x3c2 <i2c_start>
	i2c_device_id(OLED, WRITE);
 63a:	8c e3       	ldi	r24, 0x3C	; 60
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	eb de       	rcall	.-554    	; 0x416 <i2c_device_id>
	i2c_write(OLED_DATA);		//DATA byte
 640:	80 e4       	ldi	r24, 0x40	; 64
 642:	8d df       	rcall	.-230    	; 0x55e <i2c_write>
	i2c_write(data);
 644:	81 2f       	mov	r24, r17
 646:	8b df       	rcall	.-234    	; 0x55e <i2c_write>
	i2c_stop();
 648:	d1 de       	rcall	.-606    	; 0x3ec <i2c_stop>
}
 64a:	1f 91       	pop	r17
 64c:	08 95       	ret

0000064e <oled_control>:
}

/*send commands to oled
*/
void oled_control(char command)
{
 64e:	1f 93       	push	r17
 650:	18 2f       	mov	r17, r24
	i2c_start();
 652:	b7 de       	rcall	.-658    	; 0x3c2 <i2c_start>
	i2c_device_id(OLED, WRITE);
 654:	8c e3       	ldi	r24, 0x3C	; 60
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	de de       	rcall	.-580    	; 0x416 <i2c_device_id>
	i2c_write(OLED_COMMAND);		//control byte
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	80 df       	rcall	.-256    	; 0x55e <i2c_write>
	i2c_write(command);	
 65e:	81 2f       	mov	r24, r17
 660:	7e df       	rcall	.-260    	; 0x55e <i2c_write>
	i2c_stop();
 662:	c4 de       	rcall	.-632    	; 0x3ec <i2c_stop>
}
 664:	1f 91       	pop	r17
 666:	08 95       	ret

00000668 <oled_setpos>:
*/
/*sets cursor position.
 ARGS: x = 0-127, y = 0-7
*/
void oled_setpos(char x, char y)
{
 668:	0f 93       	push	r16
 66a:	1f 93       	push	r17
 66c:	18 2f       	mov	r17, r24
 66e:	06 2f       	mov	r16, r22
	//add data verification
	oled_control(OLED_COLUMNADDR);
 670:	81 e2       	ldi	r24, 0x21	; 33
 672:	ed df       	rcall	.-38     	; 0x64e <oled_control>
	oled_control(x);
 674:	81 2f       	mov	r24, r17
 676:	eb df       	rcall	.-42     	; 0x64e <oled_control>
	oled_control(127);
 678:	8f e7       	ldi	r24, 0x7F	; 127
 67a:	e9 df       	rcall	.-46     	; 0x64e <oled_control>
	
	oled_control(OLED_PAGEADDR);
 67c:	82 e2       	ldi	r24, 0x22	; 34
 67e:	e7 df       	rcall	.-50     	; 0x64e <oled_control>
	oled_control(y);
 680:	80 2f       	mov	r24, r16
 682:	e5 df       	rcall	.-54     	; 0x64e <oled_control>
	oled_control(7);
 684:	87 e0       	ldi	r24, 0x07	; 7
 686:	e3 df       	rcall	.-58     	; 0x64e <oled_control>
}
 688:	1f 91       	pop	r17
 68a:	0f 91       	pop	r16
 68c:	08 95       	ret

0000068e <oled_clear>:
}

/*clears the display with blank
*/
void oled_clear()
{
 68e:	ff 92       	push	r15
 690:	0f 93       	push	r16
 692:	1f 93       	push	r17
	unsigned char page, x;
	
	oled_setpos(0, 0);
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	60 e0       	ldi	r22, 0x00	; 0
 698:	e7 df       	rcall	.-50     	; 0x668 <oled_setpos>
 69a:	ff 24       	eor	r15, r15
	{
		for(x = 0; x <= OLEDX; x++)
			oled_data(0x00);
	}
	oled_setpos(0, 0);
}
 69c:	00 e0       	ldi	r16, 0x00	; 0
 69e:	10 c0       	rjmp	.+32     	; 0x6c0 <oled_clear+0x32>
	oled_setpos(0, 0);
	
	for(page = 0; page <= OLEDY; page++)
	{
		for(x = 0; x <= OLEDX; x++)
			oled_data(0x00);
 6a0:	80 2f       	mov	r24, r16
 6a2:	c8 df       	rcall	.-112    	; 0x634 <oled_data>
	
	oled_setpos(0, 0);
	
	for(page = 0; page <= OLEDY; page++)
	{
		for(x = 0; x <= OLEDX; x++)
 6a4:	1f 5f       	subi	r17, 0xFF	; 255
 6a6:	10 38       	cpi	r17, 0x80	; 128
 6a8:	d9 f7       	brne	.-10     	; 0x6a0 <oled_clear+0x12>
{
	unsigned char page, x;
	
	oled_setpos(0, 0);
	
	for(page = 0; page <= OLEDY; page++)
 6aa:	f3 94       	inc	r15
 6ac:	88 e0       	ldi	r24, 0x08	; 8
 6ae:	f8 16       	cp	r15, r24
 6b0:	39 f4       	brne	.+14     	; 0x6c0 <oled_clear+0x32>
	{
		for(x = 0; x <= OLEDX; x++)
			oled_data(0x00);
	}
	oled_setpos(0, 0);
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	d8 df       	rcall	.-80     	; 0x668 <oled_setpos>
}
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	ff 90       	pop	r15
 6be:	08 95       	ret
 6c0:	10 2f       	mov	r17, r16
 6c2:	ee cf       	rjmp	.-36     	; 0x6a0 <oled_clear+0x12>

000006c4 <oled_write_char>:
	i2c_write(data);
	i2c_stop();
}

void oled_write_char(char ch)
{
 6c4:	1f 93       	push	r17
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	18 2f       	mov	r17, r24
	//oled_checkposx();
	
	if(ch == '\n')	//go to newline
 6cc:	8a 30       	cpi	r24, 0x0A	; 10
 6ce:	89 f4       	brne	.+34     	; 0x6f2 <oled_write_char+0x2e>
	{
		if(pos_y < 8)
 6d0:	60 91 62 00 	lds	r22, 0x0062
 6d4:	68 30       	cpi	r22, 0x08	; 8
 6d6:	30 f4       	brcc	.+12     	; 0x6e4 <oled_write_char+0x20>
			oled_setpos(0, ++pos_y);
 6d8:	6f 5f       	subi	r22, 0xFF	; 255
 6da:	60 93 62 00 	sts	0x0062, r22
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	c3 df       	rcall	.-122    	; 0x668 <oled_setpos>
 6e2:	23 c0       	rjmp	.+70     	; 0x72a <oled_write_char+0x66>
		else
		{
			pos_y = 0;
			oled_setpos(0, ++pos_y);
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	80 93 62 00 	sts	0x0062, r24
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	bc df       	rcall	.-136    	; 0x668 <oled_setpos>
 6f0:	1c c0       	rjmp	.+56     	; 0x72a <oled_write_char+0x66>
		return;
	}
	
	//convert ASCII to map address
	ch -= 32;
	i2c_start();
 6f2:	67 de       	rcall	.-818    	; 0x3c2 <i2c_start>
	i2c_device_id(OLED, WRITE);
 6f4:	8c e3       	ldi	r24, 0x3C	; 60
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	8e de       	rcall	.-740    	; 0x416 <i2c_device_id>
	i2c_write(OLED_DATA);
 6fa:	80 e4       	ldi	r24, 0x40	; 64
 6fc:	30 df       	rcall	.-416    	; 0x55e <i2c_write>
 6fe:	21 2f       	mov	r18, r17
 700:	20 52       	subi	r18, 0x20	; 32
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	c9 01       	movw	r24, r18
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	82 0f       	add	r24, r18
 70c:	93 1f       	adc	r25, r19
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	ec 01       	movw	r28, r24
 714:	c6 5c       	subi	r28, 0xC6	; 198
 716:	df 4f       	sbci	r29, 0xFF	; 255
 718:	10 e0       	ldi	r17, 0x00	; 0

	for (char i= 0; i < 6; i++)
	{
		i2c_write(pgm_read_byte(&oled_font6x8[ch * 6 + i]));
 71a:	fe 01       	movw	r30, r28
 71c:	84 91       	lpm	r24, Z+
 71e:	1f df       	rcall	.-450    	; 0x55e <i2c_write>
	ch -= 32;
	i2c_start();
	i2c_device_id(OLED, WRITE);
	i2c_write(OLED_DATA);

	for (char i= 0; i < 6; i++)
 720:	1f 5f       	subi	r17, 0xFF	; 255
 722:	21 96       	adiw	r28, 0x01	; 1
 724:	16 30       	cpi	r17, 0x06	; 6
 726:	c9 f7       	brne	.-14     	; 0x71a <oled_write_char+0x56>
	{
		i2c_write(pgm_read_byte(&oled_font6x8[ch * 6 + i]));
	}
	i2c_stop();
 728:	61 de       	rcall	.-830    	; 0x3ec <i2c_stop>
}
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	1f 91       	pop	r17
 730:	08 95       	ret

00000732 <oled_write_string>:

void oled_write_string(char *str)
{
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	ec 01       	movw	r28, r24
	while(*str)
 738:	88 81       	ld	r24, Y
 73a:	88 23       	and	r24, r24
 73c:	29 f0       	breq	.+10     	; 0x748 <oled_write_string+0x16>
	{
		oled_write_char(*str++);
 73e:	21 96       	adiw	r28, 0x01	; 1
 740:	c1 df       	rcall	.-126    	; 0x6c4 <oled_write_char>
	i2c_stop();
}

void oled_write_string(char *str)
{
	while(*str)
 742:	88 81       	ld	r24, Y
 744:	88 23       	and	r24, r24
 746:	d9 f7       	brne	.-10     	; 0x73e <oled_write_string+0xc>
	{
		oled_write_char(*str++);
	}
	//oled_write_char(pos_x);
}
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	08 95       	ret

0000074e <__eerd_byte_tn85>:
 74e:	e1 99       	sbic	0x1c, 1	; 28
 750:	fe cf       	rjmp	.-4      	; 0x74e <__eerd_byte_tn85>
 752:	9f bb       	out	0x1f, r25	; 31
 754:	8e bb       	out	0x1e, r24	; 30
 756:	e0 9a       	sbi	0x1c, 0	; 28
 758:	99 27       	eor	r25, r25
 75a:	8d b3       	in	r24, 0x1d	; 29
 75c:	08 95       	ret

0000075e <__eewr_byte_tn85>:
 75e:	26 2f       	mov	r18, r22

00000760 <__eewr_r18_tn85>:
 760:	e1 99       	sbic	0x1c, 1	; 28
 762:	fe cf       	rjmp	.-4      	; 0x760 <__eewr_r18_tn85>
 764:	1c ba       	out	0x1c, r1	; 28
 766:	9f bb       	out	0x1f, r25	; 31
 768:	8e bb       	out	0x1e, r24	; 30
 76a:	2d bb       	out	0x1d, r18	; 29
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	e2 9a       	sbi	0x1c, 2	; 28
 772:	e1 9a       	sbi	0x1c, 1	; 28
 774:	0f be       	out	0x3f, r0	; 63
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	08 95       	ret

0000077a <_exit>:
 77a:	f8 94       	cli

0000077c <__stop_program>:
 77c:	ff cf       	rjmp	.-2      	; 0x77c <__stop_program>
